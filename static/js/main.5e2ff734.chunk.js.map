{"version":3,"sources":["logic/Question.tsx","logic/QGenerators.tsx","logic/GameState.tsx","logic/GameController.tsx","view/InputView.tsx","view/QuestionView.tsx","view/ScoreView.tsx","view/GameInfoView.tsx","view/ButtonRow.tsx","logic/KeyDecoder.tsx","view/CenterView.tsx","logic/GameModes.ts","view/GamemodeSidebar.tsx","view/HeaderView.tsx","App.tsx","index.tsx"],"names":["defaultScorer","guess","actual","Question","expression","answer","scorer","timelimit","id","this","Math","random","rngInt","low","high","floor","logRng","mid","variance","pow","genMul","config","numOperands","rangeCenter","rangeVariance","operandVariance","timeLimit","numOp","result","operands","i","nextOperand","push","round","sort","a","b","reduce","acc","cur","questionString","forEach","element","slice","fraction","ProgressState","InputType","defaultConfig","GameState","generator","questionArray","currentQuestion","category","numQuestions","currentIndex","recentScore","totalScore","recentGuess","recentAnswer","progressState","PREGAME","generatorconfig","totalTime","initialState","state","InputView","props","inputField","canvasRef","timerInterval","questionId","startTime","handleKeyDown","e","key","gameState","RUNNING","parsed","parseFloat","text","error","isNaN","inputHandler","type","ANSWER","payload","setState","POSTGAME","BUTTON","React","createRef","drawArc","bind","handleChange","current","canvas","context","getContext","strokeStyle","fillStyle","theme","background","fillRect","lineWidth","translate","cx","width","cy","height","beginPath","arc","PI","stroke","focus","inputStyle","color","textColor","curQuestion","undefined","clearInterval","Date","now","setInterval","PAUSED","forceUpdate","placeholder","style","display","flexDirection","InputGroup","size","FormControl","onKeyDown","value","onChange","ref","inputText","target","lastChar","length","Component","mainFontStyle","fontSize","textAlign","minHeight","altFontStyle","padding","QuestionView","question","fontFamily","questionFont","max","mode","ScoreView","errorString","relError","abs","log10","toFixed","errorStyle","window","innerWidth","float","Container","Row","Col","xs","sm","format","superscripts","num","min","exponent","mantissa","temp","toString","exponentStr","parseInt","tmp","decimal","substring","GameInfoView","headerFont","marginTop","progressString","startButton","Button","variant","bodyFont","onClick","replayButton","borderColor","buttonStyle","marginRight","ButtonRow","pauseEvent","resetEvent","paused","runningButtons","prev","CenterView","prevTimestamp","handleInput","keyCapture","document","body","addEventListener","removeEventListener","input","next","callback","score","nextState","inputEvent","timeStamp","code","decodeInput","modes","levels","name","times","operandRange","GamemodeSidebar","outer","level","changeOuter","changeTimeLimit","changeLevel","updateParent","console","log","visible","sidebarStyle","position","zIndex","top","right","overflowX","backgroundColor","primary","borderLeft","getElementById","clientHeight","headingStyle","margin","chosenOuter","outerButtons","map","isSelected","timeButtons","timerText","levelButtons","ButtonGroup","vertical","newCategory","outerObj","newTime","newLevel","newLimit","numQ","l","updateHandler","HeaderView","headerStyle","iconStyle","className","sidebarHandler","secondary","appStyle","App","centerRef","innerHeight","rightBar","leftBar","ev","currentTarget","updateGamemode","lg","md","side","parentUpdate","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5e2ff734.chunk.js","sourcesContent":["\r\n\r\nclass Question {\r\n    \r\n    expression: String\r\n    answer: number\r\n    timelimit: number\r\n    id: number\r\n    \r\n    // Return a number between 0 and 1\r\n    scorer: (arg0: number) => number\r\n\r\n\r\n    constructor(expression: String, answer: number, scorer = defaultScorer, timelimit: number = 0) {\r\n        this.expression = expression\r\n        this.answer = answer\r\n        this.id = Math.random();\r\n        this.scorer = (guess: number) => scorer(guess, this.answer)\r\n        this.timelimit = timelimit\r\n    }\r\n\r\n}\r\n\r\nfunction defaultScorer(guess: number, actual: number) : number {\r\n    if (guess < actual) {\r\n        return guess / actual;\r\n    }\r\n    return actual / guess;\r\n}\r\n\r\nexport default Question","import Question from \"./Question\";\r\n\r\ntype Range = {\r\n    low: number,\r\n    high: number\r\n}\r\n\r\n\r\n\r\nfunction rngInt(low: number, high: number) : number {\r\n    return low + Math.floor(Math.random() * (high - low + 0.99999));\r\n}\r\n\r\n\r\nfunction rng(low: number, high: number) : number {\r\n    return low + Math.random() * (high - low);\r\n}\r\n\r\nfunction logRng(mid: number, variance: number) : number {\r\n    return mid * Math.pow(2 , rng(-variance, variance));\r\n}\r\n\r\n\r\nexport function genMul(config : {\r\n    numOperands : Range,\r\n    rangeCenter: number,\r\n    rangeVariance: number\r\n    operandVariance: number,\r\n    timeLimit: number\r\n\r\n}) : Question {\r\n    let {numOperands, rangeCenter, rangeVariance, operandVariance, timeLimit} = config;\r\n    let numOp = rngInt(numOperands.low, numOperands.high);\r\n    let result = logRng(rangeCenter, rangeVariance);\r\n    let avgOp: number\r\n    let operands: number[] = [];\r\n    for (let i = 0; i < numOp; i++) {\r\n        avgOp = Math.pow(result , 1 / (numOp - i));\r\n        let nextOperand = logRng(avgOp , operandVariance);\r\n        operands.push(Math.round(nextOperand));\r\n        result /= nextOperand;\r\n    }\r\n    operands.sort((a,b) => a-b);\r\n    \r\n\r\n    // Calculate actual result\r\n    result = operands.reduce((acc, cur) => acc * cur);\r\n    // scorer\r\n    let scorer = (guess: number, actual: number) : number => {\r\n        let fraction = guess < actual ? (guess / actual) : (actual / guess)\r\n        return Math.round(fraction * 100)\r\n    }\r\n\r\n    let questionString = '';\r\n    operands.forEach(element => {\r\n        questionString += `${element} × `;\r\n    });\r\n    questionString = questionString.slice(0, -3);\r\n    return new Question(questionString, result, scorer, timeLimit);\r\n}\r\n\r\nexport function genPerc(\r\n    config : {\r\n        numOperands : Range,\r\n        operandRange: Range,\r\n        timeLimit: number,\r\n        round: number\r\n    }\r\n) {\r\n\r\n    let {numOperands, operandRange, timeLimit, round} = config;\r\n    let numOp = rngInt(numOperands.low, numOperands.high);\r\n\r\n    let operands = []\r\n    let result = 1;\r\n    for (let i = 0; i < numOp; i++) {\r\n        \r\n        operands.push(rngInt(operandRange.low, operandRange.high));\r\n        \r\n        operands[i] -= operands[i] % round; \r\n        result *= operands[i] / 100;\r\n    }\r\n\r\n    let questionString = '';\r\n    operands.forEach(element => {\r\n        questionString += `${(element)}% × `;\r\n    });\r\n    questionString = questionString.slice(0, -3);\r\n\r\n    let scorer = (guess: number, actual: number) : number => {\r\n        let fraction = guess < actual ? (guess / actual) : (actual / guess)\r\n        return Math.round(fraction * 100)\r\n    }\r\n\r\n\r\n    return new Question(questionString, result, scorer, timeLimit);\r\n\r\n\r\n    \r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import { genMul } from \"./QGenerators\";\r\nimport Question from \"./Question\";\r\n\r\ntype generatorType = (arg0: any) => Question;\r\nexport enum ProgressState {\r\n    PREGAME,\r\n    INTRO,\r\n    RUNNING,\r\n    PAUSED,\r\n    OUTRO,\r\n    POSTGAME\r\n}\r\n\r\nlet defaultConfig = {\r\n\tnumOperands : {low: 2, high: 2},\r\n    rangeCenter: 20000,\r\n    rangeVariance: 2,\r\n    operandVariance: 2,\r\n    timeLimit: 0\r\n}\r\n\r\nclass GameState {\r\n    generator: generatorType = genMul\r\n    questionArray: Question[] = []\r\n    currentQuestion?: Question;\r\n    category: string = \"Multiplication (Easy)\"\r\n    numQuestions: number = 5\r\n    currentIndex: number = 0\r\n    recentScore: number = 0\r\n    totalScore: number = 0\r\n    recentGuess: number = 0\r\n    recentAnswer: number = 0\r\n    progressState: ProgressState = ProgressState.PREGAME\r\n    generatorconfig: any = defaultConfig\r\n    totalTime = 0\r\n    // constructor(category: string, generator: generatorType, numQuestions: number, config: any) {\r\n    //     this.category = category\r\n    //     this.generator = generator\r\n    //     this.numQuestions = numQuestions\r\n    //     this.generatorconfig = config\r\n    // }\r\n}\r\n\r\nexport default GameState;","\r\nimport GameState , {ProgressState} from \"./GameState\";\r\n\r\n\r\nexport enum InputType {\r\n    BUTTON,\r\n    ANSWER,\r\n    ANIM\r\n}\r\nexport type Input = {\r\n    type: InputType,\r\n    payload: any\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function nextState(state: GameState, input: Input, callback: (input: Input) => void): GameState {\r\n\r\n    let next = state;\r\n    if (state.progressState === ProgressState.PREGAME) {\r\n        \r\n        if (input.type === InputType.BUTTON) {\r\n            if (input.payload === \"start\") {\r\n                next = initialState(state)\r\n\r\n                next.progressState = ProgressState.RUNNING\r\n            }\r\n        }\r\n    } else if (state.progressState === ProgressState.RUNNING) {\r\n        if (input.type === InputType.BUTTON) {\r\n            if (input.payload === \"reset\") {\r\n                next = initialState(state)\r\n                next.progressState = ProgressState.RUNNING\r\n            } else if (input.payload === 'playpause') {\r\n                next.progressState = ProgressState.PAUSED\r\n            }\r\n        } else if (input.type === InputType.ANSWER) {\r\n            let score = state.currentQuestion?.scorer(input.payload)\r\n            next.totalScore += score || 0;\r\n            next.recentGuess = input.payload\r\n            next.recentAnswer = state.currentQuestion?.answer || -1;\r\n            next.recentScore = score || 0;\r\n\r\n            next.currentIndex ++;\r\n            if (next.currentIndex < next.numQuestions) {\r\n                next.currentQuestion = next.questionArray[next.currentIndex];\r\n                next.totalTime = next.currentQuestion.timelimit\r\n            } else {\r\n                next.progressState = ProgressState.POSTGAME;\r\n            }\r\n        } \r\n    } else if (state.progressState === ProgressState.PAUSED) {\r\n        if (input.type === InputType.BUTTON && input.payload === 'playpause') {\r\n            next.progressState = ProgressState.RUNNING\r\n        } else if (input.payload === \"reset\") {\r\n            next = initialState(state)\r\n            next.progressState = ProgressState.RUNNING\r\n        }\r\n    } else if (state.progressState === ProgressState.POSTGAME) {\r\n        if (input.type === InputType.BUTTON && input.payload === 'replay') {\r\n            next = initialState(state)\r\n            next.progressState = ProgressState.RUNNING   \r\n        }\r\n    }\r\n\r\n    return next;\r\n}\r\n\r\nfunction initialState(state: GameState): GameState {\r\n    state.currentIndex = 0;\r\n    state.recentAnswer = state.recentGuess = state.recentScore = state.totalScore = 0;\r\n    state.questionArray = []\r\n    for (let i = 0; i < state.numQuestions; i++) {\r\n        state.questionArray.push(state.generator(state.generatorconfig));\r\n    }\r\n    state.currentQuestion = state.questionArray[0]\r\n    state.totalTime = state.currentQuestion.timelimit\r\n    return state\r\n}\r\n\r\n","import React, { CSSProperties } from 'react';\r\nimport { InputGroup, FormControl } from 'react-bootstrap';\r\nimport { Theme } from '../App';\r\nimport { Input, InputType } from '../logic/GameController';\r\nimport GameState, { ProgressState } from '../logic/GameState';\r\n\r\ntype propType = { \r\n    inputHandler : (arg0: Input) => void,\r\n    theme: Theme,\r\n    gameState: GameState\r\n}\r\n\r\n\r\n\r\nclass InputView extends React.Component<propType, {text: string}>{\r\n    inputField: React.RefObject<HTMLInputElement>;\r\n    canvasRef: React.RefObject<HTMLCanvasElement>;\r\n    timerInterval?: NodeJS.Timeout;\r\n    questionId: number = 0;\r\n    timeLimit: number = 0;\r\n    startTime: number = 0;\r\n    \r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            text: \"\",\r\n        }\r\n\r\n        this.inputField = React.createRef();\r\n        this.canvasRef = React.createRef();\r\n        this.drawArc = this.drawArc.bind(this);\r\n        this.handleChange = this.handleChange.bind(this)\r\n\r\n    }\r\n\r\n    drawArc(fraction: number) {\r\n        if (this.canvasRef.current === null) {\r\n            return\r\n        }\r\n\r\n        const canvas: any = this.canvasRef.current;\r\n        const context: any = this.canvasRef.current.getContext('2d');\r\n        context.strokeStyle = fraction < 0.75? 'green':'red'\r\n        \r\n        context.fillStyle = this.props.theme.background;\r\n        context.fillRect(0,0,48,48);\r\n        context.lineWidth = 3\r\n        context.translate(-0.5,-0.5);\r\n        let cx = canvas.width/2;\r\n        let cy = canvas.height/2;\r\n        context.beginPath();\r\n        context.arc(cx,cy, 16, 2* Math.PI * fraction - Math.PI /2, - Math.PI / 2);\r\n        context.stroke();\r\n\r\n        context.translate(0.5,0.5);\r\n\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.inputField.current?.focus();\r\n        \r\n    }\r\n    render() {\r\n        let inputStyle: CSSProperties = {\r\n            background: this.props.theme.background,\r\n            color: this.props.theme.textColor,\r\n        }\r\n    \r\n\r\n        \r\n        let progressState = this.props.gameState.progressState;\r\n        \r\n        let curQuestion = this.props.gameState.currentQuestion;\r\n        if (curQuestion !== undefined && curQuestion.id !== this.questionId) {\r\n\r\n            this.timerInterval && clearInterval(this.timerInterval);\r\n            \r\n            \r\n            this.questionId = curQuestion.id;\r\n            this.timeLimit = curQuestion.timelimit;\r\n            this.startTime = Date.now();\r\n            if (this.timeLimit !== 0) {\r\n                \r\n                this.timerInterval = setInterval(() => {\r\n                    if (this.props.gameState.progressState === ProgressState.PAUSED) {\r\n                        this.startTime += 16.67; // instead of stopping the interval\r\n                    }\r\n                    let elapsed =  Date.now() - this.startTime ;\r\n                    let fraction = elapsed / this.timeLimit \r\n                    \r\n                    if (fraction < 1) {\r\n                        this.drawArc(fraction);\r\n                    } else {\r\n                        this.timerInterval && clearInterval(this.timerInterval);\r\n                        this.props.inputHandler({type: InputType.ANSWER, payload: 1})\r\n                    }\r\n\r\n                }, 16.67);\r\n            }\r\n            this.forceUpdate();\r\n\r\n        }\r\n        let totalTime = curQuestion?.timelimit || 0;\r\n        let {gameState} = this.props;\r\n\r\n        let placeholder = '';\r\n        if (progressState === ProgressState.RUNNING) {\r\n            placeholder = 'Enter Answer'\r\n        } else if (progressState === ProgressState.PAUSED) {\r\n            placeholder = 'Game Paused'\r\n        }\r\n\r\n        return (\r\n            <div style={{display: 'flex', flexDirection: 'row'}}>\r\n                <InputGroup size=\"lg\" style = {inputStyle}>\r\n                    <FormControl onKeyDown = {this.handleKeyDown}\r\n                        style = {inputStyle}\r\n                        value = {this.state.text}\r\n                        onChange = {this.handleChange}\r\n                        placeholder={placeholder }\r\n                        ref = {this.inputField}\r\n                    />\r\n                </InputGroup>   \r\n                {totalTime !== 0 && gameState.progressState === ProgressState.RUNNING \r\n                && <canvas ref = {this.canvasRef} width = {48} height = {48}/>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    handleChange(e: any) {\r\n        if (this.props.gameState.progressState !== ProgressState.RUNNING) {\r\n            return\r\n        }\r\n        let inputText: string = e.target.value;\r\n        let lastChar = inputText.slice(-1);\r\n        if (inputText.length === 0 || (lastChar >= '0' && lastChar <= '9') || lastChar === 'e' || lastChar === '-' || lastChar === '+' || lastChar === '.') {\r\n            this.setState({text: inputText});\r\n        } \r\n    }\r\n\r\n    handleKeyDown = (e: React.KeyboardEvent) => {\r\n        if (e.key === 'Enter' && this.props.gameState.progressState === ProgressState.RUNNING) {\r\n            let parsed : number;\r\n            try {\r\n                parsed = parseFloat(this.state.text);\r\n            } catch (error) {\r\n                return\r\n            }\r\n            if (isNaN(parsed)) {\r\n                return\r\n            }\r\n           this.props.inputHandler({type: InputType.ANSWER, payload: parsed})\r\n           this.setState({text: ''})\r\n\r\n           if (this.props.gameState.currentIndex === this.props.gameState.numQuestions - 1) {\r\n           }\r\n        } else if (e.key === 'Enter' && this.props.gameState.progressState === ProgressState.POSTGAME) {\r\n            this.props.inputHandler({type: InputType.BUTTON, payload: 'replay'})\r\n        }\r\n    }\r\n}\r\n\r\nexport default InputView","import React from 'react';\r\nimport { Theme } from '../App';\r\nimport GameState, { ProgressState } from '../logic/GameState';\r\nimport Question from '../logic/Question';\r\n// @ts-ignore\r\nimport { Textfit } from 'react-textfit';\r\n\r\ntype propType = {\r\n    question: Question | undefined,\r\n    theme: Theme\r\n    gameState: GameState\r\n}\r\n\r\nlet mainFontStyle = {\r\n    fontSize: 45,\r\n    textAlign: \"center\" as const,\r\n    minHeight: 100\r\n}\r\n\r\nlet altFontStyle = {\r\n    fontSize: 30,\r\n    textAlign: \"center\" as const,\r\n    minHeight: 100,\r\n    padding: 15\r\n}\r\n\r\n\r\n\r\nclass QuestionView extends React.Component<propType, any>{\r\n    \r\n\r\n\r\n    render() {\r\n\r\n        let progressState = this.props.gameState.progressState;\r\n\r\n        let text = this.props.question?.expression || '---';\r\n\r\n        \r\n\r\n\r\n        if (progressState === ProgressState.PAUSED) {\r\n            return (\r\n                <div style = {{...mainFontStyle, fontFamily: this.props.theme.questionFont}}>\r\n                    ---Paused---\r\n                </div>\r\n            )\r\n        } else if (progressState === ProgressState.POSTGAME) {\r\n            return (\r\n                <div style = {{...altFontStyle, fontFamily: this.props.theme.questionFont}}>\r\n                   {`Final Score: ${this.props.gameState.totalScore}`}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <Textfit max={mainFontStyle.fontSize} mode = {'single'} style = {{...mainFontStyle, fontFamily: this.props.theme.questionFont}}>\r\n                {this.props.question?.expression || \"---\"}\r\n            </Textfit>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuestionView","import React, { CSSProperties } from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\n\r\n \r\ntype propType = {\r\n    recentScore: number,\r\n    totalScore: number,\r\n    recentGuess: number,\r\n    recentAnswer: number\r\n}\r\n\r\nclass ScoreView extends React.Component<propType, {}> {\r\n\r\n    render() {\r\n\r\n        let {recentGuess , recentAnswer} = this.props\r\n\r\n        let errorString = '';\r\n        let relError = Math.abs(Math.log10(recentAnswer) - Math.log10(recentGuess))\r\n        relError = Math.pow(10, relError);\r\n        \r\n        if (isNaN(relError)) {\r\n            relError = 1\r\n        } \r\n        \r\n\r\n        \r\n        if (relError < 1.5) {\r\n            relError = 100 * (relError - 1);\r\n            errorString = `Error: ${relError.toFixed(2)} %`\r\n        } else {\r\n            relError = Math.log10(relError)\r\n            errorString = `Error (log₁₀): ${relError.toFixed(2)}`\r\n        }\r\n\r\n        let isTinyScreen = window.innerWidth < 576\r\n        let errorStyle: CSSProperties = isTinyScreen ? {} : {float: \"right\"}\r\n        \r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <Row>\r\n                        <Col xs = {12} sm = {4}>\r\n                            <span >{`Score: ${this.props.totalScore} `}</span>\r\n                            <span>{`(+${this.props.recentScore})`}</span>\r\n                        </Col>\r\n                        <Col xs = {12} sm = {8}>\r\n                            <div style = {errorStyle}>\r\n                                <div>{`Guess: ${format(recentGuess)}, Answer: ${format(recentAnswer)}`}</div>\r\n                                <div>{errorString}</div>\r\n                            </div>\r\n                        </Col>\r\n\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet superscripts = \"⁰¹²³⁴⁵⁶⁷⁸⁹⁻\"\r\n\r\n\r\nfunction format(num: number, max:number  = 1e6, min:number = 1e-3): string {\r\n    if (num !== 0 && (num < min || num > max)) {\r\n        let exponent = Math.floor(Math.log10(num))\r\n        let mantissa = num / Math.pow(10, exponent);\r\n        let temp = exponent.toString();\r\n        let exponentStr = ''\r\n        for (let i = 0; i < temp.length; i++) {\r\n            if (temp[i] === '-') {\r\n                exponentStr += superscripts[10]\r\n            } else {\r\n                exponentStr += superscripts[parseInt(temp[i])]\r\n            }\r\n        }\r\n\r\n        return `${mantissa.toFixed(3)}×10${exponentStr}`\r\n        \r\n    }\r\n    let tmp =  num.toString();\r\n\r\n    // Remove floating imprecision\r\n\r\n    let i = tmp.length - 1;\r\n    let decimal = 0;\r\n    while (i >= 0 && tmp[i] != '.') {\r\n        i--;\r\n        decimal++;\r\n    }\r\n    if (i >= 0 && decimal > 6) {\r\n        tmp = num.toFixed(6)\r\n    }\r\n    if (tmp.length > 8) {\r\n        tmp = tmp.substring(0,8);\r\n    }\r\n    return tmp\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default ScoreView;","import React, { CSSProperties } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { Theme } from '../App';\r\nimport { Input, InputType } from '../logic/GameController';\r\nimport GameState, { ProgressState } from '../logic/GameState';\r\n\r\ntype propType = { \r\n    theme: Theme,\r\n    gameState: GameState,\r\n    inputHandler: (arg0: Input) => void,\r\n    width: number\r\n}\r\n\r\n\r\nclass GameInfoView extends React.Component<propType, any>{\r\n    render() {\r\n        let {theme, gameState, inputHandler} = this.props\r\n        let style: CSSProperties = {\r\n            fontFamily:  theme.headerFont,\r\n            fontSize: \"24px\",\r\n            marginTop: \"12px\",\r\n        }\r\n\r\n        if (this.props.width < 400) style.fontSize = \"20px\"\r\n\r\n        let progressString = `(${gameState.currentIndex + 1}/${gameState.numQuestions})`\r\n        let startButton = <Button \r\n            variant = \"success\" \r\n            style = {{float: \"right\", fontFamily : theme.bodyFont}}\r\n            onClick = {() => {inputHandler({type: InputType.BUTTON, payload: 'start'})}\r\n        }>Start↵</Button>\r\n        \r\n        let replayButton = <Button \r\n            variant = \"success\" \r\n            style = {{float: \"right\", fontFamily : theme.bodyFont}}\r\n            onClick = {() => {inputHandler({type: InputType.BUTTON, payload: 'replay'})}\r\n        }>Replay↵</Button>\r\n\r\n\r\n\r\n        return (\r\n            <div style = {style}>\r\n\r\n                <span>{gameState.category}</span>\r\n                \r\n                {gameState.progressState === ProgressState.PREGAME ? \r\n                    startButton :\r\n                gameState.progressState === ProgressState.POSTGAME ?\r\n                    replayButton:\r\n                    <span style = {{float: \"right\"}}>{progressString}</span>\r\n                }\r\n                <hr style = {{borderColor: theme.textColor  }}></hr>\r\n            </div>       \r\n        )\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default GameInfoView","import React, { CSSProperties } from \"react\";\r\nimport { Input, InputType } from \"../logic/GameController\";\r\nimport GameState, { ProgressState } from \"../logic/GameState\";\r\nimport { Button } from 'react-bootstrap'\r\n\r\ntype propType = {\r\n    inputHandler: (arg0: Input) => void\r\n    gameState: GameState\r\n}\r\n\r\nlet buttonStyle: CSSProperties = {\r\n    marginRight: 4\r\n}\r\n\r\nclass ButtonRow extends React.Component<propType, {}> {\r\n\r\n\r\n    constructor(props: propType) {\r\n        super(props);\r\n\r\n        this.pauseEvent = this.pauseEvent.bind(this);\r\n        this.resetEvent = this.resetEvent.bind(this);\r\n    }\r\n\r\n    render() {\r\n\r\n        let progressState = this.props.gameState.progressState\r\n        let paused = progressState === ProgressState.PAUSED\r\n\r\n        let runningButtons = \r\n        [\r\n            <Button variant=\"primary\" style={buttonStyle} key ={1} onClick={this.pauseEvent}><u>P</u>{paused? \"lay\" : \"ause\"}</Button>,\r\n            <Button variant=\"warning\" style={buttonStyle} key={2} onClick={this.resetEvent}><u>R</u>eset</Button>\r\n        ]\r\n        \r\n        let postgameButtons: HTMLElement[] = [] \r\n        // [\r\n        //     <Button variant=\"primary\" style={buttonStyle} onClick={this.replayEvent} key={1}>Replay ↵</Button>\r\n        // ]\r\n\r\n        return (\r\n            <div>\r\n                {progressState === ProgressState.POSTGAME ? postgameButtons:runningButtons }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    pauseEvent() {\r\n        this.props.inputHandler({type: InputType.BUTTON, payload: \"playpause\"})\r\n    }\r\n    \r\n    resetEvent() {\r\n        this.props.inputHandler({type: InputType.BUTTON, payload: \"reset\"})\r\n    }\r\n    \r\n}\r\n\r\nexport default ButtonRow","import { Input, InputType } from \"./GameController\";\r\nimport GameState, { ProgressState } from \"./GameState\";\r\n\r\nlet prev = 0;\r\n\r\nexport function decodeInput(e: KeyboardEvent, gameState: GameState) : Input | undefined {\r\n    if (e.timeStamp - prev < 0.1) {\r\n        return undefined\r\n    }\r\n\r\n    prev = e.timeStamp\r\n\r\n    let input: Input = {\r\n        type: InputType.BUTTON,\r\n        payload: ''\r\n    }\r\n\r\n    if (e.code === 'KeyR') {\r\n        input.payload = 'reset';\r\n        return input\r\n    }\r\n    if (e.code === 'KeyP') {\r\n        input.payload = 'playpause';\r\n        return input\r\n    }\r\n    if (e.code === 'Enter') {\r\n        if (gameState.progressState === ProgressState.PREGAME) {\r\n            input.payload = 'start'\r\n            return input\r\n        }  else if (gameState.progressState === ProgressState.RUNNING) {\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    return undefined\r\n}","import React from 'react';\r\nimport Question from '../logic/Question';\r\nimport InputView from './InputView';\r\nimport QuestionView from './QuestionView';\r\nimport ScoreView from './ScoreView';\r\nimport { Theme } from '../App'\r\nimport GameInfoView from './GameInfoView';\r\nimport ButtonRow from './ButtonRow';\r\nimport { Input } from '../logic/GameController';\r\nimport GameState from '../logic/GameState';\r\nimport {nextState } from '../logic/GameController'\r\nimport { decodeInput } from '../logic/KeyDecoder';\r\n\r\ntype propType = {\r\n    theme: Theme,\r\n    width: number\r\n}\r\n\r\ntype stateType = {\r\n    gameState: GameState\r\n}\r\n\r\n\r\n\r\nclass CenterView extends React.Component<propType, stateType>{\r\n    \r\n    \r\n    prevTimestamp: number = 0;\r\n\r\n    constructor(props: propType) {\r\n        super(props);\r\n\r\n\r\n        this.state = {\r\n            gameState: new GameState()\r\n        }\r\n\r\n        \r\n        this.handleInput = this.handleInput.bind(this);   \r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        this.handleInput = this.handleInput.bind(this);   \r\n        this.keyCapture  = this.keyCapture.bind(this);\r\n        \r\n        document.body.addEventListener('keydown', this.keyCapture)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.body.removeEventListener('keydown', this.keyCapture);\r\n    }\r\n\r\n    render() {\r\n        let gameState = this.state.gameState;\r\n        \r\n        return (\r\n            <div>\r\n                \r\n                <GameInfoView theme = {this.props.theme} gameState={gameState} inputHandler = {this.handleInput} width = {this.props.width}/> \r\n                <QuestionView question = {gameState.currentQuestion} theme ={this.props.theme} gameState={gameState}/>\r\n                <InputView inputHandler = {this.handleInput} theme = {this.props.theme} gameState={gameState}></InputView>\r\n                <ScoreView recentScore = {gameState.recentScore} totalScore = {gameState.totalScore}\r\n                        recentGuess = {gameState.recentGuess} recentAnswer = {gameState.recentAnswer}/>\r\n                <ButtonRow inputHandler = {this.handleInput} gameState={gameState}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    parentUpdate(gameState: GameState) {\r\n        this.setState({gameState})\r\n    }\r\n\r\n    handleInput(input: Input) {\r\n\r\n        let next = nextState(this.state.gameState, input, this.handleInput);\r\n        this.setState({gameState: next})\r\n    }\r\n\r\n    keyCapture(e: KeyboardEvent) {\r\n        \r\n        let inputEvent: Input | undefined = decodeInput(e, this.state.gameState);\r\n        if (inputEvent !== undefined) {\r\n            this.handleInput(inputEvent);\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n}\r\n\r\nexport default CenterView","import { genMul, genPerc } from \"./QGenerators\";\r\n\r\nlet modes: any = [\r\n    {\r\n        category: 'Multiplication',\r\n        numQuestions: 5,\r\n        generator: genMul,\r\n\r\n        levels: [\r\n            {\r\n                name: 'Easy',\r\n                config: {\r\n                    numOperands : {low: 2, high: 2},\r\n                    rangeCenter: 20000,\r\n                    rangeVariance: 2,\r\n                    operandVariance: 2,\r\n                    timeLimit: 0\r\n                }\r\n            },\r\n            {\r\n                name: 'Medium',\r\n                config: {\r\n                    numOperands : {low: 3, high: 3},\r\n                    rangeCenter: 100000,\r\n                    rangeVariance: 2,\r\n                    operandVariance: 2,\r\n                    timeLimit: 0\r\n                }\r\n            },\r\n            {\r\n                name: 'Hard',\r\n                config: {\r\n                    numOperands : {low: 4, high: 4},\r\n                    rangeCenter: 1000000,\r\n                    rangeVariance: 2,\r\n                    operandVariance: 2,\r\n                    timeLimit: 0\r\n                }\r\n            }\r\n        ],\r\n        times: [0, 10000, 30000]\r\n    },\r\n\r\n    {\r\n        category: 'Percentages',\r\n        numQuestions: 5,\r\n        generator: genPerc,\r\n\r\n        levels: [\r\n            {\r\n                name: 'Easy',\r\n                config: {\r\n                    numOperands : {low: 2, high: 3},\r\n                    operandRange: {low: 10, high: 99},\r\n                    timeLimit: 0,\r\n                    round: 5\r\n                }\r\n            },\r\n            {\r\n                name: 'Hard',\r\n                config: {\r\n                    numOperands : {low: 4, high: 4},\r\n                    operandRange: {low: 10, high: 99},\r\n                    timeLimit: 0,\r\n                    round: 1\r\n                }\r\n            }\r\n        ],\r\n        times: [0, 10000, 30000]\r\n    }\r\n]\r\n\r\nexport default modes;","import React, { CSSProperties } from \"react\";\r\nimport { Button, ButtonGroup, ThemeProvider } from \"react-bootstrap\";\r\nimport { Theme } from \"../App\";\r\n\r\nimport modes from \"../logic/GameModes\"\r\n\r\ntype propType = {\r\n    theme: Theme,\r\n    updateHandler: any,\r\n    visible: boolean\r\n}\r\n\r\ntype stateType = {\r\n    outer: string,\r\n    level: string,\r\n    timeLimit: number\r\n}\r\n\r\nclass GamemodeSidebar extends React.Component<propType,stateType> {\r\n\r\n    constructor(props: propType) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            outer: 'Multiplication',\r\n            level: 'Easy',\r\n            timeLimit: 0\r\n        }\r\n\r\n        this.changeOuter = this.changeOuter.bind(this);\r\n        this.changeTimeLimit = this.changeTimeLimit.bind(this);\r\n        this.changeLevel = this.changeLevel.bind(this);\r\n        this.updateParent = this.updateParent.bind(this);\r\n\r\n        console.log('Constructed');\r\n    }\r\n    \r\n\r\n    render() {\r\n\r\n        if (!this.props.visible) {\r\n            return <div></div>\r\n        }\r\n\r\n        let sidebarStyle: CSSProperties = {\r\n            height: '100%',\r\n            width: '300px',\r\n            position: 'fixed',\r\n            zIndex: 10000,\r\n            top: 0,\r\n            right: 0,\r\n            overflowX: 'hidden',\r\n            backgroundColor: this.props.theme.primary,\r\n            \r\n            borderLeft: `3px solid ${this.props.theme.textColor}`,\r\n            // borderTop: `3px solid ${this.props.theme.textColor}`,\r\n        }\r\n        sidebarStyle.marginTop = document.getElementById('header')?.clientHeight\r\n\r\n        let headingStyle: CSSProperties = {\r\n            fontFamily: this.props.theme.headerFont,\r\n            fontSize: '20px',\r\n            margin: '3px'\r\n        }\r\n\r\n        let chosenOuter = modes[0];\r\n\r\n        let outerButtons = modes.map((e: any, i: any) => {\r\n            let isSelected = e.category === this.state.outer\r\n            \r\n            if (isSelected) {\r\n                chosenOuter = e\r\n            }\r\n\r\n            return <Button \r\n                key = {i}\r\n                style = {{margin: '2px'}}\r\n                variant={isSelected ? 'warning' : 'primary'}\r\n                onClick={() => this.changeOuter(e.category)}    \r\n            >{e.category}</Button>\r\n        })\r\n\r\n        let timeButtons = chosenOuter.times.map((e: any ,i: any) => {\r\n            let isSelected = e === this.state.timeLimit\r\n            \r\n            let timerText = e > 0? (e/1000).toFixed(0) + ' s' : 'Unlimited'\r\n\r\n            return <Button \r\n            \r\n                key = {i}\r\n                style = {{margin: '2px'}}\r\n                variant={isSelected ? 'warning' : 'primary'}\r\n                onClick={() => this.changeTimeLimit(e)}    \r\n            >{timerText}</Button>\r\n        })\r\n\r\n        let levelButtons = chosenOuter.levels.map((e: any,i: any) => {\r\n            let isSelected = e.name === this.state.level\r\n            \r\n\r\n            return <Button \r\n                key = {i}\r\n                 style = {{margin: '2px'}}\r\n                variant={isSelected ? 'warning' : 'primary'}\r\n                onClick={() => this.changeLevel(e.name)}    \r\n            >{e.name}</Button>\r\n        })\r\n\r\n\r\n        return (\r\n\r\n            <div style= {sidebarStyle}>\r\n                <div style={{...headingStyle, fontSize: '24px'}}>Gamemode Settings</div>\r\n\r\n                <div style={headingStyle}>Time Limit</div> \r\n                {timeButtons}\r\n\r\n                <div style={headingStyle}>Difficulty</div> \r\n                {levelButtons}\r\n\r\n                <div style={headingStyle}>Category</div> \r\n                <ButtonGroup vertical>\r\n                    {outerButtons}\r\n                </ButtonGroup>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    changeOuter(newCategory: string) {\r\n        if (this.state.outer === newCategory) {\r\n            return\r\n        }\r\n\r\n        let outerObj:any = {};\r\n\r\n        for (let i = 0; i < modes.length; i++) {\r\n            if (modes[i].category === newCategory) {\r\n                outerObj = modes[i];\r\n            }\r\n        }\r\n\r\n        let newTime = outerObj.times[0]\r\n        let newLevel = outerObj.levels[0].name;\r\n\r\n\r\n        this.setState({outer: newCategory, timeLimit: newTime, level: newLevel}, this.updateParent)\r\n    }\r\n\r\n    changeTimeLimit(newLimit: number) {\r\n        if (this.state.timeLimit === newLimit) {\r\n            return\r\n        }\r\n        this.setState({timeLimit: newLimit}, this.updateParent)\r\n    }\r\n\r\n    changeLevel(newLevel: string) {\r\n        if (this.state.level === newLevel) {\r\n            return\r\n        }\r\n        this.setState({level: newLevel}, this.updateParent)\r\n    }\r\n\r\n    //category: string, numQ: number, generator: any, config: any\r\n    updateParent() {\r\n\r\n        let outerObj: any = {};\r\n        for (let i = 0; i < modes.length; i++) {\r\n            if (modes[i].category === this.state.outer) {\r\n                outerObj = modes[i];\r\n            }\r\n        }\r\n\r\n        let category = `${this.state.outer} (${this.state.level})`;\r\n        let numQ = outerObj.numQuestions;\r\n        let generator = outerObj.generator;        \r\n        let config: any = {}\r\n        for (let l of outerObj.levels) {\r\n            if (l.name === this.state.level) {\r\n                config = l.config;\r\n            }\r\n        }\r\n\r\n        config.timeLimit = this.state.timeLimit;\r\n\r\n        this.props.updateHandler(category, numQ, generator, config)\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default GamemodeSidebar","import React, { CSSProperties } from \"react\"\r\nimport { Theme } from \"../App\"\r\n\r\n\r\ntype propType = {\r\n    theme: Theme,\r\n    sidebarHandler: (arg0: string) => void,\r\n    width: number\r\n}\r\n\r\n\r\nclass HeaderView extends React.Component<propType,{}> {\r\n    render() {\r\n        \r\n        let headerStyle: CSSProperties = {\r\n            background: this.props.theme.primary,\r\n            width: \"wrap-content\",\r\n            textAlign: 'center',\r\n            fontFamily: this.props.theme.headerFont,\r\n            fontSize: \"30px\",\r\n            color: this.props.theme.textColor,\r\n        }\r\n\r\n        let iconStyle: CSSProperties = {\r\n            height: '100%',\r\n            margin: '6px',\r\n        }\r\n\r\n        if (this.props.width < 400) headerStyle.fontSize = \"24px\"\r\n        return (\r\n            \r\n            <div style = {headerStyle} id = 'header'>\r\n             \r\n                <span style={{ ...headerStyle, display:'inline-block'}}>\r\n                    The Estimation Game\r\n                </span>\r\n                <i \r\n                    className=\"fas fa-cog\" \r\n                    style={{ ...iconStyle ,float: 'left'}}\r\n                    onClick = {() => this.props.sidebarHandler('left')}\r\n                />\r\n                <i \r\n                    className=\"fas fa-dice\" \r\n                    style={{...iconStyle ,float: 'right'}}\r\n                    onClick = {() => this.props.sidebarHandler('right')}\r\n                \r\n                />\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default HeaderView","import React, { CSSProperties } from 'react';\r\nimport { Container, Row, Col} from 'react-bootstrap';\r\nimport './App.css';\r\nimport { genMul } from './logic/QGenerators';\r\nimport Question from './logic/Question';\r\nimport CenterView from './view/CenterView';\r\nimport GamemodeSidebar from './view/GamemodeSidebar';\r\nimport HeaderView from './view/HeaderView';\r\nimport modes from './logic/GameModes'\r\nimport GameState from './logic/GameState';\r\n\r\nlet generator: (arg0: any) => Question = genMul;\r\ntype stateType = {\r\n\twidth: number,\r\n\theight: number,\r\n\tleftBar: boolean,\r\n\trightBar: boolean,\r\n}\r\n\r\nexport type Theme = {\r\n\tbackground: string,\r\n\tprimary: string,\r\n\tsecondary: string,\r\n\ttextColor: string,\r\n\tquestionFont: string, \r\n\theaderFont: string,\r\n\tbodyFont: string\r\n}\r\n\r\nlet theme: Theme = {\r\n\tbackground: \"#222831\",\r\n\tprimary: \"#30475e\",\r\n\tsecondary: \"#ffc107\",\r\n\ttextColor: \"#eeeeee\",\r\n\tquestionFont: \"Roboto Mono\",\r\n\theaderFont: \"Concert One\",\r\n\tbodyFont: \"Noto Sans\"\r\n}\r\n\r\nlet config = {\r\n\tnumOperands : {low: 2, high: 2},\r\n    rangeCenter: 20000,\r\n    rangeVariance: 2,\r\n\toperandVariance: 2,\r\n\ttimeLimit: 10000\r\n}\r\n\r\nlet appStyle: CSSProperties = {\r\n\tbackground: theme.background,\r\n\tminHeight: \"100vh\",\r\n\tcolor: theme.textColor,\r\n\tfontFamily: theme.bodyFont\r\n}\r\n\r\nclass App extends React.Component<any,stateType> {\r\n\r\n\tcenterRef: React.RefObject<CenterView>\r\n\r\n\tconstructor(props: any) {\r\n\t\tsuper(props)\r\n\t\t\r\n\t\tthis.state = {\r\n\t\t\twidth: window.innerWidth,\r\n\t\t\theight: window.innerHeight,\r\n\t\t\trightBar: false,\r\n\t\t\tleftBar: false\r\n\t\t}\r\n\t\twindow.addEventListener('resize', (ev: any)=> {\r\n\t\t\tthis.setState({\r\n\t\t\t\theight: ev.currentTarget.innerHeight,\r\n\t\t\t\twidth: ev.currentTarget.innerWidth\r\n\t\t\t})\r\n\t\t})\r\n\t\tthis.sidebarHandler = this.sidebarHandler.bind(this)\r\n\t\tthis.centerRef = React.createRef()\r\n\t\tthis.updateGamemode = this.updateGamemode.bind(this)\r\n\t}\r\n\r\n  \trender() {\r\n    \treturn (\r\n\t\t\t<div style = {appStyle}>\r\n\t\t\t\t<HeaderView theme = {theme} sidebarHandler = {this.sidebarHandler} width = {this.state.width} />\r\n\t\t\t\t<Container>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col lg={2} md={1} xs = {0}>\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col lg={8} md={10} xs = {12}>\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\t<CenterView theme = {theme} ref = {this.centerRef} width = {this.state.width}></CenterView>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col lg ={2} md = {1} xs = {0} >\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t</Container>\r\n\r\n\t\t\t\t <GamemodeSidebar theme = {theme} updateHandler = {this.updateGamemode} visible = {this.state.rightBar} />\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n\t\r\n  \t}\r\n  \r\n\tsidebarHandler(side: string) {\r\n\t\tif (side === 'right') {\r\n\t\t\tthis.setState(({rightBar}) => ({\r\n\t\t\t\trightBar: !rightBar,\r\n\t\t\t\tleftBar: false\r\n\t\t\t}))\r\n\t\t} else if (side === 'left') {\r\n\t\t\tthis.setState({\r\n\t\t\t\tleftBar: true,\r\n\t\t\t\trightBar: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tupdateGamemode(category: string, numQ: number, generator: any, config: any) {\r\n\t\tlet gameState = new GameState();\r\n\t\tgameState.category = category;\r\n\t\tgameState.numQuestions = numQ;\r\n\t\tgameState.generator = generator;\r\n\t\tgameState.generatorconfig =config;\r\n\t\tthis.centerRef.current?.parentUpdate(gameState)\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}