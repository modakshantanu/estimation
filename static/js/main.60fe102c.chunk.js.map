{"version":3,"sources":["logic/Question.tsx","logic/QGenerators.tsx","logic/GameState.tsx","logic/GameController.tsx","view/InputView.tsx","view/QuestionView.tsx","view/ScoreView.tsx","view/GameInfoView.tsx","view/ButtonRow.tsx","logic/KeyDecoder.tsx","view/CenterView.tsx","view/HeaderView.tsx","App.tsx","index.tsx"],"names":["defaultScorer","guess","actual","Question","expression","answer","scorer","timelimit","this","logRng","mid","variance","Math","pow","high","low","random","genMul","config","numOperands","rangeCenter","rangeVariance","operandVariance","numOp","floor","result","operands","i","nextOperand","push","round","sort","a","b","reduce","acc","cur","questionString","forEach","element","slice","fraction","ProgressState","InputType","defaultConfig","GameState","generator","questionArray","currentQuestion","category","numQuestions","currentIndex","recentScore","totalScore","recentGuess","recentAnswer","progressState","PREGAME","generatorconfig","initialState","state","InputView","props","inputField","handleKeyDown","e","key","gameState","RUNNING","parsed","parseFloat","text","error","isNaN","inputHandler","type","ANSWER","payload","setState","POSTGAME","BUTTON","handleChange","bind","React","createRef","inputStyle","background","theme","color","textColor","current","focus","placeholder","PAUSED","InputGroup","size","style","FormControl","onKeyDown","value","onChange","ref","inputText","target","lastChar","length","Component","mainFontStyle","fontSize","textAlign","minHeight","altFontStyle","padding","QuestionView","fontFamily","questionFont","question","ScoreView","errorString","relError","abs","log10","toFixed","errorStyle","window","innerWidth","float","Container","Row","Col","xs","sm","format","superscripts","num","max","min","exponent","mantissa","temp","toString","exponentStr","parseInt","GameInfoView","headerFont","marginTop","progressString","startButton","Button","variant","bodyFont","onClick","replayButton","borderColor","buttonStyle","marginRight","ButtonRow","pauseEvent","resetEvent","paused","runningButtons","prev","CenterView","prevTimestamp","handleInput","keyCapture","document","body","addEventListener","removeEventListener","input","curTime","Date","now","next","nextState","score","inputEvent","timeStamp","code","decodeInput","undefined","HeaderView","headerStyle","primary","width","secondary","appStyle","App","height","innerHeight","ev","currentTarget","lg","md","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.60fe102c.chunk.js","sourcesContent":["\r\n\r\nclass Question {\r\n    \r\n    expression: String\r\n    answer: number\r\n    timelimit: number\r\n    \r\n    // Return a number between 0 and 1\r\n    scorer: (arg0: number) => number\r\n\r\n\r\n    constructor(expression: String, answer: number, scorer = defaultScorer, timelimit = -1) {\r\n        this.expression = expression\r\n        this.answer = answer\r\n        this.scorer = (guess: number) => scorer(guess, this.answer)\r\n        this.timelimit = timelimit\r\n    }\r\n\r\n}\r\n\r\nfunction defaultScorer(guess: number, actual: number) : number {\r\n    if (guess < actual) {\r\n        return guess / actual;\r\n    }\r\n    return actual / guess;\r\n}\r\n\r\nexport default Question","import Question from \"./Question\";\r\n\r\ntype Range = {\r\n    low: number,\r\n    high: number\r\n}\r\n\r\n\r\n\r\nfunction rngInt(low: number, high: number) : number {\r\n    return low + Math.floor(Math.random() * (high - low + 0.99999));\r\n}\r\n\r\n\r\nfunction rng(low: number, high: number) : number {\r\n    return low + Math.random() * (high - low);\r\n}\r\n\r\nfunction logRng(mid: number, variance: number) : number {\r\n    return mid * Math.pow(2 , rng(-variance, variance));\r\n}\r\n\r\n\r\nexport function genMul(config : {\r\n    numOperands : Range,\r\n    rangeCenter: number,\r\n    rangeVariance: number\r\n    operandVariance: number, \r\n\r\n}) : Question {\r\n    let {numOperands, rangeCenter, rangeVariance, operandVariance} = config;\r\n\r\n    let numOp = rngInt(numOperands.low, numOperands.high);\r\n    let result = logRng(rangeCenter, rangeVariance);\r\n    let avgOp: number\r\n    let operands: number[] = [];\r\n    for (let i = 0; i < numOp; i++) {\r\n        avgOp = Math.pow(result , 1 / (numOp - i));\r\n        let nextOperand = logRng(avgOp , operandVariance);\r\n        operands.push(Math.round(nextOperand));\r\n        result /= nextOperand;\r\n    }\r\n    operands.sort((a,b) => a-b);\r\n    \r\n\r\n    // Calculate actual result\r\n    result = operands.reduce((acc, cur) => acc * cur);\r\n    // scorer\r\n    let scorer = (guess: number, actual: number) : number => {\r\n        let fraction = guess < actual ? (guess / actual) : (actual / guess)\r\n        return Math.round(fraction * 100)\r\n    }\r\n\r\n    let questionString = '';\r\n    operands.forEach(element => {\r\n        questionString += `${element} × `;\r\n    });\r\n\r\n    questionString = questionString.slice(0, -3);\r\n    return new Question(questionString, result, scorer);\r\n}\r\n\r\n\r\n\r\n\r\n","import { getNodeMajorVersion } from \"typescript\";\r\nimport { genMul } from \"./QGenerators\";\r\nimport Question from \"./Question\";\r\n\r\ntype generatorType = (arg0: any) => Question;\r\nexport enum ProgressState {\r\n    PREGAME,\r\n    INTRO,\r\n    RUNNING,\r\n    PAUSED,\r\n    OUTRO,\r\n    POSTGAME\r\n}\r\n\r\nlet defaultConfig = {\r\n\tnumOperands : {low: 2, high: 2},\r\n    rangeCenter: 20000,\r\n    rangeVariance: 2,\r\n    operandVariance: 2\r\n}\r\n\r\nclass GameState {\r\n    generator: generatorType = genMul\r\n    questionArray: Question[] = []\r\n    currentQuestion?: Question;\r\n    category: string = \"Multiplication (Easy)\"\r\n    numQuestions: number = 5\r\n    currentIndex: number = 0\r\n    recentScore: number = 0\r\n    totalScore: number = 0\r\n    recentGuess: number = 0\r\n    recentAnswer: number = 0\r\n    progressState: ProgressState = ProgressState.PREGAME\r\n    generatorconfig: any = defaultConfig\r\n}\r\n\r\nexport default GameState;","\r\nimport GameState , {ProgressState} from \"./GameState\";\r\n\r\n\r\nexport enum InputType {\r\n    BUTTON,\r\n    ANSWER,\r\n    ANIM\r\n}\r\nexport type Input = {\r\n    type: InputType,\r\n    payload: any\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function nextState(state: GameState, input: Input): GameState {\r\n\r\n    let nextState = state;\r\n    if (state.progressState === ProgressState.PREGAME) {\r\n        \r\n        if (input.type === InputType.BUTTON) {\r\n            if (input.payload === \"start\") {\r\n                nextState = initialState(state)\r\n\r\n                nextState.progressState = ProgressState.RUNNING\r\n            }\r\n        }\r\n    } else if (state.progressState === ProgressState.RUNNING) {\r\n        if (input.type === InputType.BUTTON) {\r\n            if (input.payload === \"reset\") {\r\n                nextState = initialState(state)\r\n                nextState.progressState = ProgressState.RUNNING\r\n            } else if (input.payload === 'playpause') {\r\n                nextState.progressState = ProgressState.PAUSED\r\n            }\r\n        } else if (input.type === InputType.ANSWER) {\r\n            let score = state.currentQuestion?.scorer(input.payload)\r\n            state.totalScore += score || 0;\r\n            state.recentGuess = input.payload\r\n            state.recentAnswer = state.currentQuestion?.answer || -1;\r\n            state.recentScore = score || 0;\r\n\r\n            state.currentIndex ++;\r\n            if (state.currentIndex < state.numQuestions) {\r\n                state.currentQuestion = state.questionArray[state.currentIndex];\r\n            } else {\r\n                state.progressState = ProgressState.POSTGAME;\r\n            }\r\n\r\n        }\r\n    } else if (state.progressState === ProgressState.PAUSED) {\r\n        if (input.type === InputType.BUTTON && input.payload === 'playpause') {\r\n            state.progressState = ProgressState.RUNNING\r\n        }\r\n    } else if (state.progressState === ProgressState.POSTGAME) {\r\n        if (input.type === InputType.BUTTON && input.payload === 'replay') {\r\n            nextState = initialState(state)\r\n            nextState.progressState = ProgressState.RUNNING   \r\n        }\r\n    }\r\n\r\n    return nextState;\r\n}\r\n\r\nfunction initialState(state: GameState): GameState {\r\n    state.currentIndex = 0;\r\n    state.recentAnswer = state.recentGuess = state.recentScore = state.totalScore = 0;\r\n    state.questionArray = []\r\n    for (let i = 0; i < state.numQuestions; i++) {\r\n        state.questionArray.push(state.generator(state.generatorconfig));\r\n    }\r\n    state.currentQuestion = state.questionArray[0]\r\n    return state\r\n}\r\n\r\n","import React, { CSSProperties } from 'react';\r\nimport { InputGroup, FormControl } from 'react-bootstrap';\r\nimport { Theme } from '../App';\r\nimport { Input, InputType } from '../logic/GameController';\r\nimport GameState, { ProgressState } from '../logic/GameState';\r\n\r\ntype propType = { \r\n    inputHandler : (arg0: Input) => void,\r\n    theme: Theme,\r\n    gameState: GameState\r\n}\r\n\r\nclass InputView extends React.Component<propType, any>{\r\n    inputField: React.RefObject<HTMLInputElement>;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            text: \"\"\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n\r\n        this.inputField = React.createRef();\r\n    }\r\n\r\n    render() {\r\n        let inputStyle: CSSProperties = {\r\n            background: this.props.theme.background,\r\n            color: this.props.theme.textColor\r\n        }\r\n\r\n        if (this.props.gameState.progressState === ProgressState.RUNNING) {\r\n            this.inputField.current?.focus();\r\n        }\r\n        \r\n        let progressState = this.props.gameState.progressState;\r\n        \r\n        let placeholder = '';\r\n        if (progressState === ProgressState.RUNNING) {\r\n            placeholder = 'Enter Answer'\r\n        } else if (progressState === ProgressState.PAUSED) {\r\n            placeholder = 'Game Paused'\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <InputGroup size=\"lg\" style = {inputStyle}>\r\n                    <FormControl onKeyDown = {this.handleKeyDown}\r\n                        style = {inputStyle}\r\n                        value = {this.state.text}\r\n                        onChange = {this.handleChange}\r\n                        placeholder={placeholder }\r\n                        ref = {this.inputField}\r\n                    />\r\n                </InputGroup>   \r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleChange(e: any) {\r\n        if (this.props.gameState.progressState !== ProgressState.RUNNING) {\r\n            return\r\n        }\r\n        let inputText: String = e.target.value;\r\n        let lastChar = inputText.slice(-1);\r\n        if (inputText.length === 0 || (lastChar >= '0' && lastChar <= '9') || lastChar === 'e' || lastChar === '-' || lastChar === '+' || lastChar === '.') {\r\n            this.setState({text: inputText});\r\n        } \r\n    }\r\n\r\n    handleKeyDown = (e: React.KeyboardEvent) => {\r\n        if (e.key === 'Enter' && this.props.gameState.progressState === ProgressState.RUNNING) {\r\n            let parsed : number;\r\n            try {\r\n                parsed = parseFloat(this.state.text);\r\n            } catch (error) {\r\n                return\r\n            }\r\n            if (isNaN(parsed)) {\r\n                return\r\n            }\r\n           this.props.inputHandler({type: InputType.ANSWER, payload: parsed})\r\n           this.setState({text: ''})\r\n        } else if (e.key === 'Enter' && this.props.gameState.progressState === ProgressState.POSTGAME) {\r\n            this.props.inputHandler({type: InputType.BUTTON, payload: 'replay'})\r\n        }\r\n    }\r\n}\r\n\r\nexport default InputView","import React from 'react';\r\nimport { ThemeConsumer } from 'react-bootstrap/esm/ThemeProvider';\r\nimport { Theme } from '../App';\r\nimport GameState, { ProgressState } from '../logic/GameState';\r\nimport Question from '../logic/Question';\r\n\r\ntype propType = {\r\n    question: Question | undefined,\r\n    theme: Theme\r\n    gameState: GameState\r\n}\r\n\r\nlet mainFontStyle = {\r\n    fontSize: 45,\r\n    textAlign: \"center\" as const,\r\n    minHeight: 100\r\n}\r\n\r\nlet altFontStyle = {\r\n    fontSize: 30,\r\n    textAlign: \"center\" as const,\r\n    minHeight: 100,\r\n    padding: 15\r\n    \r\n}\r\n\r\n\r\n\r\nclass QuestionView extends React.Component<propType, any>{\r\n    \r\n\r\n\r\n    render() {\r\n\r\n        let progressState = this.props.gameState.progressState;\r\n\r\n        if (progressState === ProgressState.PAUSED) {\r\n            return (\r\n                <div style = {{...mainFontStyle, fontFamily: this.props.theme.questionFont}}>\r\n                    ---Paused---\r\n                </div>\r\n            )\r\n        } else if (progressState === ProgressState.POSTGAME) {\r\n            return (\r\n                <div style = {{...altFontStyle, fontFamily: this.props.theme.questionFont}}>\r\n                   {`Final Score: ${this.props.gameState.totalScore}`}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div style = {{...mainFontStyle, fontFamily: this.props.theme.questionFont}}>\r\n                {this.props.question?.expression || \"---\"}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuestionView","import React, { CSSProperties } from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\n\r\n \r\ntype propType = {\r\n    recentScore: number,\r\n    totalScore: number,\r\n    recentGuess: number,\r\n    recentAnswer: number\r\n}\r\n\r\nclass ScoreView extends React.Component<propType, {}> {\r\n\r\n    render() {\r\n\r\n        let {recentGuess , recentAnswer} = this.props\r\n\r\n        let errorString = '';\r\n        let relError = Math.abs(Math.log10(recentAnswer) - Math.log10(recentGuess))\r\n        relError = Math.pow(10, relError);\r\n        \r\n        if (isNaN(relError)) {\r\n            relError = 1\r\n        } \r\n        \r\n\r\n        \r\n        if (relError < 1.5) {\r\n            relError = 100 * (relError - 1);\r\n            errorString = `Error: ${relError.toFixed(2)} %`\r\n        } else {\r\n            relError = Math.log10(relError)\r\n            errorString = `Error (log₁₀): ${relError.toFixed(2)}`\r\n        }\r\n\r\n        let isTinyScreen = window.innerWidth < 576\r\n        let errorStyle: CSSProperties = isTinyScreen ? {} : {float: \"right\"}\r\n        \r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <Row>\r\n                        <Col xs = {12} sm = {4}>\r\n                            <span >{`Score: ${this.props.totalScore} `}</span>\r\n                            <span>{`(+${this.props.recentScore})`}</span>\r\n                        </Col>\r\n                        <Col xs = {12} sm = {8}>\r\n                            <div style = {errorStyle}>\r\n                                <div>{`Guess: ${format(recentGuess)}, Answer: ${format(recentAnswer)}`}</div>\r\n                                <div>{errorString}</div>\r\n                            </div>\r\n                        </Col>\r\n\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet superscripts = \"⁰¹²³⁴⁵⁶⁷⁸⁹⁻\"\r\n\r\n\r\nfunction format(num: number, max:number  = 1e6, min:number = 1e-3): string {\r\n    if (num !== 0 && (num < min || num > max)) {\r\n        let exponent = Math.floor(Math.log10(num))\r\n        let mantissa = num / Math.pow(10, exponent);\r\n        let temp = exponent.toString();\r\n        let exponentStr = ''\r\n        for (let i = 0; i < temp.length; i++) {\r\n            if (temp[i] === '-') {\r\n                exponentStr += superscripts[10]\r\n            } else {\r\n                exponentStr += superscripts[parseInt(temp[i])]\r\n            }\r\n        }\r\n\r\n        return `${mantissa.toFixed(3)}×10${exponentStr}`\r\n        \r\n    }\r\n    return num.toString()\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default ScoreView;","import React, { CSSProperties } from 'react';\r\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { ThemeConsumer } from 'react-bootstrap/esm/ThemeProvider';\r\nimport { Theme } from '../App';\r\nimport { Input, InputType } from '../logic/GameController';\r\nimport GameState, { ProgressState } from '../logic/GameState';\r\n\r\ntype propType = { \r\n    theme: Theme,\r\n    gameState: GameState,\r\n    inputHandler: (arg0: Input) => void\r\n}\r\n\r\n\r\nclass GameInfoView extends React.Component<propType, any>{\r\n    render() {\r\n        let {theme, gameState, inputHandler} = this.props\r\n        let style: CSSProperties = {\r\n            fontFamily:  theme.headerFont,\r\n            fontSize: \"24px\",\r\n            marginTop: \"12px\",\r\n        }\r\n\r\n        let progressString = `(${gameState.currentIndex + 1}/${gameState.numQuestions})`\r\n        let startButton = <Button \r\n            variant = \"success\" \r\n            style = {{float: \"right\", fontFamily : theme.bodyFont}}\r\n            onClick = {() => {inputHandler({type: InputType.BUTTON, payload: 'start'})}\r\n        }>Start↵</Button>\r\n        \r\n        let replayButton = <Button \r\n            variant = \"success\" \r\n            style = {{float: \"right\", fontFamily : theme.bodyFont}}\r\n            onClick = {() => {inputHandler({type: InputType.BUTTON, payload: 'replay'})}\r\n        }>Replay↵</Button>\r\n\r\n\r\n\r\n        return (\r\n            <div style = {style}>\r\n\r\n                <span>{gameState.category}</span>\r\n                \r\n                {gameState.progressState === ProgressState.PREGAME ? \r\n                    startButton :\r\n                gameState.progressState === ProgressState.POSTGAME ?\r\n                    replayButton:\r\n                    <span style = {{float: \"right\"}}>{progressString}</span>\r\n                }\r\n                <hr style = {{borderColor: theme.textColor  }}></hr>\r\n            </div>       \r\n        )\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default GameInfoView","import React, { CSSProperties } from \"react\";\r\nimport { Input, InputType } from \"../logic/GameController\";\r\nimport GameState, { ProgressState } from \"../logic/GameState\";\r\nimport { Button } from 'react-bootstrap'\r\n\r\ntype propType = {\r\n    inputHandler: (arg0: Input) => void\r\n    gameState: GameState\r\n}\r\n\r\nlet buttonStyle: CSSProperties = {\r\n    marginRight: 4\r\n}\r\n\r\nclass ButtonRow extends React.Component<propType, {}> {\r\n\r\n\r\n    constructor(props: propType) {\r\n        super(props);\r\n\r\n        this.pauseEvent = this.pauseEvent.bind(this);\r\n        this.resetEvent = this.resetEvent.bind(this);\r\n    }\r\n\r\n    render() {\r\n\r\n        let progressState = this.props.gameState.progressState\r\n        let paused = progressState === ProgressState.PAUSED\r\n\r\n        let runningButtons = \r\n        [\r\n            <Button variant=\"primary\" style={buttonStyle} key ={1} onClick={this.pauseEvent}><u>P</u>{paused? \"lay\" : \"ause\"}</Button>,\r\n            <Button variant=\"warning\" style={buttonStyle} key={2} onClick={this.resetEvent}><u>R</u>eset</Button>\r\n        ]\r\n        \r\n        let postgameButtons: HTMLElement[] = [] \r\n        // [\r\n        //     <Button variant=\"primary\" style={buttonStyle} onClick={this.replayEvent} key={1}>Replay ↵</Button>\r\n        // ]\r\n\r\n        return (\r\n            <div>\r\n                {progressState === ProgressState.POSTGAME ? postgameButtons:runningButtons }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    pauseEvent() {\r\n        this.props.inputHandler({type: InputType.BUTTON, payload: \"playpause\"})\r\n    }\r\n    \r\n    resetEvent() {\r\n        this.props.inputHandler({type: InputType.BUTTON, payload: \"reset\"})\r\n    }\r\n    \r\n}\r\n\r\nexport default ButtonRow","import { Input, InputType } from \"./GameController\";\r\nimport GameState, { ProgressState } from \"./GameState\";\r\n\r\nlet prev = 0;\r\n\r\nexport function decodeInput(e: KeyboardEvent, gameState: GameState) : Input | undefined {\r\n    if (e.timeStamp - prev < 0.1) {\r\n        return undefined\r\n    }\r\n\r\n    prev = e.timeStamp\r\n\r\n    let input: Input = {\r\n        type: InputType.BUTTON,\r\n        payload: ''\r\n    }\r\n\r\n    if (e.code === 'KeyR') {\r\n        input.payload = 'reset';\r\n        return input\r\n    }\r\n    if (e.code === 'KeyP') {\r\n        input.payload = 'playpause';\r\n        return input\r\n    }\r\n    if (e.code === 'Enter') {\r\n        if (gameState.progressState === ProgressState.PREGAME) {\r\n            input.payload = 'start'\r\n            return input\r\n        }  else if (gameState.progressState === ProgressState.RUNNING) {\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    return undefined\r\n}","import React from 'react';\r\nimport { InputGroup } from 'react-bootstrap';\r\nimport Question from '../logic/Question';\r\nimport InputView from './InputView';\r\nimport QuestionView from './QuestionView';\r\nimport ScoreView from './ScoreView';\r\nimport { Theme } from '../App'\r\nimport GameInfoView from './GameInfoView';\r\nimport ButtonRow from './ButtonRow';\r\nimport { Input } from '../logic/GameController';\r\nimport GameState from '../logic/GameState';\r\nimport {nextState } from '../logic/GameController'\r\nimport { decodeInput } from '../logic/KeyDecoder';\r\n\r\ntype propType = {\r\n    generator: (arg: object) => Question,\r\n    config: object,\r\n    theme: Theme\r\n}\r\n\r\ntype stateType = {\r\n    gameState: GameState\r\n}\r\n\r\n\r\n\r\nclass CenterView extends React.Component<propType, stateType>{\r\n    \r\n    \r\n    prevTimestamp: number = 0;\r\n\r\n    constructor(props: propType) {\r\n        super(props);\r\n\r\n\r\n        this.state = {\r\n            gameState: new GameState()\r\n        }\r\n\r\n        \r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        this.handleInput = this.handleInput.bind(this);   \r\n        this.keyCapture  = this.keyCapture.bind(this);\r\n        \r\n        document.body.addEventListener('keydown', this.keyCapture)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.body.removeEventListener('keydown', this.keyCapture);\r\n    }\r\n\r\n    render() {\r\n        let gameState = this.state.gameState;\r\n        return (\r\n            <div>\r\n                \r\n                <GameInfoView theme = {this.props.theme} gameState={gameState} inputHandler = {this.handleInput}/> \r\n                <QuestionView question = {gameState.currentQuestion} theme ={this.props.theme} gameState={gameState}/>\r\n                <InputView inputHandler = {this.handleInput} theme = {this.props.theme} gameState={gameState}></InputView>\r\n                <ScoreView recentScore = {gameState.recentScore} totalScore = {gameState.totalScore}\r\n                        recentGuess = {gameState.recentGuess} recentAnswer = {gameState.recentAnswer}/>\r\n                <ButtonRow inputHandler = {this.handleInput} gameState={gameState}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleInput(input: Input) {\r\n\r\n        let curTime = Date.now()\r\n        if (curTime - this.prevTimestamp <= 1) {\r\n            return\r\n        }\r\n        this.prevTimestamp = curTime\r\n\r\n        let next = nextState(this.state.gameState, input);\r\n        this.setState({gameState: next})\r\n    }\r\n\r\n    keyCapture(e: KeyboardEvent) {\r\n        \r\n        let inputEvent: Input | undefined = decodeInput(e, this.state.gameState);\r\n        if (inputEvent !== undefined) {\r\n            this.handleInput(inputEvent);\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n}\r\n\r\nexport default CenterView","import React, { CSSProperties } from \"react\"\r\nimport { Theme } from \"../App\"\r\nimport colors from './constants'\r\n\r\ntype propType = {\r\n    theme: Theme\r\n}\r\n\r\n\r\nclass HeaderView extends React.Component<propType,{}> {\r\n    render() {\r\n        \r\n        let headerStyle: CSSProperties = {\r\n            background: this.props.theme.primary,\r\n            width: \"100%\",\r\n            textAlign: \"center\",\r\n            fontFamily: this.props.theme.headerFont,\r\n            fontSize: \"30px\",\r\n            color: this.props.theme.textColor\r\n        }\r\n        return (\r\n            <div style = {headerStyle}>\r\n                The Estimation Game\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HeaderView","import React, { CSSProperties } from 'react';\r\nimport { Container, Row, Col} from 'react-bootstrap';\r\nimport './App.css';\r\nimport { genMul } from './logic/QGenerators';\r\nimport Question from './logic/Question';\r\nimport CenterView from './view/CenterView';\r\nimport HeaderView from './view/HeaderView';\r\nimport colors from './view/constants'\r\n\r\nlet generator: (arg0: any) => Question = genMul;\r\ntype stateType = {\r\n\twidth: number,\r\n\theight: number\r\n}\r\n\r\nexport type Theme = {\r\n\tbackground: string,\r\n\tprimary: string,\r\n\tsecondary: string,\r\n\ttextColor: string,\r\n\tquestionFont: string, \r\n\theaderFont: string,\r\n\tbodyFont: string\r\n}\r\n\r\nlet theme: Theme = {\r\n\tbackground: \"#222831\",\r\n\tprimary: \"#30475e\",\r\n\tsecondary: \"#ffa41b\",\r\n\ttextColor: \"#eeeeee\",\r\n\tquestionFont: \"Roboto Mono\",\r\n\theaderFont: \"Concert One\",\r\n\tbodyFont: \"Noto Sans\"\r\n}\r\n\r\nlet config = {\r\n\tnumOperands : {low: 2, high: 2},\r\n    rangeCenter: 20000,\r\n    rangeVariance: 2,\r\n    operandVariance: 2\r\n}\r\n\r\nlet appStyle: CSSProperties = {\r\n\tbackground: theme.background,\r\n\tminHeight: \"100vh\",\r\n\tcolor: theme.textColor,\r\n\tfontFamily: theme.bodyFont\r\n\r\n}\r\n\r\nclass App extends React.Component<any,stateType> {\r\n\r\n\t\r\n\r\n\tconstructor(props: any) {\r\n\t\tsuper(props)\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\twidth: window.innerWidth,\r\n\t\t\theight: window.innerHeight\r\n\t\t})\r\n\t\twindow.addEventListener('resize', (ev: any)=> {\r\n\t\t\tthis.setState({\r\n\t\t\t\theight: ev.currentTarget.innerHeight,\r\n\t\t\t\twidth: ev.currentTarget.innerWidth\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n  \trender() {\r\n    \treturn (\r\n\t\t\t<div style = {appStyle}>\r\n\t\t\t\t<HeaderView theme = {theme}/>\r\n\t\t\t\t<Container>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col lg={2} md={1} xs = {0}>\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col lg={8} md={10} xs = {12}>\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\t<CenterView config = {config} generator = {generator} theme = {theme}></CenterView>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col lg ={2} md = {1} xs = {0} >\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t</Container>\r\n\t\t\t</div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}