{"version":3,"sources":["logic/Question.tsx","logic/QGenerators.tsx","logic/GameState.tsx","logic/GameController.tsx","view/InputView.tsx","view/QuestionView.tsx","view/ScoreView.tsx","view/GameInfoView.tsx","view/ButtonRow.tsx","logic/KeyDecoder.tsx","view/CenterView.tsx","view/HeaderView.tsx","App.tsx","index.tsx"],"names":["defaultScorer","guess","actual","Question","expression","answer","scorer","timelimit","id","this","Math","random","logRng","mid","variance","pow","high","low","genMul","config","numOperands","rangeCenter","rangeVariance","operandVariance","numOp","floor","result","operands","i","nextOperand","push","round","sort","a","b","reduce","acc","cur","questionString","forEach","element","slice","fraction","ProgressState","InputType","defaultConfig","GameState","generator","questionArray","currentQuestion","category","numQuestions","currentIndex","recentScore","totalScore","recentGuess","recentAnswer","progressState","PREGAME","generatorconfig","totalTime","timeRemaining","initialState","state","InputView","props","inputField","canvasRef","timerInterval","questionId","timeLimit","startTime","handleKeyDown","e","key","gameState","RUNNING","parsed","parseFloat","text","error","isNaN","inputHandler","type","ANSWER","payload","setState","POSTGAME","BUTTON","React","createRef","drawArc","bind","handleChange","current","canvas","context","getContext","strokeStyle","fillStyle","theme","background","fillRect","lineWidth","translate","cx","width","cy","height","beginPath","arc","PI","stroke","focus","inputStyle","color","textColor","curQuestion","undefined","clearInterval","Date","now","setInterval","PAUSED","forceUpdate","placeholder","style","display","flexDirection","InputGroup","size","FormControl","onKeyDown","value","onChange","ref","inputText","target","lastChar","length","Component","mainFontStyle","fontSize","textAlign","minHeight","altFontStyle","padding","QuestionView","fontFamily","questionFont","question","ScoreView","errorString","relError","abs","log10","toFixed","errorStyle","window","innerWidth","float","Container","Row","Col","xs","sm","format","superscripts","num","max","min","exponent","mantissa","temp","toString","exponentStr","parseInt","GameInfoView","headerFont","marginTop","progressString","startButton","Button","variant","bodyFont","onClick","replayButton","borderColor","buttonStyle","marginRight","ButtonRow","pauseEvent","resetEvent","paused","runningButtons","prev","CenterView","prevTimestamp","handleInput","keyCapture","document","body","addEventListener","removeEventListener","input","next","callback","score","nextState","inputEvent","timeStamp","code","decodeInput","HeaderView","headerStyle","primary","secondary","appStyle","App","innerHeight","ev","currentTarget","lg","md","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6d134d43.chunk.js","sourcesContent":["\r\n\r\nclass Question {\r\n    \r\n    expression: String\r\n    answer: number\r\n    timelimit: number\r\n    id: number\r\n    \r\n    // Return a number between 0 and 1\r\n    scorer: (arg0: number) => number\r\n\r\n\r\n    constructor(expression: String, answer: number, scorer = defaultScorer, timelimit = 5000) {\r\n        this.expression = expression\r\n        this.answer = answer\r\n        this.id = Math.random();\r\n        this.scorer = (guess: number) => scorer(guess, this.answer)\r\n        this.timelimit = timelimit\r\n    }\r\n\r\n}\r\n\r\nfunction defaultScorer(guess: number, actual: number) : number {\r\n    if (guess < actual) {\r\n        return guess / actual;\r\n    }\r\n    return actual / guess;\r\n}\r\n\r\nexport default Question","import Question from \"./Question\";\r\n\r\ntype Range = {\r\n    low: number,\r\n    high: number\r\n}\r\n\r\n\r\n\r\nfunction rngInt(low: number, high: number) : number {\r\n    return low + Math.floor(Math.random() * (high - low + 0.99999));\r\n}\r\n\r\n\r\nfunction rng(low: number, high: number) : number {\r\n    return low + Math.random() * (high - low);\r\n}\r\n\r\nfunction logRng(mid: number, variance: number) : number {\r\n    return mid * Math.pow(2 , rng(-variance, variance));\r\n}\r\n\r\n\r\nexport function genMul(config : {\r\n    numOperands : Range,\r\n    rangeCenter: number,\r\n    rangeVariance: number\r\n    operandVariance: number, \r\n\r\n}) : Question {\r\n    let {numOperands, rangeCenter, rangeVariance, operandVariance} = config;\r\n\r\n    let numOp = rngInt(numOperands.low, numOperands.high);\r\n    let result = logRng(rangeCenter, rangeVariance);\r\n    let avgOp: number\r\n    let operands: number[] = [];\r\n    for (let i = 0; i < numOp; i++) {\r\n        avgOp = Math.pow(result , 1 / (numOp - i));\r\n        let nextOperand = logRng(avgOp , operandVariance);\r\n        operands.push(Math.round(nextOperand));\r\n        result /= nextOperand;\r\n    }\r\n    operands.sort((a,b) => a-b);\r\n    \r\n\r\n    // Calculate actual result\r\n    result = operands.reduce((acc, cur) => acc * cur);\r\n    // scorer\r\n    let scorer = (guess: number, actual: number) : number => {\r\n        let fraction = guess < actual ? (guess / actual) : (actual / guess)\r\n        return Math.round(fraction * 100)\r\n    }\r\n\r\n    let questionString = '';\r\n    operands.forEach(element => {\r\n        questionString += `${element} × `;\r\n    });\r\n\r\n    questionString = questionString.slice(0, -3);\r\n    return new Question(questionString, result, scorer,15000);\r\n}\r\n\r\n\r\n\r\n\r\n","import { genMul } from \"./QGenerators\";\r\nimport Question from \"./Question\";\r\n\r\ntype generatorType = (arg0: any) => Question;\r\nexport enum ProgressState {\r\n    PREGAME,\r\n    INTRO,\r\n    RUNNING,\r\n    PAUSED,\r\n    OUTRO,\r\n    POSTGAME\r\n}\r\n\r\nlet defaultConfig = {\r\n\tnumOperands : {low: 2, high: 2},\r\n    rangeCenter: 20000,\r\n    rangeVariance: 2,\r\n    operandVariance: 2\r\n}\r\n\r\nclass GameState {\r\n    generator: generatorType = genMul\r\n    questionArray: Question[] = []\r\n    currentQuestion?: Question;\r\n    category: string = \"Multiplication (Easy)\"\r\n    numQuestions: number = 5\r\n    currentIndex: number = 0\r\n    recentScore: number = 0\r\n    totalScore: number = 0\r\n    recentGuess: number = 0\r\n    recentAnswer: number = 0\r\n    progressState: ProgressState = ProgressState.PREGAME\r\n    generatorconfig: any = defaultConfig\r\n    totalTime = 0\r\n    timeRemaining = 0\r\n}\r\n\r\nexport default GameState;","\r\nimport GameState , {ProgressState} from \"./GameState\";\r\n\r\n\r\nexport enum InputType {\r\n    BUTTON,\r\n    ANSWER,\r\n    ANIM\r\n}\r\nexport type Input = {\r\n    type: InputType,\r\n    payload: any\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function nextState(state: GameState, input: Input, callback: (input: Input) => void): GameState {\r\n\r\n    let next = state;\r\n    if (state.progressState === ProgressState.PREGAME) {\r\n        \r\n        if (input.type === InputType.BUTTON) {\r\n            if (input.payload === \"start\") {\r\n                next = initialState(state)\r\n\r\n                next.progressState = ProgressState.RUNNING\r\n            }\r\n        }\r\n    } else if (state.progressState === ProgressState.RUNNING) {\r\n        if (input.type === InputType.BUTTON) {\r\n            if (input.payload === \"reset\") {\r\n                next = initialState(state)\r\n                next.progressState = ProgressState.RUNNING\r\n            } else if (input.payload === 'playpause') {\r\n                next.progressState = ProgressState.PAUSED\r\n            }\r\n        } else if (input.type === InputType.ANSWER) {\r\n            let score = state.currentQuestion?.scorer(input.payload)\r\n            next.totalScore += score || 0;\r\n            next.recentGuess = input.payload\r\n            next.recentAnswer = state.currentQuestion?.answer || -1;\r\n            next.recentScore = score || 0;\r\n\r\n            next.currentIndex ++;\r\n            if (next.currentIndex < next.numQuestions) {\r\n                next.currentQuestion = next.questionArray[next.currentIndex];\r\n                next.totalTime = next.currentQuestion.timelimit\r\n                next.timeRemaining = next.totalTime\r\n            } else {\r\n                next.progressState = ProgressState.POSTGAME;\r\n            }\r\n        } \r\n    } else if (state.progressState === ProgressState.PAUSED) {\r\n        if (input.type === InputType.BUTTON && input.payload === 'playpause') {\r\n            next.progressState = ProgressState.RUNNING\r\n        } else if (input.payload === \"reset\") {\r\n            next = initialState(state)\r\n            next.progressState = ProgressState.RUNNING\r\n        }\r\n    } else if (state.progressState === ProgressState.POSTGAME) {\r\n        if (input.type === InputType.BUTTON && input.payload === 'replay') {\r\n            next = initialState(state)\r\n            next.progressState = ProgressState.RUNNING   \r\n        }\r\n    }\r\n\r\n    return next;\r\n}\r\n\r\nfunction initialState(state: GameState): GameState {\r\n    state.currentIndex = 0;\r\n    state.recentAnswer = state.recentGuess = state.recentScore = state.totalScore = 0;\r\n    state.questionArray = []\r\n    for (let i = 0; i < state.numQuestions; i++) {\r\n        state.questionArray.push(state.generator(state.generatorconfig));\r\n    }\r\n    state.currentQuestion = state.questionArray[0]\r\n    state.totalTime = state.currentQuestion.timelimit\r\n    state.timeRemaining = state.totalTime\r\n    return state\r\n}\r\n\r\n","import React, { CSSProperties } from 'react';\r\nimport { InputGroup, FormControl } from 'react-bootstrap';\r\nimport { Theme } from '../App';\r\nimport { Input, InputType } from '../logic/GameController';\r\nimport GameState, { ProgressState } from '../logic/GameState';\r\n\r\ntype propType = { \r\n    inputHandler : (arg0: Input) => void,\r\n    theme: Theme,\r\n    gameState: GameState\r\n}\r\n\r\n\r\n\r\nclass InputView extends React.Component<propType, {text: string}>{\r\n    inputField: React.RefObject<HTMLInputElement>;\r\n    canvasRef: React.RefObject<HTMLCanvasElement>;\r\n    timerInterval?: NodeJS.Timeout;\r\n    questionId: number = 0;\r\n    timeLimit: number = 0;\r\n    startTime: number = 0;\r\n    \r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            text: \"\",\r\n        }\r\n\r\n        this.inputField = React.createRef();\r\n        this.canvasRef = React.createRef();\r\n        this.drawArc = this.drawArc.bind(this);\r\n        this.handleChange = this.handleChange.bind(this)\r\n\r\n    }\r\n\r\n    drawArc(fraction: number) {\r\n        if (this.canvasRef.current === null) {\r\n            return\r\n        }\r\n\r\n        const canvas: any = this.canvasRef.current;\r\n        const context: any = this.canvasRef.current.getContext('2d');\r\n        context.strokeStyle = fraction < 0.75? 'green':'red'\r\n        \r\n        context.fillStyle = this.props.theme.background;\r\n        context.fillRect(0,0,48,48);\r\n        context.lineWidth = 3\r\n        context.translate(-0.5,-0.5);\r\n        let cx = canvas.width/2;\r\n        let cy = canvas.height/2;\r\n        context.beginPath();\r\n        context.arc(cx,cy, 16, 2* Math.PI * fraction - Math.PI /2, - Math.PI / 2);\r\n        context.stroke();\r\n\r\n        context.translate(0.5,0.5);\r\n\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.inputField.current?.focus();\r\n        \r\n    }\r\n    render() {\r\n        let inputStyle: CSSProperties = {\r\n            background: this.props.theme.background,\r\n            color: this.props.theme.textColor,\r\n        }\r\n    \r\n\r\n        \r\n        let progressState = this.props.gameState.progressState;\r\n        \r\n        let curQuestion = this.props.gameState.currentQuestion;\r\n        if (curQuestion !== undefined && curQuestion.id !== this.questionId) {\r\n\r\n            this.timerInterval && clearInterval(this.timerInterval);\r\n            \r\n            \r\n            this.questionId = curQuestion.id;\r\n            this.timeLimit = curQuestion.timelimit;\r\n            this.startTime = Date.now();\r\n            if (this.timeLimit !== 0) {\r\n                \r\n                this.timerInterval = setInterval(() => {\r\n                    if (this.props.gameState.progressState === ProgressState.PAUSED) {\r\n                        this.startTime += 16.67; // instead of stopping the interval\r\n                    }\r\n                    let elapsed =  Date.now() - this.startTime ;\r\n                    let fraction = elapsed / this.timeLimit \r\n                    \r\n                    if (fraction < 1) {\r\n                        this.drawArc(fraction);\r\n                    } else {\r\n                        this.timerInterval && clearInterval(this.timerInterval);\r\n                        this.props.inputHandler({type: InputType.ANSWER, payload: 1})\r\n                    }\r\n\r\n                }, 16.67);\r\n            }\r\n            this.forceUpdate();\r\n\r\n        }\r\n        let totalTime = curQuestion?.timelimit || 0;\r\n        let {gameState} = this.props;\r\n\r\n        let placeholder = '';\r\n        if (progressState === ProgressState.RUNNING) {\r\n            placeholder = 'Enter Answer'\r\n        } else if (progressState === ProgressState.PAUSED) {\r\n            placeholder = 'Game Paused'\r\n        }\r\n\r\n        return (\r\n            <div style={{display: 'flex', flexDirection: 'row'}}>\r\n                <InputGroup size=\"lg\" style = {inputStyle}>\r\n                    <FormControl onKeyDown = {this.handleKeyDown}\r\n                        style = {inputStyle}\r\n                        value = {this.state.text}\r\n                        onChange = {this.handleChange}\r\n                        placeholder={placeholder }\r\n                        ref = {this.inputField}\r\n                    />\r\n                </InputGroup>   \r\n                {totalTime !== 0 && gameState.progressState === ProgressState.RUNNING \r\n                && <canvas ref = {this.canvasRef} width = {48} height = {48}/>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    handleChange(e: any) {\r\n        if (this.props.gameState.progressState !== ProgressState.RUNNING) {\r\n            return\r\n        }\r\n        let inputText: string = e.target.value;\r\n        let lastChar = inputText.slice(-1);\r\n        if (inputText.length === 0 || (lastChar >= '0' && lastChar <= '9') || lastChar === 'e' || lastChar === '-' || lastChar === '+' || lastChar === '.') {\r\n            this.setState({text: inputText});\r\n        } \r\n    }\r\n\r\n    handleKeyDown = (e: React.KeyboardEvent) => {\r\n        if (e.key === 'Enter' && this.props.gameState.progressState === ProgressState.RUNNING) {\r\n            let parsed : number;\r\n            try {\r\n                parsed = parseFloat(this.state.text);\r\n            } catch (error) {\r\n                return\r\n            }\r\n            if (isNaN(parsed)) {\r\n                return\r\n            }\r\n           this.props.inputHandler({type: InputType.ANSWER, payload: parsed})\r\n           this.setState({text: ''})\r\n\r\n           if (this.props.gameState.currentIndex === this.props.gameState.numQuestions - 1) {\r\n           }\r\n        } else if (e.key === 'Enter' && this.props.gameState.progressState === ProgressState.POSTGAME) {\r\n            this.props.inputHandler({type: InputType.BUTTON, payload: 'replay'})\r\n        }\r\n    }\r\n}\r\n\r\nexport default InputView","import React from 'react';\r\nimport { Theme } from '../App';\r\nimport GameState, { ProgressState } from '../logic/GameState';\r\nimport Question from '../logic/Question';\r\n\r\ntype propType = {\r\n    question: Question | undefined,\r\n    theme: Theme\r\n    gameState: GameState\r\n}\r\n\r\nlet mainFontStyle = {\r\n    fontSize: 45,\r\n    textAlign: \"center\" as const,\r\n    minHeight: 100\r\n}\r\n\r\nlet altFontStyle = {\r\n    fontSize: 30,\r\n    textAlign: \"center\" as const,\r\n    minHeight: 100,\r\n    padding: 15\r\n    \r\n}\r\n\r\n\r\n\r\nclass QuestionView extends React.Component<propType, any>{\r\n    \r\n\r\n\r\n    render() {\r\n\r\n        let progressState = this.props.gameState.progressState;\r\n\r\n        if (progressState === ProgressState.PAUSED) {\r\n            return (\r\n                <div style = {{...mainFontStyle, fontFamily: this.props.theme.questionFont}}>\r\n                    ---Paused---\r\n                </div>\r\n            )\r\n        } else if (progressState === ProgressState.POSTGAME) {\r\n            return (\r\n                <div style = {{...altFontStyle, fontFamily: this.props.theme.questionFont}}>\r\n                   {`Final Score: ${this.props.gameState.totalScore}`}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div style = {{...mainFontStyle, fontFamily: this.props.theme.questionFont}}>\r\n                {this.props.question?.expression || \"---\"}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QuestionView","import React, { CSSProperties } from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\n\r\n \r\ntype propType = {\r\n    recentScore: number,\r\n    totalScore: number,\r\n    recentGuess: number,\r\n    recentAnswer: number\r\n}\r\n\r\nclass ScoreView extends React.Component<propType, {}> {\r\n\r\n    render() {\r\n\r\n        let {recentGuess , recentAnswer} = this.props\r\n\r\n        let errorString = '';\r\n        let relError = Math.abs(Math.log10(recentAnswer) - Math.log10(recentGuess))\r\n        relError = Math.pow(10, relError);\r\n        \r\n        if (isNaN(relError)) {\r\n            relError = 1\r\n        } \r\n        \r\n\r\n        \r\n        if (relError < 1.5) {\r\n            relError = 100 * (relError - 1);\r\n            errorString = `Error: ${relError.toFixed(2)} %`\r\n        } else {\r\n            relError = Math.log10(relError)\r\n            errorString = `Error (log₁₀): ${relError.toFixed(2)}`\r\n        }\r\n\r\n        let isTinyScreen = window.innerWidth < 576\r\n        let errorStyle: CSSProperties = isTinyScreen ? {} : {float: \"right\"}\r\n        \r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <Row>\r\n                        <Col xs = {12} sm = {4}>\r\n                            <span >{`Score: ${this.props.totalScore} `}</span>\r\n                            <span>{`(+${this.props.recentScore})`}</span>\r\n                        </Col>\r\n                        <Col xs = {12} sm = {8}>\r\n                            <div style = {errorStyle}>\r\n                                <div>{`Guess: ${format(recentGuess)}, Answer: ${format(recentAnswer)}`}</div>\r\n                                <div>{errorString}</div>\r\n                            </div>\r\n                        </Col>\r\n\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet superscripts = \"⁰¹²³⁴⁵⁶⁷⁸⁹⁻\"\r\n\r\n\r\nfunction format(num: number, max:number  = 1e6, min:number = 1e-3): string {\r\n    if (num !== 0 && (num < min || num > max)) {\r\n        let exponent = Math.floor(Math.log10(num))\r\n        let mantissa = num / Math.pow(10, exponent);\r\n        let temp = exponent.toString();\r\n        let exponentStr = ''\r\n        for (let i = 0; i < temp.length; i++) {\r\n            if (temp[i] === '-') {\r\n                exponentStr += superscripts[10]\r\n            } else {\r\n                exponentStr += superscripts[parseInt(temp[i])]\r\n            }\r\n        }\r\n\r\n        return `${mantissa.toFixed(3)}×10${exponentStr}`\r\n        \r\n    }\r\n    return num.toString()\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default ScoreView;","import React, { CSSProperties } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { Theme } from '../App';\r\nimport { Input, InputType } from '../logic/GameController';\r\nimport GameState, { ProgressState } from '../logic/GameState';\r\n\r\ntype propType = { \r\n    theme: Theme,\r\n    gameState: GameState,\r\n    inputHandler: (arg0: Input) => void\r\n}\r\n\r\n\r\nclass GameInfoView extends React.Component<propType, any>{\r\n    render() {\r\n        let {theme, gameState, inputHandler} = this.props\r\n        let style: CSSProperties = {\r\n            fontFamily:  theme.headerFont,\r\n            fontSize: \"24px\",\r\n            marginTop: \"12px\",\r\n        }\r\n\r\n        let progressString = `(${gameState.currentIndex + 1}/${gameState.numQuestions})`\r\n        let startButton = <Button \r\n            variant = \"success\" \r\n            style = {{float: \"right\", fontFamily : theme.bodyFont}}\r\n            onClick = {() => {inputHandler({type: InputType.BUTTON, payload: 'start'})}\r\n        }>Start↵</Button>\r\n        \r\n        let replayButton = <Button \r\n            variant = \"success\" \r\n            style = {{float: \"right\", fontFamily : theme.bodyFont}}\r\n            onClick = {() => {inputHandler({type: InputType.BUTTON, payload: 'replay'})}\r\n        }>Replay↵</Button>\r\n\r\n\r\n\r\n        return (\r\n            <div style = {style}>\r\n\r\n                <span>{gameState.category}</span>\r\n                \r\n                {gameState.progressState === ProgressState.PREGAME ? \r\n                    startButton :\r\n                gameState.progressState === ProgressState.POSTGAME ?\r\n                    replayButton:\r\n                    <span style = {{float: \"right\"}}>{progressString}</span>\r\n                }\r\n                <hr style = {{borderColor: theme.textColor  }}></hr>\r\n            </div>       \r\n        )\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default GameInfoView","import React, { CSSProperties } from \"react\";\r\nimport { Input, InputType } from \"../logic/GameController\";\r\nimport GameState, { ProgressState } from \"../logic/GameState\";\r\nimport { Button } from 'react-bootstrap'\r\n\r\ntype propType = {\r\n    inputHandler: (arg0: Input) => void\r\n    gameState: GameState\r\n}\r\n\r\nlet buttonStyle: CSSProperties = {\r\n    marginRight: 4\r\n}\r\n\r\nclass ButtonRow extends React.Component<propType, {}> {\r\n\r\n\r\n    constructor(props: propType) {\r\n        super(props);\r\n\r\n        this.pauseEvent = this.pauseEvent.bind(this);\r\n        this.resetEvent = this.resetEvent.bind(this);\r\n    }\r\n\r\n    render() {\r\n\r\n        let progressState = this.props.gameState.progressState\r\n        let paused = progressState === ProgressState.PAUSED\r\n\r\n        let runningButtons = \r\n        [\r\n            <Button variant=\"primary\" style={buttonStyle} key ={1} onClick={this.pauseEvent}><u>P</u>{paused? \"lay\" : \"ause\"}</Button>,\r\n            <Button variant=\"warning\" style={buttonStyle} key={2} onClick={this.resetEvent}><u>R</u>eset</Button>\r\n        ]\r\n        \r\n        let postgameButtons: HTMLElement[] = [] \r\n        // [\r\n        //     <Button variant=\"primary\" style={buttonStyle} onClick={this.replayEvent} key={1}>Replay ↵</Button>\r\n        // ]\r\n\r\n        return (\r\n            <div>\r\n                {progressState === ProgressState.POSTGAME ? postgameButtons:runningButtons }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    pauseEvent() {\r\n        this.props.inputHandler({type: InputType.BUTTON, payload: \"playpause\"})\r\n    }\r\n    \r\n    resetEvent() {\r\n        this.props.inputHandler({type: InputType.BUTTON, payload: \"reset\"})\r\n    }\r\n    \r\n}\r\n\r\nexport default ButtonRow","import { Input, InputType } from \"./GameController\";\r\nimport GameState, { ProgressState } from \"./GameState\";\r\n\r\nlet prev = 0;\r\n\r\nexport function decodeInput(e: KeyboardEvent, gameState: GameState) : Input | undefined {\r\n    if (e.timeStamp - prev < 0.1) {\r\n        return undefined\r\n    }\r\n\r\n    prev = e.timeStamp\r\n\r\n    let input: Input = {\r\n        type: InputType.BUTTON,\r\n        payload: ''\r\n    }\r\n\r\n    if (e.code === 'KeyR') {\r\n        input.payload = 'reset';\r\n        return input\r\n    }\r\n    if (e.code === 'KeyP') {\r\n        input.payload = 'playpause';\r\n        return input\r\n    }\r\n    if (e.code === 'Enter') {\r\n        if (gameState.progressState === ProgressState.PREGAME) {\r\n            input.payload = 'start'\r\n            return input\r\n        }  else if (gameState.progressState === ProgressState.RUNNING) {\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    return undefined\r\n}","import React from 'react';\r\nimport Question from '../logic/Question';\r\nimport InputView from './InputView';\r\nimport QuestionView from './QuestionView';\r\nimport ScoreView from './ScoreView';\r\nimport { Theme } from '../App'\r\nimport GameInfoView from './GameInfoView';\r\nimport ButtonRow from './ButtonRow';\r\nimport { Input } from '../logic/GameController';\r\nimport GameState from '../logic/GameState';\r\nimport {nextState } from '../logic/GameController'\r\nimport { decodeInput } from '../logic/KeyDecoder';\r\n\r\ntype propType = {\r\n    generator: (arg: object) => Question,\r\n    config: object,\r\n    theme: Theme\r\n}\r\n\r\ntype stateType = {\r\n    gameState: GameState\r\n}\r\n\r\n\r\n\r\nclass CenterView extends React.Component<propType, stateType>{\r\n    \r\n    \r\n    prevTimestamp: number = 0;\r\n\r\n    constructor(props: propType) {\r\n        super(props);\r\n\r\n\r\n        this.state = {\r\n            gameState: new GameState()\r\n        }\r\n\r\n        \r\n        this.handleInput = this.handleInput.bind(this);   \r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        this.handleInput = this.handleInput.bind(this);   \r\n        this.keyCapture  = this.keyCapture.bind(this);\r\n        \r\n        document.body.addEventListener('keydown', this.keyCapture)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.body.removeEventListener('keydown', this.keyCapture);\r\n    }\r\n\r\n    render() {\r\n        let gameState = this.state.gameState;\r\n        return (\r\n            <div>\r\n                \r\n                <GameInfoView theme = {this.props.theme} gameState={gameState} inputHandler = {this.handleInput}/> \r\n                <QuestionView question = {gameState.currentQuestion} theme ={this.props.theme} gameState={gameState}/>\r\n                <InputView inputHandler = {this.handleInput} theme = {this.props.theme} gameState={gameState}></InputView>\r\n                <ScoreView recentScore = {gameState.recentScore} totalScore = {gameState.totalScore}\r\n                        recentGuess = {gameState.recentGuess} recentAnswer = {gameState.recentAnswer}/>\r\n                <ButtonRow inputHandler = {this.handleInput} gameState={gameState}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleInput(input: Input) {\r\n\r\n        let next = nextState(this.state.gameState, input, this.handleInput);\r\n        this.setState({gameState: next})\r\n    }\r\n\r\n    keyCapture(e: KeyboardEvent) {\r\n        \r\n        let inputEvent: Input | undefined = decodeInput(e, this.state.gameState);\r\n        if (inputEvent !== undefined) {\r\n            this.handleInput(inputEvent);\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n}\r\n\r\nexport default CenterView","import React, { CSSProperties } from \"react\"\r\nimport { Theme } from \"../App\"\r\n\r\n\r\ntype propType = {\r\n    theme: Theme\r\n}\r\n\r\n\r\nclass HeaderView extends React.Component<propType,{}> {\r\n    render() {\r\n        \r\n        let headerStyle: CSSProperties = {\r\n            background: this.props.theme.primary,\r\n            width: \"100%\",\r\n            textAlign: \"center\",\r\n            fontFamily: this.props.theme.headerFont,\r\n            fontSize: \"30px\",\r\n            color: this.props.theme.textColor\r\n        }\r\n        return (\r\n            <div style = {headerStyle}>\r\n                The Estimation Game\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HeaderView","import React, { CSSProperties } from 'react';\r\nimport { Container, Row, Col} from 'react-bootstrap';\r\nimport './App.css';\r\nimport { genMul } from './logic/QGenerators';\r\nimport Question from './logic/Question';\r\nimport CenterView from './view/CenterView';\r\nimport HeaderView from './view/HeaderView';\r\n\r\nlet generator: (arg0: any) => Question = genMul;\r\ntype stateType = {\r\n\twidth: number,\r\n\theight: number\r\n}\r\n\r\nexport type Theme = {\r\n\tbackground: string,\r\n\tprimary: string,\r\n\tsecondary: string,\r\n\ttextColor: string,\r\n\tquestionFont: string, \r\n\theaderFont: string,\r\n\tbodyFont: string\r\n}\r\n\r\nlet theme: Theme = {\r\n\tbackground: \"#222831\",\r\n\tprimary: \"#30475e\",\r\n\tsecondary: \"#ffa41b\",\r\n\ttextColor: \"#eeeeee\",\r\n\tquestionFont: \"Roboto Mono\",\r\n\theaderFont: \"Concert One\",\r\n\tbodyFont: \"Noto Sans\"\r\n}\r\n\r\nlet config = {\r\n\tnumOperands : {low: 2, high: 2},\r\n    rangeCenter: 20000,\r\n    rangeVariance: 2,\r\n    operandVariance: 2\r\n}\r\n\r\nlet appStyle: CSSProperties = {\r\n\tbackground: theme.background,\r\n\tminHeight: \"100vh\",\r\n\tcolor: theme.textColor,\r\n\tfontFamily: theme.bodyFont\r\n\r\n}\r\n\r\nclass App extends React.Component<any,stateType> {\r\n\r\n\t\r\n\r\n\tconstructor(props: any) {\r\n\t\tsuper(props)\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\twidth: window.innerWidth,\r\n\t\t\theight: window.innerHeight\r\n\t\t})\r\n\t\twindow.addEventListener('resize', (ev: any)=> {\r\n\t\t\tthis.setState({\r\n\t\t\t\theight: ev.currentTarget.innerHeight,\r\n\t\t\t\twidth: ev.currentTarget.innerWidth\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n  \trender() {\r\n    \treturn (\r\n\t\t\t<div style = {appStyle}>\r\n\t\t\t\t<HeaderView theme = {theme}/>\r\n\t\t\t\t<Container>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col lg={2} md={1} xs = {0}>\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col lg={8} md={10} xs = {12}>\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t\t<CenterView config = {config} generator = {generator} theme = {theme}></CenterView>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col lg ={2} md = {1} xs = {0} >\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t</Container>\r\n\t\t\t</div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}