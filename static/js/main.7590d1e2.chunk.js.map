{"version":3,"sources":["questionViews/AngleView.tsx","questionViews/CountingStaticView.tsx","questionViews/TextView.tsx","logic/Question.tsx","logic/QGenerators.tsx","logic/GameState.tsx","logic/GameController.tsx","view/InputView.tsx","view/QuestionView.tsx","view/ScoreView.tsx","view/GameInfoView.tsx","view/ButtonRow.tsx","logic/KeyDecoder.tsx","view/CenterView.tsx","logic/GameModes.ts","view/GamemodeSidebar.tsx","view/HeaderView.tsx","view/WelcomePage.tsx","App.tsx","index.tsx"],"names":["AngleView","props","canvasRef","width","height","state","remUpdates","React","createRef","update","bind","this","document","getElementById","clientWidth","ctx","current","getContext","fillStyle","fillRect","strokeStyle","lineWidth","beginPath","radius","innerRad","moveTo","lineTo","x","Math","cos","angle","y","sin","arc","stroke","ref","setState","setTimeout","Component","rngInt","low","high","floor","random","CountingStaticView","gridsize","num","filled","Array","fill","map","cnt","drawFunction","shape","drawSquare","drawCircle","r","c","w","h","cellsize","PI","closePath","TextView","fontStyle","fontSize","textAlign","minHeight","max","mode","style","fontFamily","text","defaultScorer","guess","actual","Question","view","answer","scorer","timelimit","id","logRng","mid","variance","pow","genMul","config","numOperands","rangeCenter","rangeVariance","operandVariance","timeLimit","numOp","result","operands","i","nextOperand","push","round","sort","a","b","reduce","acc","cur","questionString","forEach","element","slice","fraction","ProgressState","InputType","defaultConfig","GameState","generator","questionArray","currentQuestion","category","numQuestions","currentIndex","recentScore","totalScore","recentGuess","recentAnswer","progressState","PREGAME","generatorconfig","totalTime","initialState","InputView","inputField","timerInterval","questionId","startTime","handleKeyDown","e","key","gameState","RUNNING","parsed","parseFloat","error","isNaN","inputHandler","type","ANSWER","payload","POSTGAME","BUTTON","drawArc","handleChange","canvas","context","theme","background","translate","cx","cy","focus","inputStyle","color","textColor","curQuestion","undefined","clearInterval","Date","now","setInterval","PAUSED","forceUpdate","placeholder","display","flexDirection","InputGroup","size","FormControl","onKeyDown","value","onChange","inputText","target","lastChar","length","mainFontStyle","altFontStyle","padding","QuestionView","questionFont","question","ScoreView","errorString","relError","abs","log10","toFixed","errorStyle","window","innerWidth","float","Container","Row","Col","xs","sm","format","superscripts","min","exponent","mantissa","temp","toString","exponentStr","parseInt","tmp","decimal","substring","GameInfoView","headerFont","marginTop","smallui","progressString","startButton","Button","variant","bodyFont","onClick","replayButton","borderColor","buttonStyle","marginRight","ButtonRow","pauseEvent","resetEvent","paused","runningButtons","prev","CenterView","prevTimestamp","handleInput","keyCapture","body","addEventListener","removeEventListener","input","next","callback","score","nextState","inputEvent","timeStamp","code","decodeInput","modes","levels","name","times","operandRange","minDeg","maxDeg","resultRad","GamemodeSidebar","outer","level","changeOuter","changeTimeLimit","changeLevel","updateParent","handleUpdate","visible","sidebarStyle","position","zIndex","top","right","overflowX","backgroundColor","primary","borderLeft","clientHeight","headingStyle","margin","chosenOuter","outerButtons","isSelected","timeButtons","timerText","levelButtons","ButtonGroup","vertical","newCategory","outerObj","newTime","newLevel","newLimit","numQ","l","updateHandler","HeaderView","headerStyle","iconStyle","className","sidebarHandler","WelcomePage","secondary","appStyle","App","centerRef","sidebarRef","innerHeight","rightBar","leftBar","welcomePage","ev","currentTarget","updateGamemode","left","lg","md","side","fromWelcomePage","parentUpdate","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7590d1e2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Theme } from \"../App\";\r\n\r\ntype stateType = {\r\n    remUpdates: number,\r\n\r\n}\r\n\r\ntype propType = {angle: number}\r\n\r\nclass AngleView extends React.Component<propType, stateType> {\r\n    \r\n\r\n    canvasRef: React.RefObject<HTMLCanvasElement>\r\n    width: number = 300\r\n    height: number = 300\r\n    constructor(props: propType) {\r\n        super(props)\r\n        this.state = {\r\n            remUpdates: 1\r\n        }\r\n        this.canvasRef = React.createRef();\r\n        this.update = this.update.bind(this);\r\n    }\r\n    \r\n\r\n    render() {\r\n\r\n       \r\n        this.width = document.getElementById('centerview')?.clientWidth || 300;\r\n        this.height = this.width;\r\n        let ctx = this.canvasRef.current?.getContext('2d')\r\n        if (ctx) {\r\n\r\n            ctx.fillStyle = '#222831'\r\n            ctx.fillRect(0,0,this.width, this.height)\r\n\r\n            ctx.strokeStyle = '#eeeeee'\r\n            ctx.lineWidth = this.width /150\r\n            ctx.beginPath()\r\n            let radius = this.width * 0.4\r\n            let innerRad = radius * 0.2\r\n            ctx.moveTo(this.width/2, this.height/2)\r\n            ctx.lineTo(this.width / 2 + radius, this.height / 2)\r\n            ctx.moveTo(this.width / 2, this.height / 2);\r\n\r\n            let x = radius * Math.cos(this.props.angle)\r\n            let y = radius * Math.sin(this.props.angle)\r\n\r\n            ctx.lineTo(this.width / 2 + x , this.height / 2 - y)\r\n\r\n\r\n            ctx.moveTo(this.width/2, this.height/2)\r\n            \r\n            ctx.arc(this.width/2, this.height/2, innerRad, -this.props.angle , 0)\r\n\r\n            ctx.stroke()\r\n        }\r\n\r\n        this.update();\r\n\r\n\r\n\r\n        return <canvas width = {this.width} height = {this.height} ref = {this.canvasRef}/>\r\n    }\r\n\r\n\r\n\r\n    update() {\r\n        if (this.state.remUpdates <= 0) {\r\n            return\r\n        }\r\n        \r\n        this.setState((state) => ({remUpdates: state.remUpdates - 1}));\r\n        setTimeout(this.update, 16.67);\r\n    }\r\n}\r\n\r\nexport default AngleView","import React from \"react\";\r\nimport { Theme } from \"../App\";\r\n\r\ntype stateType = {\r\n    remUpdates: number\r\n}\r\n\r\ntype propType = {num: number, shape: string, width?: number}\r\n\r\nfunction rngInt(low: number, high: number) : number {\r\n    return low + Math.floor(Math.random() * (high - low + 0.99999));\r\n}\r\n\r\n\r\nclass CountingStaticView extends React.Component<propType, stateType> {\r\n    \r\n    canvasRef: React.RefObject<HTMLCanvasElement>\r\n    width: number = 300\r\n    height: number = 300\r\n    constructor(props: propType) {\r\n        super(props)\r\n        this.state = {\r\n            remUpdates: 1\r\n        }\r\n        this.canvasRef = React.createRef();\r\n        this.update = this.update.bind(this);\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let {num} = this.props\r\n        let gridsize = num < 100 ? 32 : 50\r\n        \r\n        this.width = this.props.width || document.getElementById('centerview')?.clientWidth || 300;\r\n        this.height = this.width;\r\n        let cellsize = this.width / gridsize;\r\n        \r\n        let ctx = this.canvasRef.current?.getContext('2d')\r\n        if (ctx) {\r\n\r\n            ctx.fillStyle = '#222831'\r\n            ctx.fillRect(0,0,this.width, this.height)\r\n\r\n            ctx.fillStyle = '#eeeeee'\r\n            let filled: boolean[][] = new Array(gridsize)\r\n                .fill(false)\r\n                .map(() => new Array(gridsize)\r\n                .fill(false));\r\n\r\n            \r\n\r\n            let cnt = 0\r\n            let drawFunction = this.props.shape === 'square'? this.drawSquare : this.drawCircle\r\n            while (cnt < this.props.num) {\r\n\r\n                let r = rngInt(0, gridsize - 1)\r\n                let c = rngInt(0, gridsize - 1)\r\n                if (filled[r][c]) continue\r\n\r\n                filled[r][c] = true\r\n\r\n                drawFunction(ctx, gridsize, r, c, this.width, this.height)\r\n\r\n                cnt++\r\n            }\r\n\r\n        }\r\n\r\n        this.update();\r\n\r\n\r\n\r\n        return <canvas width = {this.width} height = {this.height} ref = {this.canvasRef}/>\r\n    }\r\n\r\n    update() {\r\n        if (this.state.remUpdates <= 0) {\r\n            return\r\n        }\r\n        \r\n        this.setState((state) => ({remUpdates: state.remUpdates - 1}));\r\n        setTimeout(this.update, 16.67);\r\n    }\r\n\r\n    drawCircle(ctx: CanvasRenderingContext2D , gridsize: number, r: number, c: number, w: number, h: number) {\r\n       \r\n        \r\n\r\n        let cellsize = w / (gridsize + 1)\r\n        \r\n        let x = c * cellsize\r\n        let y = r * cellsize\r\n        x += cellsize * (gridsize - r - 1) / gridsize;\r\n        y += cellsize * (c) / gridsize\r\n\r\n        x += cellsize / 2\r\n        y += cellsize / 2\r\n\r\n        \r\n\r\n        ctx.beginPath()\r\n        ctx.arc(x,y,cellsize / 2 * 0.9, 0, 2* Math.PI)\r\n        ctx.fill()\r\n        ctx.closePath()\r\n\r\n    }\r\n\r\n    drawSquare(ctx: CanvasRenderingContext2D , gridsize: number, r: number, c: number, w: number, h: number) {\r\n        let cellsize = w / (gridsize + 1)\r\n        \r\n        let x = c * cellsize\r\n        let y = r * cellsize\r\n        x += cellsize * (gridsize - r - 1) / gridsize;\r\n        y += cellsize * (c) / gridsize\r\n\r\n        x += cellsize / 2\r\n        y += cellsize / 2\r\n\r\n        \r\n\r\n        ctx.beginPath()\r\n        ctx.fillRect(x,y,cellsize, cellsize)\r\n        ctx.closePath()\r\n\r\n    }\r\n}\r\n\r\nexport default CountingStaticView","import React, { CSSProperties } from \"react\";\r\n// @ts-ignore\r\nimport { Textfit } from 'react-textfit';\r\n\r\n\r\nclass TextView extends React.Component<{text: string}, {}> {\r\n\r\n    render() {\r\n\r\n        let fontStyle: CSSProperties = {\r\n            fontSize: 45,\r\n            textAlign: \"center\" as const,\r\n            minHeight: 100\r\n        }\r\n        return (\r\n        <Textfit max={fontStyle.fontSize} mode = {'single'} style = {{...fontStyle, fontFamily: 'Roboto Mono'}}>\r\n            {this.props.text}\r\n        </Textfit>)\r\n    }\r\n\r\n}\r\n\r\nexport default TextView","\r\n\r\nclass Question {\r\n    \r\n    view: any\r\n    answer: number\r\n    timelimit: number\r\n    id: number\r\n    \r\n    // Return a number between 0 and 1\r\n    scorer: (arg0: number) => number\r\n\r\n    constructor(view: any, answer: number, scorer = defaultScorer, timelimit: number = 0) {\r\n        this.view = view\r\n        this.answer = answer\r\n        this.id = Math.random();\r\n        this.scorer = (guess: number) => scorer(guess, this.answer)\r\n        this.timelimit = timelimit\r\n    }\r\n\r\n}\r\n\r\nfunction defaultScorer(guess: number, actual: number) : number {\r\n    if (guess < actual) {\r\n        return guess / actual;\r\n    }\r\n    return actual / guess;\r\n}\r\n\r\nexport default Question","import React from \"react\";\r\nimport { Theme } from \"../App\";\r\nimport AngleView from \"../questionViews/AngleView\";\r\nimport CountingStaticView from \"../questionViews/CountingStaticView\";\r\nimport TextView from \"../questionViews/TextView\";\r\nimport Question from \"./Question\";\r\n\r\ntype Range = {\r\n    low: number,\r\n    high: number\r\n}\r\n\r\n\r\n\r\nfunction rngInt(low: number, high: number) : number {\r\n    return low + Math.floor(Math.random() * (high - low + 0.99999));\r\n}\r\n\r\n\r\nfunction rng(low: number, high: number) : number {\r\n    return low + Math.random() * (high - low);\r\n}\r\n\r\nfunction logRng(mid: number, variance: number) : number {\r\n    return mid * Math.pow(2 , rng(-variance, variance));\r\n}\r\n\r\n\r\nexport function genMul(config : {\r\n    numOperands : Range,\r\n    rangeCenter: number,\r\n    rangeVariance: number\r\n    operandVariance: number,\r\n    timeLimit: number\r\n\r\n}) : Question {\r\n    let {numOperands, rangeCenter, rangeVariance, operandVariance, timeLimit} = config;\r\n    let numOp = rngInt(numOperands.low, numOperands.high);\r\n    let result = logRng(rangeCenter, rangeVariance);\r\n    let avgOp: number\r\n    let operands: number[] = [];\r\n    for (let i = 0; i < numOp; i++) {\r\n        avgOp = Math.pow(result , 1 / (numOp - i));\r\n        let nextOperand = logRng(avgOp , operandVariance);\r\n        operands.push(Math.round(nextOperand));\r\n        result /= nextOperand;\r\n    }\r\n    operands.sort((a,b) => a-b);\r\n    \r\n\r\n    // Calculate actual result\r\n    result = operands.reduce((acc, cur) => acc * cur);\r\n    // scorer\r\n    let scorer = (guess: number, actual: number) : number => {\r\n        let fraction = guess < actual ? (guess / actual) : (actual / guess)\r\n        return Math.round(fraction * 100)\r\n    }\r\n\r\n    let questionString = '';\r\n    operands.forEach(element => {\r\n        questionString += `${element} × `;\r\n    });\r\n    questionString = questionString.slice(0, -3);\r\n    return new Question( <TextView text = {questionString}/>, result, scorer, timeLimit);\r\n}\r\n\r\nexport function genPerc(\r\n    config : {\r\n        numOperands : Range,\r\n        operandRange: Range,\r\n        timeLimit: number,\r\n        round: number\r\n    }\r\n) {\r\n\r\n    let {numOperands, operandRange, timeLimit, round} = config;\r\n    let numOp = rngInt(numOperands.low, numOperands.high);\r\n\r\n    let operands = []\r\n    let result = 1;\r\n    for (let i = 0; i < numOp; i++) {\r\n        \r\n        operands.push(rngInt(operandRange.low, operandRange.high));\r\n        \r\n        operands[i] -= operands[i] % round; \r\n        result *= operands[i] / 100;\r\n    }\r\n\r\n    let questionString = '';\r\n    operands.forEach(element => {\r\n        questionString += `${(element)}% × `;\r\n    });\r\n    questionString = questionString.slice(0, -3);\r\n\r\n    let scorer = (guess: number, actual: number) : number => {\r\n        let fraction = guess < actual ? (guess / actual) : (actual / guess)\r\n        return Math.round(fraction * 100)\r\n    }\r\n\r\n\r\n    return new Question(<TextView text = {questionString}/>, result, scorer, timeLimit);\r\n\r\n\r\n    \r\n\r\n}\r\n\r\n\r\nexport function genAngle (\r\n    config: {\r\n        minDeg: number,\r\n        maxDeg: number,\r\n        timeLimit: number\r\n    }\r\n) : Question {\r\n\r\n    let {minDeg, maxDeg, timeLimit} = config\r\n    let result = rngInt(minDeg, maxDeg);\r\n\r\n    let resultRad = result * Math.PI / 180\r\n\r\n    let scorer = (guess: number, actual: number) : number => {\r\n\r\n        let fraction = 1 - Math.abs(guess - actual) * 0.05\r\n        if (fraction < 0) fraction = 0;\r\n        return Math.round(fraction * 100)\r\n    }\r\n\r\n\r\n    return new Question(<AngleView angle={resultRad}/>, result, scorer, timeLimit)\r\n\r\n}\r\n\r\nexport function genCounting (\r\n    config: {\r\n        min: number,\r\n        max: number,\r\n        timeLimit: number\r\n    }\r\n) : Question {\r\n\r\n    let {min, max, timeLimit} = config;\r\n    let result = rngInt(min, max)\r\n\r\n    let scorer = (guess: number, actual: number) : number => {\r\n\r\n        if (guess === actual) {\r\n            return 100\r\n        }\r\n\r\n        let fraction = guess < actual ? (guess / actual) : (actual / guess)\r\n        return Math.round(fraction * 90)\r\n    }\r\n\r\n    let shape = 'circle'\r\n\r\n    return new Question(<CountingStaticView num={result} shape = {shape}/>, result, scorer, timeLimit)\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import { genMul } from \"./QGenerators\";\r\nimport Question from \"./Question\";\r\n\r\ntype generatorType = (arg0: any) => Question;\r\nexport enum ProgressState {\r\n    PREGAME,\r\n    INTRO,\r\n    RUNNING,\r\n    PAUSED,\r\n    OUTRO,\r\n    POSTGAME\r\n}\r\n\r\nlet defaultConfig = {\r\n\tnumOperands : {low: 2, high: 2},\r\n    rangeCenter: 20000,\r\n    rangeVariance: 2,\r\n    operandVariance: 2,\r\n    timeLimit: 0\r\n}\r\n\r\nclass GameState {\r\n    generator: generatorType = genMul\r\n    questionArray: Question[] = []\r\n    currentQuestion?: Question;\r\n    category: string = \"Multiplication (Easy)\"\r\n    numQuestions: number = 5\r\n    currentIndex: number = 0\r\n    recentScore: number = 0\r\n    totalScore: number = 0\r\n    recentGuess: number = 0\r\n    recentAnswer: number = 0\r\n    progressState: ProgressState = ProgressState.PREGAME\r\n    generatorconfig: any = defaultConfig\r\n    totalTime = 0\r\n    // constructor(category: string, generator: generatorType, numQuestions: number, config: any) {\r\n    //     this.category = category\r\n    //     this.generator = generator\r\n    //     this.numQuestions = numQuestions\r\n    //     this.generatorconfig = config\r\n    // }\r\n}\r\n\r\nexport default GameState;","\r\nimport GameState , {ProgressState} from \"./GameState\";\r\n\r\n\r\nexport enum InputType {\r\n    BUTTON,\r\n    ANSWER,\r\n    ANIM\r\n}\r\nexport type Input = {\r\n    type: InputType,\r\n    payload: any\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function nextState(state: GameState, input: Input, callback: (input: Input) => void): GameState {\r\n\r\n    let next = state;\r\n    if (state.progressState === ProgressState.PREGAME) {\r\n        \r\n        if (input.type === InputType.BUTTON) {\r\n            if (input.payload === \"start\") {\r\n                next = initialState(state)\r\n\r\n                next.progressState = ProgressState.RUNNING\r\n            }\r\n        }\r\n    } else if (state.progressState === ProgressState.RUNNING) {\r\n        if (input.type === InputType.BUTTON) {\r\n            if (input.payload === \"reset\") {\r\n                next = initialState(state)\r\n                next.progressState = ProgressState.RUNNING\r\n            } else if (input.payload === 'playpause') {\r\n                next.progressState = ProgressState.PAUSED\r\n            }\r\n        } else if (input.type === InputType.ANSWER) {\r\n            let score = state.currentQuestion?.scorer(input.payload)\r\n            next.totalScore += score || 0;\r\n            next.recentGuess = input.payload\r\n            next.recentAnswer = state.currentQuestion?.answer || -1;\r\n            next.recentScore = score || 0;\r\n\r\n            next.currentIndex ++;\r\n            if (next.currentIndex < next.numQuestions) {\r\n                next.currentQuestion = next.questionArray[next.currentIndex];\r\n                next.totalTime = next.currentQuestion.timelimit\r\n            } else {\r\n                next.progressState = ProgressState.POSTGAME;\r\n            }\r\n        } \r\n    } else if (state.progressState === ProgressState.PAUSED) {\r\n        if (input.type === InputType.BUTTON && input.payload === 'playpause') {\r\n            next.progressState = ProgressState.RUNNING\r\n        } else if (input.payload === \"reset\") {\r\n            next = initialState(state)\r\n            next.progressState = ProgressState.RUNNING\r\n        }\r\n    } else if (state.progressState === ProgressState.POSTGAME) {\r\n        if (input.type === InputType.BUTTON && input.payload === 'replay') {\r\n            next = initialState(state)\r\n            next.progressState = ProgressState.RUNNING   \r\n        }\r\n    }\r\n\r\n    return next;\r\n}\r\n\r\nfunction initialState(state: GameState): GameState {\r\n    state.currentIndex = 0;\r\n    state.recentAnswer = state.recentGuess = state.recentScore = state.totalScore = 0;\r\n    state.questionArray = []\r\n    for (let i = 0; i < state.numQuestions; i++) {\r\n        state.questionArray.push(state.generator(state.generatorconfig));\r\n    }\r\n    state.currentQuestion = state.questionArray[0]\r\n    state.totalTime = state.currentQuestion.timelimit\r\n    return state\r\n}\r\n\r\n","import React, { CSSProperties } from 'react';\r\nimport { InputGroup, FormControl } from 'react-bootstrap';\r\nimport { Theme } from '../App';\r\nimport { Input, InputType } from '../logic/GameController';\r\nimport GameState, { ProgressState } from '../logic/GameState';\r\n\r\ntype propType = { \r\n    inputHandler : (arg0: Input) => void,\r\n    theme: Theme,\r\n    gameState: GameState\r\n}\r\n\r\n\r\n\r\nclass InputView extends React.Component<propType, {text: string}>{\r\n    inputField: React.RefObject<HTMLInputElement>;\r\n    canvasRef: React.RefObject<HTMLCanvasElement>;\r\n    timerInterval?: NodeJS.Timeout;\r\n    questionId: number = 0;\r\n    timeLimit: number = 0;\r\n    startTime: number = 0;\r\n    \r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            text: \"\",\r\n        }\r\n\r\n        this.inputField = React.createRef();\r\n        this.canvasRef = React.createRef();\r\n        this.drawArc = this.drawArc.bind(this);\r\n        this.handleChange = this.handleChange.bind(this)\r\n\r\n    }\r\n\r\n    drawArc(fraction: number) {\r\n        if (this.canvasRef.current === null) {\r\n            return\r\n        }\r\n\r\n        const canvas: any = this.canvasRef.current;\r\n        const context: any = this.canvasRef.current.getContext('2d');\r\n        context.strokeStyle = fraction < 0.75? 'green':'red'\r\n        \r\n        context.fillStyle = this.props.theme.background;\r\n        context.fillRect(0,0,48,48);\r\n        context.lineWidth = 3\r\n        context.translate(-0.5,-0.5);\r\n        let cx = canvas.width/2;\r\n        let cy = canvas.height/2;\r\n        context.beginPath();\r\n        context.arc(cx,cy, 16, 2* Math.PI * fraction - Math.PI /2, - Math.PI / 2);\r\n        context.stroke();\r\n\r\n        context.translate(0.5,0.5);\r\n\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.inputField.current?.focus();\r\n        \r\n    }\r\n    render() {\r\n        let inputStyle: CSSProperties = {\r\n            background: this.props.theme.background,\r\n            color: this.props.theme.textColor,\r\n        }\r\n    \r\n\r\n        \r\n        let progressState = this.props.gameState.progressState;\r\n        \r\n        let curQuestion = this.props.gameState.currentQuestion;\r\n        if (curQuestion !== undefined && curQuestion.id !== this.questionId) {\r\n\r\n            this.timerInterval && clearInterval(this.timerInterval);\r\n            \r\n            \r\n            this.questionId = curQuestion.id;\r\n            this.timeLimit = curQuestion.timelimit;\r\n            this.startTime = Date.now();\r\n            if (this.timeLimit !== 0) {\r\n                \r\n                this.timerInterval = setInterval(() => {\r\n                    if (this.props.gameState.progressState === ProgressState.PAUSED) {\r\n                        this.startTime += 16.67; // instead of stopping the interval\r\n                    }\r\n                    let elapsed =  Date.now() - this.startTime ;\r\n                    let fraction = elapsed / this.timeLimit \r\n                    \r\n                    if (fraction < 1) {\r\n                        this.drawArc(fraction);\r\n                    } else {\r\n                        this.timerInterval && clearInterval(this.timerInterval);\r\n                        this.props.inputHandler({type: InputType.ANSWER, payload: 1})\r\n                    }\r\n\r\n                }, 16.67);\r\n            }\r\n            this.forceUpdate();\r\n\r\n        }\r\n        let totalTime = curQuestion?.timelimit || 0;\r\n        let {gameState} = this.props;\r\n\r\n        let placeholder = '';\r\n        if (progressState === ProgressState.RUNNING) {\r\n            placeholder = 'Enter Answer'\r\n        } else if (progressState === ProgressState.PAUSED) {\r\n            placeholder = 'Game Paused'\r\n        }\r\n\r\n        return (\r\n            <div style={{display: 'flex', flexDirection: 'row'}}>\r\n                <InputGroup size=\"lg\" style = {inputStyle}>\r\n                    <FormControl onKeyDown = {this.handleKeyDown}\r\n                        style = {inputStyle}\r\n                        value = {this.state.text}\r\n                        onChange = {this.handleChange}\r\n                        placeholder={placeholder }\r\n                        ref = {this.inputField}\r\n                    />\r\n                </InputGroup>   \r\n                {totalTime !== 0 && gameState.progressState === ProgressState.RUNNING \r\n                && <canvas ref = {this.canvasRef} width = {48} height = {48}/>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    handleChange(e: any) {\r\n        if (this.props.gameState.progressState !== ProgressState.RUNNING) {\r\n            return\r\n        }\r\n        let inputText: string = e.target.value;\r\n        let lastChar = inputText.slice(-1);\r\n        if (inputText.length === 0 || (lastChar >= '0' && lastChar <= '9') || lastChar === 'e' || lastChar === '-' || lastChar === '+' || lastChar === '.') {\r\n            this.setState({text: inputText});\r\n        } \r\n    }\r\n\r\n    handleKeyDown = (e: React.KeyboardEvent) => {\r\n        if (e.key === 'Enter' && this.props.gameState.progressState === ProgressState.RUNNING) {\r\n            let parsed : number;\r\n            try {\r\n                parsed = parseFloat(this.state.text);\r\n            } catch (error) {\r\n                return\r\n            }\r\n            if (isNaN(parsed)) {\r\n                return\r\n            }\r\n           this.props.inputHandler({type: InputType.ANSWER, payload: parsed})\r\n           this.setState({text: ''})\r\n\r\n           if (this.props.gameState.currentIndex === this.props.gameState.numQuestions - 1) {\r\n           }\r\n        } else if (e.key === 'Enter' && this.props.gameState.progressState === ProgressState.POSTGAME) {\r\n            this.props.inputHandler({type: InputType.BUTTON, payload: 'replay'})\r\n        }\r\n    }\r\n}\r\n\r\nexport default InputView","import React from 'react';\r\nimport { Theme } from '../App';\r\nimport GameState, { ProgressState } from '../logic/GameState';\r\nimport Question from '../logic/Question';\r\n// @ts-ignore\r\nimport { Textfit } from 'react-textfit';\r\nimport TextView from '../questionViews/TextView';\r\n\r\ntype propType = {\r\n    question: Question | undefined,\r\n    theme: Theme\r\n    gameState: GameState\r\n}\r\n\r\nlet mainFontStyle = {\r\n    fontSize: 45,\r\n    textAlign: \"center\" as const,\r\n    minHeight: 100\r\n}\r\n\r\nlet altFontStyle = {\r\n    fontSize: 30,\r\n    textAlign: \"center\" as const,\r\n    minHeight: 100,\r\n    padding: 15\r\n}\r\n\r\n\r\n\r\nclass QuestionView extends React.Component<propType, any>{\r\n    \r\n\r\n\r\n    render() {\r\n\r\n        let progressState = this.props.gameState.progressState;\r\n\r\n        \r\n\r\n        \r\n\r\n\r\n        if (progressState === ProgressState.PAUSED) {\r\n            return (\r\n                <div style = {{...mainFontStyle, fontFamily: this.props.theme.questionFont}}>\r\n                    ---Paused---\r\n                </div>\r\n            )\r\n        } else if (progressState === ProgressState.POSTGAME) {\r\n            return (\r\n                <div style = {{...altFontStyle, fontFamily: this.props.theme.questionFont}}>\r\n                   {`Final Score: ${this.props.gameState.totalScore}`}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        if (this.props.question) {\r\n            return this.props.question?.view\r\n        } \r\n        return <TextView text= '---'/>\r\n    }\r\n}\r\n\r\nexport default QuestionView","import React, { CSSProperties } from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\n\r\n \r\ntype propType = {\r\n    recentScore: number,\r\n    totalScore: number,\r\n    recentGuess: number,\r\n    recentAnswer: number\r\n}\r\n\r\nclass ScoreView extends React.Component<propType, {}> {\r\n\r\n    render() {\r\n\r\n        let {recentGuess , recentAnswer} = this.props\r\n\r\n        let errorString = '';\r\n        let relError = Math.abs(Math.log10(recentAnswer) - Math.log10(recentGuess))\r\n        relError = Math.pow(10, relError);\r\n        \r\n        if (isNaN(relError)) {\r\n            relError = 1\r\n        } \r\n        \r\n\r\n        \r\n        if (relError < 1.5) {\r\n            relError = 100 * (relError - 1);\r\n            errorString = `Error: ${relError.toFixed(2)} %`\r\n        } else {\r\n            relError = Math.log10(relError)\r\n            errorString = `Error (log₁₀): ${relError.toFixed(2)}`\r\n        }\r\n\r\n        let isTinyScreen = window.innerWidth < 576\r\n        let errorStyle: CSSProperties = isTinyScreen ? {} : {float: \"right\"}\r\n        \r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <Row>\r\n                        <Col xs = {12} sm = {4}>\r\n                            <span >{`Score: ${this.props.totalScore} `}</span>\r\n                            <span>{`(+${this.props.recentScore})`}</span>\r\n                        </Col>\r\n                        <Col xs = {12} sm = {8}>\r\n                            <div style = {errorStyle}>\r\n                                <div>{`Guess: ${format(recentGuess)}, Answer: ${format(recentAnswer)}`}</div>\r\n                                <div>{errorString}</div>\r\n                            </div>\r\n                        </Col>\r\n\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet superscripts = \"⁰¹²³⁴⁵⁶⁷⁸⁹⁻\"\r\n\r\n\r\nfunction format(num: number, max:number  = 1e6, min:number = 1e-3): string {\r\n    if (num !== 0 && (num < min || num > max)) {\r\n        let exponent = Math.floor(Math.log10(num))\r\n        let mantissa = num / Math.pow(10, exponent);\r\n        let temp = exponent.toString();\r\n        let exponentStr = ''\r\n        for (let i = 0; i < temp.length; i++) {\r\n            if (temp[i] === '-') {\r\n                exponentStr += superscripts[10]\r\n            } else {\r\n                exponentStr += superscripts[parseInt(temp[i])]\r\n            }\r\n        }\r\n\r\n        return `${mantissa.toFixed(3)}×10${exponentStr}`\r\n        \r\n    }\r\n    let tmp =  num.toString();\r\n\r\n    // Remove floating imprecision\r\n\r\n    let i = tmp.length - 1;\r\n    let decimal = 0;\r\n    while (i >= 0 && tmp[i] != '.') {\r\n        i--;\r\n        decimal++;\r\n    }\r\n    if (i >= 0 && decimal > 6) {\r\n        tmp = num.toFixed(6)\r\n    }\r\n    if (tmp.length > 8) {\r\n        tmp = tmp.substring(0,8);\r\n    }\r\n    return tmp\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default ScoreView;","import React, { CSSProperties } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { Theme } from '../App';\r\nimport { Input, InputType } from '../logic/GameController';\r\nimport GameState, { ProgressState } from '../logic/GameState';\r\n\r\ntype propType = { \r\n    theme: Theme,\r\n    gameState: GameState,\r\n    inputHandler: (arg0: Input) => void,\r\n    width: number\r\n}\r\n\r\n\r\nclass GameInfoView extends React.Component<propType, any>{\r\n    render() {\r\n        let {theme, gameState, inputHandler} = this.props\r\n        let style: CSSProperties = {\r\n            fontFamily:  theme.headerFont,\r\n            fontSize: \"24px\",\r\n            marginTop: \"12px\",\r\n        }\r\n\r\n        let smallui = (this.props.width < 450)\r\n        \r\n        if (smallui) {\r\n            style.fontSize = \"18px\"\r\n        }\r\n\r\n        let progressString = `(${gameState.currentIndex + 1}/${gameState.numQuestions})`\r\n        let startButton = <Button \r\n            size = {smallui? 'sm': undefined}\r\n            variant = \"success\" \r\n            style = {{float: \"right\", fontFamily : theme.bodyFont}}\r\n            onClick = {() => {inputHandler({type: InputType.BUTTON, payload: 'start'})}\r\n        }>Start↵</Button>\r\n        \r\n        let replayButton = <Button \r\n            size = {smallui? 'sm': undefined}\r\n            variant = \"success\" \r\n            style = {{float: \"right\", fontFamily : theme.bodyFont}}\r\n            onClick = {() => {inputHandler({type: InputType.BUTTON, payload: 'replay'})}\r\n        }>Replay↵</Button>\r\n\r\n\r\n\r\n        return (\r\n            <div style = {style}>\r\n\r\n                <span>{gameState.category}</span>\r\n    \r\n                {gameState.progressState === ProgressState.PREGAME ? \r\n                    startButton :\r\n                gameState.progressState === ProgressState.POSTGAME ?\r\n                    replayButton:\r\n                    <span style = {{float: \"right\"}}>{progressString}</span>\r\n                }\r\n                <hr style = {{borderColor: theme.textColor  }}></hr>\r\n            </div>       \r\n        )\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default GameInfoView","import React, { CSSProperties } from \"react\";\r\nimport { Input, InputType } from \"../logic/GameController\";\r\nimport GameState, { ProgressState } from \"../logic/GameState\";\r\nimport { Button } from 'react-bootstrap'\r\n\r\ntype propType = {\r\n    inputHandler: (arg0: Input) => void\r\n    gameState: GameState\r\n}\r\n\r\nlet buttonStyle: CSSProperties = {\r\n    marginRight: 4\r\n}\r\n\r\nclass ButtonRow extends React.Component<propType, {}> {\r\n\r\n\r\n    constructor(props: propType) {\r\n        super(props);\r\n\r\n        this.pauseEvent = this.pauseEvent.bind(this);\r\n        this.resetEvent = this.resetEvent.bind(this);\r\n    }\r\n\r\n    render() {\r\n\r\n        let progressState = this.props.gameState.progressState\r\n        let paused = progressState === ProgressState.PAUSED\r\n\r\n        let runningButtons = \r\n        [\r\n            <Button variant=\"primary\" style={buttonStyle} key ={1} onClick={this.pauseEvent}><u>P</u>{paused? \"lay\" : \"ause\"}</Button>,\r\n            <Button variant=\"warning\" style={buttonStyle} key={2} onClick={this.resetEvent}><u>R</u>eset</Button>\r\n        ]\r\n        \r\n        let postgameButtons: HTMLElement[] = [] \r\n        // [\r\n        //     <Button variant=\"primary\" style={buttonStyle} onClick={this.replayEvent} key={1}>Replay ↵</Button>\r\n        // ]\r\n\r\n        return (\r\n            <div>\r\n                {progressState === ProgressState.POSTGAME ? postgameButtons:runningButtons }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    pauseEvent() {\r\n        this.props.inputHandler({type: InputType.BUTTON, payload: \"playpause\"})\r\n    }\r\n    \r\n    resetEvent() {\r\n        this.props.inputHandler({type: InputType.BUTTON, payload: \"reset\"})\r\n    }\r\n    \r\n}\r\n\r\nexport default ButtonRow","import { Input, InputType } from \"./GameController\";\r\nimport GameState, { ProgressState } from \"./GameState\";\r\n\r\nlet prev = 0;\r\n\r\nexport function decodeInput(e: KeyboardEvent, gameState: GameState) : Input | undefined {\r\n    if (e.timeStamp - prev < 0.1) {\r\n        return undefined\r\n    }\r\n\r\n    prev = e.timeStamp\r\n\r\n    let input: Input = {\r\n        type: InputType.BUTTON,\r\n        payload: ''\r\n    }\r\n\r\n    if (e.code === 'KeyR') {\r\n        input.payload = 'reset';\r\n        return input\r\n    }\r\n    if (e.code === 'KeyP') {\r\n        input.payload = 'playpause';\r\n        return input\r\n    }\r\n    if (e.code === 'Enter') {\r\n        if (gameState.progressState === ProgressState.PREGAME) {\r\n            input.payload = 'start'\r\n            return input\r\n        }  else if (gameState.progressState === ProgressState.RUNNING) {\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    return undefined\r\n}","import React from 'react';\r\nimport Question from '../logic/Question';\r\nimport InputView from './InputView';\r\nimport QuestionView from './QuestionView';\r\nimport ScoreView from './ScoreView';\r\nimport { Theme } from '../App'\r\nimport GameInfoView from './GameInfoView';\r\nimport ButtonRow from './ButtonRow';\r\nimport { Input } from '../logic/GameController';\r\nimport GameState from '../logic/GameState';\r\nimport {nextState } from '../logic/GameController'\r\nimport { decodeInput } from '../logic/KeyDecoder';\r\n\r\ntype propType = {\r\n    theme: Theme,\r\n    width: number\r\n}\r\n\r\ntype stateType = {\r\n    gameState: GameState\r\n}\r\n\r\n\r\n\r\nclass CenterView extends React.Component<propType, stateType>{\r\n    \r\n    \r\n    prevTimestamp: number = 0;\r\n\r\n    constructor(props: propType) {\r\n        super(props);\r\n\r\n\r\n        this.state = {\r\n            gameState: new GameState()\r\n        }\r\n\r\n        \r\n        this.handleInput = this.handleInput.bind(this);   \r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        this.handleInput = this.handleInput.bind(this);   \r\n        this.keyCapture  = this.keyCapture.bind(this);\r\n        \r\n        document.body.addEventListener('keydown', this.keyCapture)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.body.removeEventListener('keydown', this.keyCapture);\r\n    }\r\n\r\n    render() {\r\n        let gameState = this.state.gameState;\r\n        \r\n        return (\r\n            <div id='centerview'>\r\n                \r\n                <GameInfoView theme = {this.props.theme} gameState={gameState} inputHandler = {this.handleInput} width = {this.props.width}/> \r\n                <QuestionView question = {gameState.currentQuestion} theme ={this.props.theme} gameState={gameState}/>\r\n                <InputView inputHandler = {this.handleInput} theme = {this.props.theme} gameState={gameState}></InputView>\r\n                <ScoreView recentScore = {gameState.recentScore} totalScore = {gameState.totalScore}\r\n                        recentGuess = {gameState.recentGuess} recentAnswer = {gameState.recentAnswer}/>\r\n                <ButtonRow inputHandler = {this.handleInput} gameState={gameState}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    parentUpdate(gameState: GameState) {\r\n        this.setState({gameState})\r\n    }\r\n\r\n    handleInput(input: Input) {\r\n\r\n        let next = nextState(this.state.gameState, input, this.handleInput);\r\n        this.setState({gameState: next})\r\n    }\r\n\r\n    keyCapture(e: KeyboardEvent) {\r\n        \r\n        let inputEvent: Input | undefined = decodeInput(e, this.state.gameState);\r\n        if (inputEvent !== undefined) {\r\n            this.handleInput(inputEvent);\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n}\r\n\r\nexport default CenterView","import { genAngle, genCounting, genMul, genPerc } from \"./QGenerators\";\r\n\r\nlet modes: any = [\r\n    {\r\n        category: 'Multiplication',\r\n        numQuestions: 5,\r\n        generator: genMul,\r\n\r\n        levels: [\r\n            {\r\n                name: 'Easy',\r\n                config: {\r\n                    numOperands : {low: 2, high: 2},\r\n                    rangeCenter: 20000,\r\n                    rangeVariance: 2,\r\n                    operandVariance: 2,\r\n                    timeLimit: 0\r\n                }\r\n            },\r\n            {\r\n                name: 'Medium',\r\n                config: {\r\n                    numOperands : {low: 3, high: 3},\r\n                    rangeCenter: 100000,\r\n                    rangeVariance: 2,\r\n                    operandVariance: 2,\r\n                    timeLimit: 0\r\n                }\r\n            },\r\n            {\r\n                name: 'Hard',\r\n                config: {\r\n                    numOperands : {low: 4, high: 4},\r\n                    rangeCenter: 1000000,\r\n                    rangeVariance: 2,\r\n                    operandVariance: 2,\r\n                    timeLimit: 0\r\n                }\r\n            }\r\n        ],\r\n        times: [0, 10000, 30000]\r\n    },\r\n\r\n    {\r\n        category: 'Percentages',\r\n        numQuestions: 5,\r\n        generator: genPerc,\r\n\r\n        levels: [\r\n            {\r\n                name: 'Easy',\r\n                config: {\r\n                    numOperands : {low: 2, high: 3},\r\n                    operandRange: {low: 10, high: 99},\r\n                    timeLimit: 0,\r\n                    round: 5\r\n                }\r\n            },\r\n            {\r\n                name: 'Hard',\r\n                config: {\r\n                    numOperands : {low: 4, high: 4},\r\n                    operandRange: {low: 10, high: 99},\r\n                    timeLimit: 0,\r\n                    round: 1\r\n                }\r\n            }\r\n        ],\r\n        times: [0, 10000, 30000]\r\n    },\r\n\r\n    {\r\n        category: 'Angles',\r\n        numQuestions: 5,\r\n        generator: genAngle,\r\n\r\n        levels: [\r\n            {\r\n                name: 'Acute Only',\r\n                config: {\r\n                    minDeg: 1,\r\n                    maxDeg: 89,\r\n                    timeLimit: 0,\r\n            \r\n                }\r\n            },\r\n            {\r\n                name: 'Any',\r\n                config: {\r\n                    minDeg: 1,\r\n                    maxDeg: 359,\r\n                    timeLimit: 0,\r\n                }\r\n            }\r\n        ],\r\n        times: [0, 7000, 20000]\r\n    },\r\n    {\r\n        category: 'Counting (Static)',\r\n        numQuestions: 5,\r\n        generator: genCounting,\r\n\r\n        levels: [\r\n            {\r\n                name: '20 - 50',\r\n                config: {\r\n                    min: 20,\r\n                    max: 50,\r\n                    timeLimit: 0,\r\n                }\r\n            },\r\n            {\r\n                name: '50 - 100',\r\n                config: {\r\n                    min: 50,\r\n                    max: 100,\r\n                    timeLimit: 0,\r\n                }\r\n            },\r\n            {\r\n                name: '100 - 500',\r\n                config: {\r\n                    min: 100,\r\n                    max: 500,\r\n                    timeLimit: 0,\r\n                }\r\n            }\r\n        ],\r\n        times: [0, 7000, 20000]\r\n    }\r\n]\r\n\r\nexport default modes;","import React, { CSSProperties } from \"react\";\r\nimport { Button, ButtonGroup, ThemeProvider } from \"react-bootstrap\";\r\nimport { Theme } from \"../App\";\r\n\r\nimport modes from \"../logic/GameModes\"\r\n\r\ntype propType = {\r\n    theme: Theme,\r\n    updateHandler: any,\r\n    visible: boolean\r\n}\r\n\r\ntype stateType = {\r\n    outer: string,\r\n    level: string,\r\n    timeLimit: number\r\n}\r\n\r\nclass GamemodeSidebar extends React.Component<propType,stateType> {\r\n\r\n    constructor(props: propType) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            outer: 'Multiplication',\r\n            level: 'Easy',\r\n            timeLimit: 0\r\n        }\r\n\r\n        this.changeOuter = this.changeOuter.bind(this);\r\n        this.changeTimeLimit = this.changeTimeLimit.bind(this);\r\n        this.changeLevel = this.changeLevel.bind(this);\r\n        this.updateParent = this.updateParent.bind(this);\r\n        this.handleUpdate = this.handleUpdate.bind(this)\r\n    }\r\n    \r\n\r\n    render() {\r\n\r\n        if (!this.props.visible) {\r\n            return <div></div>\r\n        }\r\n\r\n        let sidebarStyle: CSSProperties = {\r\n            height: '100%',\r\n            width: '300px',\r\n            position: 'fixed',\r\n            zIndex: 10000,\r\n            top: 0,\r\n            right: 0,\r\n            overflowX: 'hidden',\r\n            backgroundColor: this.props.theme.primary,\r\n            \r\n            borderLeft: `3px solid ${this.props.theme.textColor}`,\r\n            // borderTop: `3px solid ${this.props.theme.textColor}`,\r\n        }\r\n        sidebarStyle.marginTop = document.getElementById('header')?.clientHeight\r\n\r\n        let headingStyle: CSSProperties = {\r\n            fontFamily: this.props.theme.headerFont,\r\n            fontSize: '20px',\r\n            margin: '3px'\r\n        }\r\n\r\n        let chosenOuter = modes[0];\r\n\r\n        let outerButtons = modes.map((e: any, i: any) => {\r\n            let isSelected = e.category === this.state.outer\r\n            \r\n            if (isSelected) {\r\n                chosenOuter = e\r\n            }\r\n\r\n            return <Button \r\n                key = {i}\r\n                style = {{margin: '2px'}}\r\n                variant={isSelected ? 'warning' : 'primary'}\r\n                onClick={() => this.changeOuter(e.category)}    \r\n            >{e.category}</Button>\r\n        })\r\n\r\n        let timeButtons = chosenOuter.times.map((e: any ,i: any) => {\r\n            let isSelected = e === this.state.timeLimit\r\n            \r\n            let timerText = e > 0? (e/1000).toFixed(0) + ' s' : 'Unlimited'\r\n\r\n            return <Button \r\n            \r\n                key = {i}\r\n                style = {{margin: '2px'}}\r\n                variant={isSelected ? 'warning' : 'primary'}\r\n                onClick={() => this.changeTimeLimit(e)}    \r\n            >{timerText}</Button>\r\n        })\r\n\r\n        let levelButtons = chosenOuter.levels.map((e: any,i: any) => {\r\n            let isSelected = e.name === this.state.level\r\n            \r\n\r\n            return <Button \r\n                key = {i}\r\n                 style = {{margin: '2px'}}\r\n                variant={isSelected ? 'warning' : 'primary'}\r\n                onClick={() => this.changeLevel(e.name)}    \r\n            >{e.name}</Button>\r\n        })\r\n\r\n\r\n        return (\r\n\r\n            <div style= {sidebarStyle}>\r\n                <div style={{...headingStyle, fontSize: '24px'}}>Gamemode Settings</div>\r\n\r\n                <div style={headingStyle}>Time Limit</div> \r\n                {timeButtons}\r\n\r\n                <div style={headingStyle}>Difficulty</div> \r\n                {levelButtons}\r\n\r\n                <div style={headingStyle}>Category</div> \r\n                <ButtonGroup vertical>\r\n                    {outerButtons}\r\n                </ButtonGroup>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    changeOuter(newCategory: string) {\r\n        if (this.state.outer === newCategory) {\r\n            return\r\n        }\r\n\r\n        let outerObj:any = {};\r\n\r\n        for (let i = 0; i < modes.length; i++) {\r\n            if (modes[i].category === newCategory) {\r\n                outerObj = modes[i];\r\n            }\r\n        }\r\n\r\n        let newTime = outerObj.times[0]\r\n        let newLevel = outerObj.levels[0].name;\r\n\r\n\r\n        this.setState({outer: newCategory, timeLimit: newTime, level: newLevel}, this.updateParent)\r\n    }\r\n\r\n    changeTimeLimit(newLimit: number) {\r\n        if (this.state.timeLimit === newLimit) {\r\n            return\r\n        }\r\n        this.setState({timeLimit: newLimit}, this.updateParent)\r\n    }\r\n\r\n    changeLevel(newLevel: string) {\r\n        if (this.state.level === newLevel) {\r\n            return\r\n        }\r\n        this.setState({level: newLevel}, this.updateParent)\r\n    }\r\n\r\n    //category: string, numQ: number, generator: any, config: any\r\n    updateParent() {\r\n\r\n        let outerObj: any = {};\r\n        for (let i = 0; i < modes.length; i++) {\r\n            if (modes[i].category === this.state.outer) {\r\n                outerObj = modes[i];\r\n            }\r\n        }\r\n\r\n        let category = `${this.state.outer} (${this.state.level})`;\r\n        let numQ = outerObj.numQuestions;\r\n        let generator = outerObj.generator;        \r\n        let config: any = {}\r\n        for (let l of outerObj.levels) {\r\n            if (l.name === this.state.level) {\r\n                config = l.config;\r\n            }\r\n        }\r\n\r\n        config.timeLimit = this.state.timeLimit;\r\n\r\n        this.props.updateHandler(category, numQ, generator, config)\r\n    }\r\n\r\n    handleUpdate(outer: string) {\r\n        let outerObj: any = {};\r\n        for (let i = 0; i < modes.length; i++) {\r\n            if (`${modes[i].category} (${modes[i].levels[0].name})` === outer) {\r\n                outerObj = modes[i];\r\n            }\r\n        }\r\n        outer = outerObj.category\r\n        let level = outerObj.levels[0].name;\r\n        let timeLimit = outerObj.times[0]\r\n        this.setState({outer, level, timeLimit}) \r\n    }\r\n    \r\n}\r\n\r\nexport default GamemodeSidebar","import React, { CSSProperties } from \"react\"\r\nimport { Theme } from \"../App\"\r\n\r\n\r\ntype propType = {\r\n    theme: Theme,\r\n    sidebarHandler: (arg0: string) => void,\r\n    width: number\r\n}\r\n\r\n\r\nclass HeaderView extends React.Component<propType,{}> {\r\n    render() {\r\n        \r\n        let headerStyle: CSSProperties = {\r\n            background: this.props.theme.primary,\r\n            width: \"wrap-content\",\r\n            textAlign: 'center',\r\n            fontFamily: this.props.theme.headerFont,\r\n            fontSize: \"30px\",\r\n            color: this.props.theme.textColor,\r\n        }\r\n\r\n        let iconStyle: CSSProperties = {\r\n            height: '100%',\r\n            margin: '6px',\r\n        }\r\n\r\n        if (this.props.width < 400) headerStyle.fontSize = \"24px\"\r\n        return (\r\n            \r\n            <div style = {headerStyle} id = 'header'>\r\n             \r\n                <span style={{ ...headerStyle, display:'inline-block'}}>\r\n                    The Estimation Game\r\n                </span>\r\n                <i \r\n                    className=\"fas fa-cog\" \r\n                    style={{ ...iconStyle ,float: 'left'}}\r\n                    onClick = {() => this.props.sidebarHandler('left')}\r\n                />\r\n                <i \r\n                    className=\"fas fa-dice\" \r\n                    style={{...iconStyle ,float: 'right'}}\r\n                    onClick = {() => this.props.sidebarHandler('right')}\r\n                \r\n                />\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default HeaderView","import React from \"react\";\r\nimport { Theme } from \"../App\";\r\nimport Question from \"../logic/Question\";\r\n\r\n\r\nimport modes from \"../logic/GameModes\"\r\nimport { Button, ButtonGroup } from \"react-bootstrap\";\r\n\r\n\r\ntype propType = {\r\n    theme: Theme,\r\n    updateHandler: any\r\n\r\n}\r\n\r\nclass WelcomePage extends React.Component<propType, {}> {\r\n\r\n    constructor(props: propType) {\r\n        super(props) \r\n            \r\n        this.updateParent = this.updateParent.bind(this)\r\n        \r\n    }\r\n\r\n    render() {\r\n\r\n        let {theme, updateHandler} = this.props\r\n\r\n        let outerButtons = modes.map((e: any, i: any) => {\r\n            \r\n\r\n            return <Button \r\n                key = {i}\r\n                style = {{margin: '2px'}}\r\n                variant='primary'\r\n                onClick={() => this.updateParent(e.category)}    \r\n            >{e.category}</Button>\r\n        })\r\n\r\n        return (<div id='welcomediv'>\r\n            <div style={{fontSize: '24px', fontFamily: theme.bodyFont, textAlign: 'center', padding: '10px'}}>\r\n                Quick Play\r\n            </div>\r\n            \r\n            <ButtonGroup vertical style={{width: '100%'}}>\r\n                {outerButtons}\r\n            </ButtonGroup>\r\n           \r\n        </div>)\r\n    }\r\n\r\n    updateParent(outer: string) {\r\n\r\n        let outerObj: any = {};\r\n        for (let i = 0; i < modes.length; i++) {\r\n            if (modes[i].category === outer) {\r\n                outerObj = modes[i];\r\n            }\r\n        }\r\n        let level = outerObj.levels[0].name\r\n\r\n        let category = `${outer} (${level})`;\r\n        let numQ = outerObj.numQuestions;\r\n        let generator = outerObj.generator;        \r\n        let config: any = {}\r\n        for (let l of outerObj.levels) {\r\n            if (l.name === level) {\r\n                config = l.config;\r\n            }\r\n        }\r\n\r\n        config.timeLimit = outerObj.times[0];\r\n\r\n        this.props.updateHandler(category, numQ, generator, config, true)\r\n    }\r\n}\r\n\r\nexport default WelcomePage","import React, { CSSProperties } from 'react';\r\nimport { Container, Row, Col} from 'react-bootstrap';\r\nimport './App.css';\r\nimport { genMul } from './logic/QGenerators';\r\nimport Question from './logic/Question';\r\nimport CenterView from './view/CenterView';\r\nimport GamemodeSidebar from './view/GamemodeSidebar';\r\nimport HeaderView from './view/HeaderView';\r\nimport modes from './logic/GameModes'\r\nimport GameState from './logic/GameState';\r\nimport WelcomePage from './view/WelcomePage';\r\nimport TextView from './questionViews/TextView';\r\nimport AngleView from './questionViews/AngleView';\r\nimport CountingStaticView from './questionViews/CountingStaticView';\r\nimport { Recoverable } from 'repl';\r\n\r\nlet generator: (arg0: any) => Question = genMul;\r\ntype stateType = {\r\n\twidth: number,\r\n\theight: number,\r\n\tleftBar: boolean,\r\n\trightBar: boolean,\r\n\twelcomePage: boolean\r\n}\r\n\r\nexport type Theme = {\r\n\tbackground: string,\r\n\tprimary: string,\r\n\tsecondary: string,\r\n\ttextColor: string,\r\n\tquestionFont: string, \r\n\theaderFont: string,\r\n\tbodyFont: string\r\n}\r\n\r\nlet theme: Theme = {\r\n\tbackground: \"#222831\",\r\n\tprimary: \"#30475e\",\r\n\tsecondary: \"#ffc107\",\r\n\ttextColor: \"#eeeeee\",\r\n\tquestionFont: \"Roboto Mono\",\r\n\theaderFont: \"Concert One\",\r\n\tbodyFont: \"Noto Sans\"\r\n}\r\n\r\nlet appStyle: CSSProperties = {\r\n\tbackground: theme.background,\r\n\tminHeight: \"100vh\",\r\n\tcolor: theme.textColor,\r\n\tfontFamily: theme.bodyFont\r\n}\r\n\r\n\r\nlet previewQuestions: any = [\r\n\t<TextView text = {'12 * 34'}/>,\r\n\t<TextView text = {'60% * 35% * 12%'}/>,\r\n\t<AngleView angle = {Math.PI / 3}/>,\r\n\t<CountingStaticView num = {25} shape = {'circle'}/>\r\n]\r\n\r\nlet categories = ['Multiplication' , 'Percentages', 'Angles' , 'Counting']\r\n\r\n\r\n\r\nclass App extends React.Component<any,stateType> {\r\n\r\n\tcenterRef: React.RefObject<CenterView>\r\n\tsidebarRef: React.RefObject<GamemodeSidebar>\r\n\r\n\tconstructor(props: any) {\r\n\t\tsuper(props)\r\n\t\t\r\n\t\tthis.state = {\r\n\t\t\twidth: window.innerWidth,\r\n\t\t\theight: window.innerHeight,\r\n\t\t\trightBar: false,\r\n\t\t\tleftBar: false,\r\n\t\t\twelcomePage: true\r\n\t\t}\r\n\t\twindow.addEventListener('resize', (ev: any)=> {\r\n\t\t\tthis.setState({\r\n\t\t\t\theight: ev.currentTarget.innerHeight,\r\n\t\t\t\twidth: ev.currentTarget.innerWidth\r\n\t\t\t})\r\n\t\t})\r\n\t\tthis.sidebarHandler = this.sidebarHandler.bind(this)\r\n\t\tthis.centerRef = React.createRef()\r\n\t\tthis.sidebarRef = React.createRef()\r\n\t\tthis.updateGamemode = this.updateGamemode.bind(this)\r\n\t}\r\n\r\n\t\r\n\t\r\n\trender() {\r\n    \treturn (\r\n\t\t\t<div style = {appStyle}>\r\n\t\t\t\t<HeaderView theme = {theme} sidebarHandler = {this.sidebarHandler} width = {this.state.width} />\r\n\t\t\t\t{this.state.welcomePage && <div style={{right: 5, position: 'fixed'}}> View all modes ↑ </div>}\r\n\t\t\t\t{this.state.welcomePage && <div style={{left: 5, position: 'fixed'}}> ↑ Settings </div>}\r\n\t\t\t\t{this.state.welcomePage && <br/>}\r\n\t\t\t\t<Container>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col lg={2} md={1} xs = {0}>\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col lg={8} md={10} xs = {12}>\r\n\t\t\t\t\t\t\t{this.state.welcomePage? \r\n\t\t\t\t\t\t\t\t<WelcomePage theme = {theme} updateHandler = {this.updateGamemode}/> : \r\n\t\t\t\t\t\t\t\t<CenterView theme = {theme} ref = {this.centerRef} width = {this.state.width}></CenterView>\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col lg ={2} md = {1} xs = {0} >\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t</Container>\r\n\r\n\t\t\t\t <GamemodeSidebar ref = {this.sidebarRef} theme = {theme} updateHandler = {this.updateGamemode} visible = {this.state.rightBar} />\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n\t\r\n  \t}\r\n  \r\n\tsidebarHandler(side: string) {\r\n\t\tif (side === 'right') {\r\n\t\t\tthis.setState(({rightBar}) => ({\r\n\t\t\t\trightBar: !rightBar,\r\n\t\t\t\tleftBar: false\r\n\t\t\t}))\r\n\t\t} else if (side === 'left') {\r\n\t\t\tthis.setState({\r\n\t\t\t\tleftBar: true,\r\n\t\t\t\trightBar: false\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tupdateGamemode(category: string, numQ: number, generator: any, config: any, fromWelcomePage = false) {\r\n\t\tif (this.state.welcomePage) {\r\n\t\t\tthis.setState({welcomePage: false}, \r\n\t\t\t() => {\r\n\t\t\t\tif (fromWelcomePage) {\r\n\t\t\t\t\tthis.sidebarRef.current?.handleUpdate(category)\r\n\t\t\t\t}\t\r\n\t\t\t\tthis.updateGamemode(category, numQ, generator, config)\r\n\t\t\t})\r\n\t\t} \r\n\t\tlet gameState = new GameState();\r\n\t\tgameState.category = category;\r\n\t\tgameState.numQuestions = numQ;\r\n\t\tgameState.generator = generator;\r\n\t\tgameState.generatorconfig =config;\r\n\t\tthis.centerRef.current?.parentUpdate(gameState)\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}