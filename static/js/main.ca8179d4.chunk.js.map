{"version":3,"sources":["questionViews/AngleView.tsx","questionViews/AreaView.tsx","questionViews/CountingMovingView.tsx","questionViews/CountingStaticView.tsx","questionViews/LengthView.tsx","questionViews/TextView.tsx","logic/Question.tsx","logic/QGenerators.tsx","logic/GameState.tsx","logic/GameController.tsx","view/InputView.tsx","view/QuestionView.tsx","view/ScoreView.tsx","view/GameInfoView.tsx","view/ButtonRow.tsx","logic/KeyDecoder.tsx","view/CenterView.tsx","logic/GameModes.ts","view/GamemodeSidebar.tsx","view/HeaderView.tsx","view/WelcomePage.tsx","view/SettingsSidebar.tsx","App.tsx","index.tsx"],"names":["AngleView","props","canvasRef","width","height","state","remUpdates","React","createRef","update","bind","this","document","getElementById","clientWidth","ctx","current","getContext","cx","cy","angle","Math","PI","fillStyle","fillRect","strokeStyle","lineWidth","beginPath","radius","innerRad","moveTo","lineTo","x","cos","y","sin","arc","stroke","ref","setState","setTimeout","Component","convexHull","require","pt","polygon","rng","low","high","random","centerPoly","pts","center","centroid","offsetX","offsetY","map","e","AreaView","drawCircle","drawPoly","ratio","shape","r1","r2","sqrt","tmp","x1","x2","closePath","textSize","max","font","textAlign","fillText","segW","segH","poly","limX","limY","numPts","i","push","randomPolygon","area","r","scale","f","scalePoly","length","y2","p","w","h","dx","dy","CountingMovingView","animtaionId","particles","updatePositions","generateParticles","num","cancelAnimationFrame","requestAnimationFrame","fill","rngInt","floor","CountingStaticView","gridW","gridH","filled","Array","cnt","drawFunction","drawSquare","c","cellsize","gridsize","dist","y1","LengthView","parallel","path","singleLines","semiH","l1","l2","poltLines","pathLen","lineLen","swap","len1","len2","TextView","fontStyle","fontSize","minHeight","mode","style","fontFamily","text","defaultScorer","guess","actual","Question","view","answer","scorer","timelimit","id","logRng","mid","variance","pow","genMul","config","numOperands","rangeCenter","rangeVariance","operandVariance","timeLimit","numOp","result","operands","nextOperand","round","sort","a","b","reduce","acc","cur","questionString","forEach","element","slice","fraction","ProgressState","InputType","defaultConfig","GameState","generator","questionArray","currentQuestion","category","numQuestions","currentIndex","recentScore","totalScore","recentGuess","recentAnswer","progressState","PREGAME","generatorconfig","totalTime","storageKey","ls","initialState","InputView","inputField","timerInterval","questionId","startTime","handleKeyDown","key","gameState","RUNNING","parsed","parseFloat","error","isNaN","inputHandler","type","ANSWER","payload","POSTGAME","BUTTON","drawArc","handleChange","canvas","context","theme","background","translate","focus","inputStyle","color","textColor","curQuestion","undefined","clearInterval","Date","now","setInterval","PAUSED","toValidAnswer","forceUpdate","placeholder","display","flexDirection","InputGroup","size","FormControl","onKeyDown","value","onChange","autoComplete","inputText","target","lastChar","mainFontStyle","altFontStyle","padding","QuestionView","questionFont","question","ScoreView","errorString","relError","abs","log10","toFixed","isTinyScreen","window","innerWidth","errorStyle","float","textStyle","highscores","highscore","Container","Row","Col","xs","sm","format","superscripts","min","exponent","mantissa","temp","toString","exponentStr","parseInt","decimal","substring","GameInfoView","headerFont","marginTop","smallui","progressString","startButton","Button","variant","bodyFont","onClick","replayButton","borderColor","buttonStyle","marginRight","ButtonRow","pauseEvent","resetEvent","paused","runningButtons","prev","CenterView","prevTimestamp","handleInput","keyCapture","body","addEventListener","removeEventListener","input","next","callback","score","scores","nextState","inputEvent","timeStamp","code","decodeInput","modes","levels","name","times","operandRange","minDeg","maxDeg","resultRad","GamemodeSidebar","outer","level","changeOuter","changeTimeLimit","changeLevel","updateParent","handleUpdate","visible","sidebarStyle","position","zIndex","top","right","overflowX","backgroundColor","primary","borderLeft","clientHeight","headingStyle","margin","chosenOuter","outerButtons","isSelected","timeButtons","timerText","levelButtons","ButtonGroup","vertical","newCategory","outerObj","newTime","newLevel","newLimit","numQ","l","updateHandler","HeaderView","headerStyle","iconStyle","className","sidebarHandler","WelcomePage","SettingsSidebar","left","borderRight","handleDelete","confirm","remove","secondary","appStyle","App","centerRef","sidebarRef","innerHeight","rightBar","leftBar","welcomePage","ev","currentTarget","updateGamemode","lg","md","side","fromWelcomePage","parentUpdate","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ca8179d4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Theme } from \"../App\";\r\n\r\ntype stateType = {\r\n    remUpdates: number,\r\n\r\n}\r\n\r\ntype propType = {angle: number}\r\n\r\nclass AngleView extends React.Component<propType, stateType> {\r\n    \r\n\r\n    canvasRef: React.RefObject<HTMLCanvasElement>\r\n    width: number = 300\r\n    height: number = 300\r\n    constructor(props: propType) {\r\n        super(props)\r\n        this.state = {\r\n            remUpdates: 1\r\n        }\r\n        this.canvasRef = React.createRef();\r\n        this.update = this.update.bind(this);\r\n    }\r\n    \r\n\r\n    render() {\r\n\r\n       \r\n        this.width = document.getElementById('centerview')?.clientWidth || 300;\r\n        this.height = this.width * 0.45;\r\n        let ctx = this.canvasRef.current?.getContext('2d')\r\n        let cx = this.width / 2\r\n        let cy = this.props.angle < Math.PI ? this.height * 0.9 : this.height * 0.2\r\n        if (ctx) {\r\n\r\n            ctx.fillStyle = '#222831'\r\n            ctx.fillRect(0,0,this.width, this.height)\r\n\r\n            ctx.strokeStyle = '#eeeeee'\r\n            ctx.lineWidth = this.width /150\r\n            ctx.beginPath()\r\n            let radius = this.width * 0.35\r\n            let innerRad = radius * 0.2\r\n            ctx.moveTo(cx,cy)\r\n            ctx.lineTo(cx + radius, cy)\r\n            ctx.moveTo(cx,cy);\r\n\r\n            let x = radius * Math.cos(this.props.angle)\r\n            let y = radius * Math.sin(this.props.angle)\r\n\r\n            ctx.lineTo(cx + x , cy - y)\r\n\r\n\r\n            ctx.moveTo(cx,cy)\r\n            \r\n            ctx.arc(cx,cy, innerRad, -this.props.angle , 0)\r\n\r\n            ctx.stroke()\r\n        }\r\n\r\n        this.update();\r\n\r\n\r\n\r\n        return <canvas width = {this.width} height = {this.height} ref = {this.canvasRef}/>\r\n    }\r\n\r\n\r\n\r\n    update() {\r\n        if (this.state.remUpdates <= 0) {\r\n            return\r\n        }\r\n        \r\n        this.setState((state) => ({remUpdates: state.remUpdates - 1}));\r\n        setTimeout(this.update, 16.67);\r\n    }\r\n}\r\n\r\nexport default AngleView","import React from \"react\";\r\nvar convexHull = require('graham-scan-convex-hull');\r\nvar PolygonTools = require('polygon-tools')\r\nvar pt = PolygonTools.polygon\r\n\r\ntype stateType = {\r\n    remUpdates: number\r\n}\r\n\r\ntype propType = {\r\n    ratio: number,\r\n    shape: string\r\n}\r\n\r\nclass AreaView extends React.Component<propType, stateType> {\r\n    \r\n\r\n    canvasRef: React.RefObject<HTMLCanvasElement>\r\n    width: number = 300\r\n    height: number = 300\r\n    constructor(props: propType) {\r\n        super(props)\r\n        this.state = {\r\n            remUpdates: 1\r\n        }\r\n        this.canvasRef = React.createRef();\r\n        this.update = this.update.bind(this);\r\n        this.drawCircle = this.drawCircle.bind(this)\r\n        this.drawPoly = this.drawPoly.bind(this)\r\n    }\r\n    \r\n\r\n    render() {\r\n\r\n        let  {ratio, shape} = this.props\r\n\r\n        this.width = document.getElementById('centerview')?.clientWidth || 300;\r\n        this.height = this.width * 0.45;\r\n        let ctx = this.canvasRef.current?.getContext('2d')\r\n        if (ctx) {\r\n            ctx.fillStyle = '#222831'\r\n            ctx.fillRect(0,0,this.width, this.height)\r\n\r\n            ctx.lineWidth = this.width / 200\r\n            if (shape === 'circle') {\r\n                this.drawCircle(ctx, ratio)\r\n            } else if (shape === 'polygon') {\r\n                this.drawPoly(ctx, ratio)\r\n            }\r\n        }\r\n\r\n        this.update();\r\n\r\n\r\n\r\n        return <canvas width = {this.width} height = {this.height} ref = {this.canvasRef}/>\r\n    }\r\n    \r\n    \r\n    drawCircle(ctx: CanvasRenderingContext2D, ratio: number) {\r\n        let side = this.height;\r\n        \r\n        let r1 = side * 0.45\r\n        let r2 = r1 * Math.sqrt(ratio)\r\n        \r\n        if (r2 > r1) {\r\n            let tmp = r1\r\n            r1 = r1 * r1 / r2\r\n            r2 = tmp\r\n        }\r\n        \r\n        let x1 = this.width / 4\r\n        let x2 = this.width * 0.75\r\n        let y = this.height / 2\r\n        \r\n        ctx.beginPath()\r\n        ctx.strokeStyle = '#eeeeee'\r\n        ctx.arc(x1,y,r1, 0, 2* Math.PI)\r\n        ctx.stroke()\r\n        ctx.closePath()\r\n        \r\n        let textSize = r1 / 2 \r\n        textSize = Math.max(textSize, 20)\r\n        \r\n        ctx.font = `${textSize}px Roboto Mono`;\r\n        ctx.fillStyle = \"#eeeeee\";\r\n        ctx.textAlign = \"center\";\r\n        ctx.fillText(\"1\", x1, y + textSize /3 + (textSize > r1*2 ? r1 * 3 : 0) );\r\n        \r\n        ctx.beginPath()\r\n        ctx.strokeStyle = '#ffc107'\r\n        ctx.arc(x2,y,r2, 0, 2* Math.PI)\r\n        ctx.stroke()\r\n        ctx.closePath()\r\n        \r\n        textSize = r2 / 2\r\n        textSize = Math.max(textSize, 20)\r\n        \r\n        \r\n        \r\n        ctx.font = `${textSize}px Roboto Mono`;\r\n        ctx.fillStyle = \"#ffc107\";\r\n        ctx.textAlign = \"center\";\r\n        ctx.fillText(\"?\", x2, y + textSize /3 + (textSize > r2*2 ? r2 * 3 : 0) );\r\n    }\r\n    drawPoly(ctx: CanvasRenderingContext2D, ratio: number) {\r\n        \r\n        let segW = this.width / 2\r\n        let segH = this.height\r\n\r\n        let poly = randomPolygon(segW, segH)\r\n        let area = pt.area(poly)\r\n        let r = Math.sqrt(area/(ratio * Math.PI))\r\n        if (2*r > segH) {\r\n            let scale = segH / (2*r) * 0.95\r\n            r = segH * 0.95 / 2\r\n            poly = scalePoly(poly, scale)\r\n        }\r\n\r\n        if (ratio < 1) {\r\n            poly = centerPoly(poly, segW * 1.5, segH / 2)\r\n        } else {\r\n            let [x,y] = pt.centroid(poly)\r\n            poly = centerPoly(poly, x + segW, y)\r\n        }\r\n\r\n        area = pt.area(poly)\r\n\r\n        let x1 = segW / 2\r\n        let y = segH / 2\r\n    \r\n\r\n        ctx.beginPath()\r\n        ctx.strokeStyle = '#eeeeee'\r\n        ctx.arc(x1,y,r, 0, 2* Math.PI)\r\n        ctx.stroke()\r\n        ctx.closePath()\r\n        \r\n        let textSize = r / 2 \r\n        textSize = Math.max(textSize, 20)\r\n        \r\n        ctx.font = `${textSize}px Roboto Mono`;\r\n        ctx.fillStyle = \"#eeeeee\";\r\n        ctx.textAlign = \"center\";\r\n        ctx.fillText(\"1\", x1, y + textSize /3 + (textSize > r*2 ? r * 3 : 0) );\r\n\r\n        ctx.beginPath()\r\n        ctx.strokeStyle = '#ffc107'\r\n        ctx.moveTo(poly[0][0], poly[0][1])\r\n        for (let i = 1; i < poly.length; i++) {\r\n            ctx.lineTo(poly[i][0], poly[i][1])\r\n        }\r\n        ctx.lineTo(poly[0][0], poly[0][1])\r\n        ctx.closePath()\r\n        \r\n        ctx.stroke()\r\n\r\n        textSize = 20\r\n        let [x2,y2] = pt.centroid(poly)\r\n        \r\n        ctx.font = `${textSize}px Roboto Mono`;\r\n        ctx.fillStyle = \"#ffc107\";\r\n        ctx.textAlign = \"center\";\r\n        ctx.fillText(\"?\", x2, y2 + textSize /3 );\r\n\r\n\r\n        \r\n    }\r\n    \r\n    update() {\r\n        if (this.state.remUpdates <= 0) {\r\n            return\r\n        }\r\n        \r\n        this.setState((state) => ({remUpdates: state.remUpdates - 1}));\r\n        setTimeout(this.update, 16.67);\r\n    }\r\n}\r\n\r\nfunction rng(low: number, high: number) : number {\r\n    return low + Math.random() * (high - low);\r\n}\r\n\r\nfunction randomPolygon(limX: number, limY: number, numPts = 10): number[][] {\r\n    let pts = []\r\n    for (let i = 0; i < numPts; i++) {\r\n        pts.push([rng(0, limX), rng(0,limY)])\r\n    }\r\n    pts = convexHull(pts)\r\n    return pts\r\n}   \r\nfunction scalePoly(pts: number[][] , scale: number): number[][] {\r\n    return pts.map(e => e.map(f => f*scale))\r\n}\r\n\r\nfunction centerPoly(pts: number[][] , x: number, y: number): number[][] {\r\n\r\n    let center = pt.centroid(pts)\r\n    let offsetX = x - center[0];\r\n    let offsetY = y -  center[1] \r\n\r\n    return pts.map(e => [e[0] + offsetX, e[1] + offsetY])\r\n\r\n}\r\n\r\nexport default AreaView","import React from \"react\";\r\nimport { Theme } from \"../App\";\r\n\r\n\r\ntype propType = {num: number, width?: number}\r\n\r\nfunction rngInt(low: number, high: number) : number {\r\n    return low + Math.floor(Math.random() * (high - low + 0.99999));\r\n}\r\n\r\ntype Pos = {\r\n    x: number,\r\n    y: number,\r\n    dx: number,\r\n    dy: number,\r\n}\r\n\r\nfunction update(p: Pos, w: number, h: number): Pos {\r\n    let {x,y,dx,dy} = p\r\n    if (x + dx < 0 || x + dx > w) dx = -dx\r\n    if (y + dy < 0 || y + dy > h) dy = -dy\r\n    x += dx\r\n    y += dy\r\n    return {x,y,dx,dy}\r\n}\r\n\r\nclass CountingMovingView extends React.Component<propType, {}> {\r\n    \r\n    animtaionId: number = 0\r\n\r\n    canvasRef: React.RefObject<HTMLCanvasElement>\r\n    ctx: CanvasRenderingContext2D | null | undefined = null\r\n    width: number = 300\r\n    height: number = 300\r\n    particles: Pos[] = []\r\n    constructor(props: propType) {\r\n        super(props)\r\n        this.canvasRef = React.createRef();\r\n        this.updatePositions = this.updatePositions.bind(this);\r\n        this.generateParticles = this.generateParticles.bind(this)\r\n        \r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let {num} = this.props\r\n        \r\n        this.width = this.props.width || document.getElementById('centerview')?.clientWidth || 300;\r\n        this.height = this.width * 0.40;\r\n        this.ctx = this.canvasRef.current?.getContext('2d')\r\n\r\n        if (this.particles.length !== num) {\r\n            this.generateParticles(num)\r\n        }\r\n\r\n        cancelAnimationFrame(this.animtaionId)\r\n\r\n        this.updatePositions()\r\n\r\n\r\n        return <canvas width = {this.width} height = {this.height} ref = {this.canvasRef}/>\r\n    }\r\n\r\n    updatePositions() {\r\n        let {num} = this.props\r\n        if (this.particles.length !== num) {\r\n            this.generateParticles(this.props.num)\r\n        }\r\n\r\n        let r = this.props.num <= 80 ? 7 : 4\r\n        if (!this.ctx) {\r\n            this.ctx = this.canvasRef.current?.getContext('2d')\r\n        }\r\n        let ctx = this.ctx\r\n\r\n        if (ctx) {\r\n\r\n            ctx.fillStyle = '#222831'\r\n            ctx.fillRect(0,0,this.width, this.height)\r\n\r\n            ctx.fillStyle = '#eeeeee'\r\n\r\n            for (let i = 0; i < this.props.num; i++) {\r\n                this.drawCircle(ctx, this.particles[i].x, this.particles[i].y, r)\r\n                this.particles[i] = update(this.particles[i], this.width, this.height)\r\n            }\r\n\r\n\r\n        }\r\n        this.animtaionId = requestAnimationFrame(this.updatePositions)\r\n    }\r\n\r\n    drawCircle(ctx: CanvasRenderingContext2D , x: number, y: number, r: number) {\r\n       \r\n        \r\n\r\n        ctx.beginPath()\r\n        ctx.arc(x,y,r, 0, 2* Math.PI)\r\n        ctx.fill()\r\n        ctx.closePath()\r\n\r\n    }\r\n\r\n    generateParticles(num: number) {\r\n        this.particles = []\r\n        for (let i = 0; i < num; i++) {\r\n            let x = rng(0, this.width)\r\n            let y = rng(0, this.height)\r\n            let dx = rng(-5,5)\r\n            let dy = rng(-5,5)\r\n            this.particles.push({x,y,dx,dy})\r\n        }\r\n    }\r\n}\r\n\r\nfunction rng(low: number, high: number) : number {\r\n    return low + Math.random() * (high - low);\r\n}\r\n\r\nexport default CountingMovingView","import React from \"react\";\r\nimport { Theme } from \"../App\";\r\n\r\ntype stateType = {\r\n    remUpdates: number\r\n}\r\n\r\ntype propType = {num: number, shape: string, width?: number}\r\n\r\nfunction rngInt(low: number, high: number) : number {\r\n    return low + Math.floor(Math.random() * (high - low + 0.99999));\r\n}\r\n\r\n\r\nclass CountingStaticView extends React.Component<propType, stateType> {\r\n    \r\n    canvasRef: React.RefObject<HTMLCanvasElement>\r\n    width: number = 300\r\n    height: number = 300\r\n    constructor(props: propType) {\r\n        super(props)\r\n        this.state = {\r\n            remUpdates: 1\r\n        }\r\n        this.canvasRef = React.createRef();\r\n        this.update = this.update.bind(this);\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let {num} = this.props\r\n        let gridW = num < 100 ? 50 : 80\r\n        let gridH = num < 100 ? 20 : 32\r\n        \r\n        this.width = this.props.width || document.getElementById('centerview')?.clientWidth || 300;\r\n        this.height = this.width * 0.40;\r\n\r\n        \r\n        let ctx = this.canvasRef.current?.getContext('2d')\r\n        if (ctx) {\r\n\r\n            ctx.fillStyle = '#222831'\r\n            ctx.fillRect(0,0,this.width, this.height)\r\n\r\n            ctx.fillStyle = '#eeeeee'\r\n            let filled: boolean[][] = new Array(gridH)\r\n                .fill(false)\r\n                .map(() => new Array(gridW)\r\n                .fill(false));\r\n\r\n            \r\n\r\n            let cnt = 0\r\n            let drawFunction = this.props.shape === 'square'? this.drawSquare : this.drawCircle\r\n            while (cnt < this.props.num) {\r\n\r\n                let r = rngInt(0, gridH - 1)\r\n                let c = rngInt(0, gridW - 1)\r\n                if (filled[r][c]) continue\r\n\r\n                filled[r][c] = true\r\n\r\n                drawFunction(ctx, gridW, gridH, r, c, this.width, this.height)\r\n\r\n                cnt++\r\n            }\r\n\r\n        }\r\n\r\n        this.update();\r\n\r\n\r\n\r\n        return <canvas width = {this.width} height = {this.height} ref = {this.canvasRef}/>\r\n    }\r\n\r\n    update() {\r\n        if (this.state.remUpdates <= 0) {\r\n            return\r\n        }\r\n        \r\n        this.setState((state) => ({remUpdates: state.remUpdates - 1}));\r\n        setTimeout(this.update, 16.67);\r\n    }\r\n\r\n    drawCircle(ctx: CanvasRenderingContext2D , gridW: number, gridH: number, r: number, c: number, w: number, h: number) {\r\n       \r\n        \r\n\r\n        let cellsize = w / (gridW + 1)\r\n        \r\n        let x = c * cellsize\r\n        let y = r * cellsize\r\n\r\n        x += cellsize / 2\r\n        y += cellsize / 2\r\n\r\n        \r\n\r\n        ctx.beginPath()\r\n        ctx.arc(x,y,cellsize / 2 * 0.9, 0, 2* Math.PI)\r\n        ctx.fill()\r\n        ctx.closePath()\r\n\r\n    }\r\n\r\n    drawSquare(ctx: CanvasRenderingContext2D , gridsize: number, r: number, c: number, w: number, h: number) {\r\n        let cellsize = w / (gridsize + 1)\r\n        \r\n        let x = c * cellsize\r\n        let y = r * cellsize\r\n        x += cellsize * (gridsize - r - 1) / gridsize;\r\n        y += cellsize * (c) / gridsize\r\n\r\n        x += cellsize / 2\r\n        y += cellsize / 2\r\n\r\n        \r\n\r\n        ctx.beginPath()\r\n        ctx.fillRect(x,y,cellsize, cellsize)\r\n        ctx.closePath()\r\n\r\n    }\r\n}\r\n\r\nexport default CountingStaticView","import { SSL_OP_NO_QUERY_MTU } from \"constants\";\r\nimport React from \"react\";\r\n\r\ntype stateType = {\r\n    remUpdates: number\r\n}\r\n\r\ntype propType = {\r\n    ratio: number,\r\n    shape: string\r\n}\r\n\r\nclass LengthView extends React.Component<propType, stateType> {\r\n    \r\n\r\n    canvasRef: React.RefObject<HTMLCanvasElement>\r\n    width: number = 300\r\n    height: number = 300\r\n    constructor(props: propType) {\r\n        super(props)\r\n        this.state = {\r\n            remUpdates: 1\r\n        }\r\n        this.canvasRef = React.createRef();\r\n        this.update = this.update.bind(this);\r\n        this.parallel = this.parallel.bind(this)\r\n        this.path = this.path.bind(this)\r\n        this.singleLines = this.singleLines.bind(this)\r\n    }\r\n    \r\n\r\n    render() {\r\n\r\n        let  {ratio, shape} = this.props\r\n\r\n        this.width = document.getElementById('centerview')?.clientWidth || 300;\r\n        this.height = this.width * 0.45;\r\n        let ctx = this.canvasRef.current?.getContext('2d')\r\n        if (ctx) {\r\n            ctx.fillStyle = '#222831'\r\n            ctx.fillRect(0,0,this.width, this.height)\r\n\r\n            ctx.lineWidth = this.width / 200\r\n            if (shape === 'parallel') {\r\n                this.parallel(ctx, ratio)\r\n            } else if (shape === 'singlelines') {\r\n                this.singleLines(ctx, ratio)\r\n            } else if (shape === 'path') {\r\n                this.path(ctx, ratio)\r\n            }\r\n        }\r\n\r\n        this.update();\r\n\r\n\r\n\r\n        return <canvas width = {this.width} height = {this.height} ref = {this.canvasRef}/>\r\n    }\r\n    parallel(ctx: CanvasRenderingContext2D, ratio: number) {\r\n        \r\n        let semiH = this.height / 2\r\n        let l1 = this.width * 0.9;\r\n        let l2 = l1 * ratio\r\n        if (ratio > 1) {\r\n            let tmp = l1;\r\n            l1 /= ratio\r\n            l2 = tmp\r\n        }\r\n\r\n\r\n        this.poltLines(ctx, [0,semiH*0.8, l1, semiH *0.8],[0, semiH * 1.2, l2, semiH* 1.2])\r\n    }\r\n\r\n    path(ctx: CanvasRenderingContext2D, ratio: number) {\r\n        let pathLen: number = 0\r\n        ctx.strokeStyle = '#ffc107'\r\n        ctx.beginPath()\r\n\r\n        \r\n        let [x1, y1] = [rng(this.width * 0.05, this.width * 0.95), rng(this.height * 0.05, this.height * 0.95)]\r\n        ctx.moveTo(x1,y1)\r\n        while (pathLen/ratio < this.width / 8) {\r\n            let [x2, y2] = [rng(this.width * 0.05, this.width * 0.95), rng(this.height * 0.05, this.height * 0.95)]\r\n\r\n            ctx.lineTo(x2,y2)\r\n            pathLen += dist(x1,y1,x2,y2)\r\n            x1 = x2\r\n            y1 = y2\r\n        }\r\n        ctx.stroke()\r\n\r\n        ctx.closePath()\r\n        let lineLen = pathLen / ratio\r\n        \r\n        ctx.strokeStyle = '#eeeeee'\r\n        ctx.beginPath()\r\n        ctx.moveTo(this.width * 0.05, this.width* 0.05)\r\n        ctx.lineTo(this.width* 0.05 + lineLen, this.width * 0.05)    \r\n        ctx.stroke()\r\n\r\n        ctx.closePath()\r\n        let textSize = 20\r\n        ctx.font = `${textSize}px Roboto Mono`;\r\n        ctx.fillStyle = \"#eeeeee\";\r\n        ctx.textAlign = \"center\";\r\n        ctx.fillText(\"1\", this.width* 0.05 + lineLen + 10, this.width * 0.05 + textSize /3);\r\n        \r\n    }\r\n\r\n    \r\n\r\n    singleLines(ctx: CanvasRenderingContext2D, ratio: number) {\r\n\r\n        let swap = ratio > 1\r\n        if (ratio > 1) {\r\n            ratio = 1/ratio\r\n        }   \r\n            \r\n        \r\n        let len1 = 0\r\n        let l1: number[] = [], l2: number[] = []\r\n        while (len1 < this.width / 2) {\r\n            let [x1, y1] = [rng(this.width * 0.05, this.width * 0.95), rng(this.height * 0.05, this.height * 0.95)]\r\n            let [x2, y2] = [rng(this.width * 0.05, this.width * 0.95), rng(this.height * 0.05, this.height * 0.95)]\r\n            len1 = dist(x1,y1,x2,y2)\r\n            l1 = [x1,y1,x2,y2]\r\n        }\r\n        if (l1[2] < l1[0]) {\r\n            [l1[2], l1[3], l1[0], l1[1]] = [l1[0], l1[1] , l1[2], l1[3]]\r\n        }\r\n        let len2 = len1 * ratio\r\n        let tmp = 0\r\n        \r\n        while (tmp < len2) {\r\n            let [x1, y1] = [rng(this.width * 0.05, this.width * 0.95), rng(this.height * 0.05, this.height * 0.95)]\r\n            let [x2, y2] = [rng(this.width * 0.05, this.width * 0.95), rng(this.height * 0.05, this.height * 0.95)]\r\n            tmp = dist(x1,y1,x2,y2)\r\n            l2 = [x1,y1,x2,y2]\r\n        }\r\n\r\n        if (l2[2] < l2[0]) {\r\n            [l2[2], l2[3], l2[0], l2[1]] = [l2[0], l2[1] , l2[2], l2[3]]\r\n        }\r\n\r\n        let scale = len2 / tmp\r\n        l2[2] = l2[0] + (l2[2] - l2[0]) * scale\r\n        l2[3] = l2[1] + (l2[3] - l2[1]) * scale\r\n\r\n        if (swap) {\r\n            [l1 , l2] = [l2 , l1]\r\n        }\r\n    }\r\n\r\n    poltLines(ctx: CanvasRenderingContext2D, l1: number[], l2: number[]) {\r\n\r\n        let textSize = 20\r\n        ctx.font = `${textSize}px Roboto Mono`;\r\n        ctx.textAlign = \"center\";\r\n\r\n        ctx.strokeStyle = '#eeeeee'\r\n        ctx.fillStyle = \"#eeeeee\";\r\n        ctx.beginPath()\r\n        ctx.moveTo(l1[0], l1[1])\r\n        ctx.lineTo(l1[2], l1[3])\r\n        ctx.stroke()\r\n        ctx.closePath()\r\n        ctx.fillText(\"1\", l1[2] + 10, l1[3] + textSize /3);\r\n\r\n        \r\n\r\n\r\n        ctx.strokeStyle = '#ffc107'\r\n        ctx.fillStyle = '#ffc107'\r\n        ctx.beginPath()\r\n        ctx.moveTo(l2[0], l2[1])\r\n        ctx.lineTo(l2[2], l2[3])\r\n        ctx.stroke()\r\n        ctx.closePath()\r\n        ctx.fillText(\"?\", l2[2] + 10, l2[3] + textSize /3);\r\n    }\r\n    \r\n    \r\n    \r\n    update() {\r\n        if (this.state.remUpdates <= 0) {\r\n            return\r\n        }\r\n        \r\n        this.setState((state) => ({remUpdates: state.remUpdates - 1}));\r\n        setTimeout(this.update, 16.67);\r\n    }\r\n}\r\n\r\nfunction rng(low: number, high: number) : number {\r\n    return low + Math.random() * (high - low);\r\n}\r\nfunction dist(x1: number, y1: number, x2: number, y2: number) : number {\r\n    return Math.sqrt((x1-x2)**2 + (y1-y2)**2)\r\n}\r\n\r\n// function randomPolygon(limX: number, limY: number, numPts = 10): number[][] {\r\n//     let pts = []\r\n//     for (let i = 0; i < numPts; i++) {\r\n//         pts.push([rng(0, limX), rng(0,limY)])\r\n//     }\r\n//     pts = convexHull(pts)\r\n//     return pts\r\n// }   \r\n// function scalePoly(pts: number[][] , scale: number): number[][] {\r\n//     return pts.map(e => e.map(f => f*scale))\r\n// }\r\n\r\n// function centerPoly(pts: number[][] , x: number, y: number): number[][] {\r\n\r\n//     let center = pt.centroid(pts)\r\n//     let offsetX = x - center[0];\r\n//     let offsetY = y -  center[1] \r\n\r\n//     return pts.map(e => [e[0] + offsetX, e[1] + offsetY])\r\n\r\n// }\r\n\r\nexport default LengthView","import React, { CSSProperties } from \"react\";\r\n// @ts-ignore\r\nimport { Textfit } from 'react-textfit';\r\n\r\n\r\nclass TextView extends React.Component<{text: string}, {}> {\r\n\r\n    render() {\r\n\r\n        let fontStyle: CSSProperties = {\r\n            fontSize: 45,\r\n            textAlign: \"center\" as const,\r\n            minHeight: 100\r\n        }\r\n        return (\r\n        <Textfit max={fontStyle.fontSize} mode = {'single'} style = {{...fontStyle, fontFamily: 'Roboto Mono'}}>\r\n            {this.props.text}\r\n        </Textfit>)\r\n    }\r\n\r\n}\r\n\r\nexport default TextView","\r\n\r\nclass Question {\r\n    \r\n    view: any\r\n    answer: number\r\n    timelimit: number\r\n    id: number\r\n    \r\n    // Return a number between 0 and 1\r\n    scorer: (arg0: number) => number\r\n\r\n    constructor(view: any, answer: number, scorer = defaultScorer, timelimit: number = 0) {\r\n        this.view = view\r\n        this.answer = answer\r\n        this.id = Math.random();\r\n        this.scorer = (guess: number) => scorer(guess, this.answer)\r\n        this.timelimit = timelimit\r\n    }\r\n\r\n}\r\n\r\nfunction defaultScorer(guess: number, actual: number) : number {\r\n    if (guess < actual) {\r\n        return guess / actual;\r\n    }\r\n    return actual / guess;\r\n}\r\n\r\nexport default Question","import React from \"react\";\r\nimport { Theme } from \"../App\";\r\nimport AngleView from \"../questionViews/AngleView\";\r\nimport AreaView from \"../questionViews/AreaView\";\r\nimport CountingMovingView from \"../questionViews/CountingMovingView\";\r\nimport CountingStaticView from \"../questionViews/CountingStaticView\";\r\nimport LengthView from \"../questionViews/LengthView\";\r\nimport TextView from \"../questionViews/TextView\";\r\nimport Question from \"./Question\";\r\n\r\ntype Range = {\r\n    low: number,\r\n    high: number\r\n}\r\n\r\n\r\n\r\nfunction rngInt(low: number, high: number) : number {\r\n    return low + Math.floor(Math.random() * (high - low + 0.99999));\r\n}\r\n\r\n\r\nfunction rng(low: number, high: number) : number {\r\n    return low + Math.random() * (high - low);\r\n}\r\n\r\nfunction logRng(mid: number, variance: number) : number {\r\n    return mid * Math.pow(2 , rng(-variance, variance));\r\n}\r\n\r\n\r\nexport function genMul(config : {\r\n    numOperands : Range,\r\n    rangeCenter: number,\r\n    rangeVariance: number\r\n    operandVariance: number,\r\n    timeLimit: number\r\n\r\n}) : Question {\r\n    let {numOperands, rangeCenter, rangeVariance, operandVariance, timeLimit} = config;\r\n    let numOp = rngInt(numOperands.low, numOperands.high);\r\n    let result = logRng(rangeCenter, rangeVariance);\r\n    let avgOp: number\r\n    let operands: number[] = [];\r\n    for (let i = 0; i < numOp; i++) {\r\n        avgOp = Math.pow(result , 1 / (numOp - i));\r\n        let nextOperand = logRng(avgOp , operandVariance);\r\n        operands.push(Math.round(nextOperand));\r\n        result /= nextOperand;\r\n    }\r\n    operands.sort((a,b) => a-b);\r\n    \r\n\r\n    // Calculate actual result\r\n    result = operands.reduce((acc, cur) => acc * cur);\r\n    // scorer\r\n    let scorer = (guess: number, actual: number) : number => {\r\n        let fraction = guess < actual ? (guess / actual) : (actual / guess)\r\n        return Math.round(fraction * 100)\r\n    }\r\n\r\n    let questionString = '';\r\n    operands.forEach(element => {\r\n        questionString += `${element} × `;\r\n    });\r\n    questionString = questionString.slice(0, -3);\r\n    return new Question( <TextView text = {questionString}/>, result, scorer, timeLimit);\r\n}\r\n\r\nexport function genPerc(\r\n    config : {\r\n        numOperands : Range,\r\n        operandRange: Range,\r\n        timeLimit: number,\r\n        round: number\r\n    }\r\n) {\r\n\r\n    let {numOperands, operandRange, timeLimit, round} = config;\r\n    let numOp = rngInt(numOperands.low, numOperands.high);\r\n\r\n    let operands = []\r\n    let result = 1;\r\n    for (let i = 0; i < numOp; i++) {\r\n        \r\n        operands.push(rngInt(operandRange.low, operandRange.high));\r\n        \r\n        operands[i] -= operands[i] % round; \r\n        result *= operands[i] / 100;\r\n    }\r\n\r\n    let questionString = '';\r\n    operands.forEach(element => {\r\n        questionString += `${(element)}% × `;\r\n    });\r\n    questionString = questionString.slice(0, -3);\r\n\r\n    let scorer = (guess: number, actual: number) : number => {\r\n        let fraction = guess < actual ? (guess / actual) : (actual / guess)\r\n        return Math.round(fraction * 100)\r\n    }\r\n\r\n\r\n    return new Question(<TextView text = {questionString}/>, result, scorer, timeLimit);\r\n\r\n\r\n    \r\n\r\n}\r\n\r\n\r\nexport function genAngle (\r\n    config: {\r\n        minDeg: number,\r\n        maxDeg: number,\r\n        timeLimit: number\r\n    }\r\n) : Question {\r\n\r\n    let {minDeg, maxDeg, timeLimit} = config\r\n    let result = rngInt(minDeg, maxDeg);\r\n\r\n    let resultRad = result * Math.PI / 180\r\n\r\n    let scorer = (guess: number, actual: number) : number => {\r\n\r\n        let fraction = 1 - Math.abs(guess - actual) * 0.05\r\n        if (fraction < 0) fraction = 0;\r\n        return Math.round(fraction * 100)\r\n    }\r\n\r\n\r\n    return new Question(<AngleView angle={resultRad}/>, result, scorer, timeLimit)\r\n\r\n}\r\n\r\nexport function genCounting (\r\n    config: {\r\n        min: number,\r\n        max: number,\r\n        timeLimit: number\r\n    }\r\n) : Question {\r\n\r\n    let {min, max, timeLimit} = config;\r\n    let result = rngInt(min, max)\r\n\r\n    let scorer = (guess: number, actual: number) : number => {\r\n\r\n        if (guess === actual) {\r\n            return 100\r\n        }\r\n\r\n        let fraction = guess < actual ? (guess / actual) : (actual / guess)\r\n        return Math.round(fraction * 90)\r\n    }\r\n\r\n    let shape = 'circle'\r\n\r\n    return new Question(<CountingStaticView num={result} shape = {shape}/>, result, scorer, timeLimit)\r\n}\r\n\r\nexport function genCountingMoving (\r\n    config: {\r\n        min: number,\r\n        max: number,\r\n        timeLimit: number\r\n    }\r\n) : Question {\r\n\r\n    let {min, max, timeLimit} = config;\r\n    let result = rngInt(min, max)\r\n\r\n    let scorer = (guess: number, actual: number) : number => {\r\n\r\n\r\n        let fraction = guess < actual ? (guess / actual) : (actual / guess)\r\n        return Math.round(fraction * 100)\r\n    }\r\n\r\n\r\n    return new Question(<CountingMovingView num={result}/>, result, scorer, timeLimit)\r\n}\r\n\r\nexport function genArea (\r\n    config: {\r\n        center: number,\r\n        variance: number,\r\n        shape: string,\r\n        timeLimit: number\r\n    }\r\n) : Question {\r\n\r\n    let {center, variance, shape, timeLimit} = config;\r\n    let result = logRng(center, variance)\r\n    let scorer = (guess: number, actual: number) : number => {\r\n        let fraction = guess < actual ? (guess / actual) : (actual / guess)\r\n        fraction = Math.sqrt(fraction)\r\n        return Math.round(fraction * 100)\r\n    }\r\n    return new Question(<AreaView ratio = {result} shape={shape}/>, result, scorer, timeLimit)\r\n\r\n\r\n}\r\n\r\nexport function genLength (\r\n    config: {\r\n        center: number,\r\n        variance: number,\r\n        shape: string,\r\n        timeLimit: number\r\n    }\r\n) : Question {\r\n\r\n    let {center, variance, shape, timeLimit} = config;\r\n    let result = logRng(center, variance)\r\n    let scorer = (guess: number, actual: number) : number => {\r\n        let fraction = guess < actual ? (guess / actual) : (actual / guess)\r\n        return Math.round(fraction * 100)\r\n    }\r\n    return new Question(<LengthView ratio = {result} shape={shape}/>, result, scorer, timeLimit)\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import { genMul } from \"./QGenerators\";\r\nimport Question from \"./Question\";\r\n\r\ntype generatorType = (arg0: any) => Question;\r\nexport enum ProgressState {\r\n    PREGAME,\r\n    INTRO,\r\n    RUNNING,\r\n    PAUSED,\r\n    OUTRO,\r\n    POSTGAME\r\n}\r\n\r\nlet defaultConfig = {\r\n\tnumOperands : {low: 2, high: 2},\r\n    rangeCenter: 20000,\r\n    rangeVariance: 2,\r\n    operandVariance: 2,\r\n    timeLimit: 0\r\n}\r\n\r\nclass GameState {\r\n    generator: generatorType = genMul\r\n    questionArray: Question[] = []\r\n    currentQuestion?: Question;\r\n    category: string = \"Multiplication (Easy)\"\r\n    numQuestions: number = 5\r\n    currentIndex: number = 0\r\n    recentScore: number = 0\r\n    totalScore: number = 0\r\n    recentGuess: number = 0\r\n    recentAnswer: number = 0\r\n    progressState: ProgressState = ProgressState.PREGAME\r\n    generatorconfig: any = defaultConfig\r\n    totalTime = 0\r\n    storageKey = 'Multiplication (Easy)|0'\r\n    // constructor(category: string, generator: generatorType, numQuestions: number, config: any) {\r\n    //     this.category = category\r\n    //     this.generator = generator\r\n    //     this.numQuestions = numQuestions\r\n    //     this.generatorconfig = config\r\n    // }\r\n}\r\n\r\nexport default GameState;","\r\nimport GameState , {ProgressState} from \"./GameState\";\r\nlet ls = require('local-storage')\r\n\r\nexport enum InputType {\r\n    BUTTON,\r\n    ANSWER,\r\n    ANIM\r\n}\r\nexport type Input = {\r\n    type: InputType,\r\n    payload: any\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function nextState(state: GameState, input: Input, callback: (input: Input) => void): GameState {\r\n\r\n    let next = state;\r\n    if (state.progressState === ProgressState.PREGAME) {\r\n        \r\n        if (input.type === InputType.BUTTON) {\r\n            if (input.payload === \"start\") {\r\n                next = initialState(state)\r\n\r\n                next.progressState = ProgressState.RUNNING\r\n            }\r\n        }\r\n    } else if (state.progressState === ProgressState.RUNNING) {\r\n        if (input.type === InputType.BUTTON) {\r\n            if (input.payload === \"reset\") {\r\n                next = initialState(state)\r\n                next.progressState = ProgressState.RUNNING\r\n            } else if (input.payload === 'playpause') {\r\n                next.progressState = ProgressState.PAUSED\r\n            }\r\n        } else if (input.type === InputType.ANSWER) {\r\n            let score = state.currentQuestion?.scorer(input.payload)\r\n            next.totalScore += score || 0;\r\n            next.recentGuess = input.payload\r\n            next.recentAnswer = state.currentQuestion?.answer || -1;\r\n            next.recentScore = score || 0;\r\n\r\n            next.currentIndex ++;\r\n            if (next.currentIndex < next.numQuestions) {\r\n                next.currentQuestion = next.questionArray[next.currentIndex];\r\n                next.totalTime = next.currentQuestion.timelimit\r\n            } else {\r\n\r\n                // Update Highscore\r\n                let scores = ls('highscores')\r\n                if (!scores) {\r\n                    ls('highscores', {})\r\n                    scores = {} \r\n                }\r\n                scores[next.storageKey] = Math.max(next.totalScore , (scores[next.storageKey] || 0))\r\n                ls('highscores' , scores)\r\n\r\n                next.progressState = ProgressState.POSTGAME;\r\n            }\r\n        } \r\n    } else if (state.progressState === ProgressState.PAUSED) {\r\n        if (input.type === InputType.BUTTON && input.payload === 'playpause') {\r\n            next.progressState = ProgressState.RUNNING\r\n        } else if (input.payload === \"reset\") {\r\n            next = initialState(state)\r\n            next.progressState = ProgressState.RUNNING\r\n        }\r\n    } else if (state.progressState === ProgressState.POSTGAME) {\r\n        if (input.type === InputType.BUTTON && input.payload === 'replay') {\r\n            next = initialState(state)\r\n            next.progressState = ProgressState.RUNNING   \r\n        }\r\n    }\r\n\r\n    return next;\r\n}\r\n\r\nfunction initialState(state: GameState): GameState {\r\n    state.currentIndex = 0;\r\n    state.recentAnswer = state.recentGuess = state.recentScore = state.totalScore = 0;\r\n    state.questionArray = []\r\n    for (let i = 0; i < state.numQuestions; i++) {\r\n        state.questionArray.push(state.generator(state.generatorconfig));\r\n    }\r\n    state.currentQuestion = state.questionArray[0]\r\n    state.totalTime = state.currentQuestion.timelimit\r\n    return state\r\n}\r\n\r\n","import React, { CSSProperties } from 'react';\r\nimport { InputGroup, FormControl } from 'react-bootstrap';\r\nimport { Theme } from '../App';\r\nimport { Input, InputType } from '../logic/GameController';\r\nimport GameState, { ProgressState } from '../logic/GameState';\r\n\r\ntype propType = { \r\n    inputHandler : (arg0: Input) => void,\r\n    theme: Theme,\r\n    gameState: GameState\r\n}\r\n\r\n\r\n\r\nclass InputView extends React.Component<propType, {text: string}>{\r\n    inputField: React.RefObject<HTMLInputElement>;\r\n    canvasRef: React.RefObject<HTMLCanvasElement>;\r\n    timerInterval?: NodeJS.Timeout;\r\n    questionId: number = 0;\r\n    timeLimit: number = 0;\r\n    startTime: number = 0;\r\n    \r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            text: \"\",\r\n        }\r\n\r\n        this.inputField = React.createRef();\r\n        this.canvasRef = React.createRef();\r\n        this.drawArc = this.drawArc.bind(this);\r\n        this.handleChange = this.handleChange.bind(this)\r\n\r\n    }\r\n\r\n    drawArc(fraction: number) {\r\n        if (this.canvasRef.current === null) {\r\n            return\r\n        }\r\n\r\n        const canvas: any = this.canvasRef.current;\r\n        const context: any = this.canvasRef.current.getContext('2d');\r\n        context.strokeStyle = fraction < 0.75? 'green':'red'\r\n        \r\n        context.fillStyle = this.props.theme.background;\r\n        context.fillRect(0,0,48,48);\r\n        context.lineWidth = 3\r\n        context.translate(-0.5,-0.5);\r\n        let cx = canvas.width/2;\r\n        let cy = canvas.height/2;\r\n        context.beginPath();\r\n        context.arc(cx,cy, 16, 2* Math.PI * fraction - Math.PI /2, - Math.PI / 2);\r\n        context.stroke();\r\n\r\n        context.translate(0.5,0.5);\r\n\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.inputField.current?.focus();\r\n        \r\n    }\r\n    render() {\r\n        let inputStyle: CSSProperties = {\r\n            background: this.props.theme.background,\r\n            color: this.props.theme.textColor,\r\n        }\r\n    \r\n\r\n        \r\n        let progressState = this.props.gameState.progressState;\r\n        \r\n        let curQuestion = this.props.gameState.currentQuestion;\r\n        if (curQuestion !== undefined && curQuestion.id !== this.questionId) {\r\n\r\n            this.timerInterval && clearInterval(this.timerInterval);\r\n            \r\n            \r\n            this.questionId = curQuestion.id;\r\n            this.timeLimit = curQuestion.timelimit;\r\n            this.startTime = Date.now();\r\n            if (this.timeLimit !== 0) {\r\n                \r\n                this.timerInterval = setInterval(() => {\r\n                    if (this.props.gameState.progressState === ProgressState.PAUSED) {\r\n                        this.startTime += 16.67; // instead of stopping the interval\r\n                    }\r\n                    let elapsed =  Date.now() - this.startTime ;\r\n                    let fraction = elapsed / this.timeLimit \r\n                    \r\n                    if (fraction < 1) {\r\n                        this.drawArc(fraction);\r\n                    } else {\r\n                        this.timerInterval && clearInterval(this.timerInterval);\r\n                        this.props.inputHandler({type: InputType.ANSWER, payload: this.toValidAnswer(this.state.text) })\r\n                        this.setState({text: ''})\r\n                    }\r\n\r\n                }, 16.67);\r\n            }\r\n            this.forceUpdate();\r\n\r\n        }\r\n        let totalTime = curQuestion?.timelimit || 0;\r\n        let {gameState} = this.props;\r\n\r\n        let placeholder = '';\r\n        if (progressState === ProgressState.RUNNING) {\r\n            placeholder = 'Enter Answer'\r\n        } else if (progressState === ProgressState.PAUSED) {\r\n            placeholder = 'Game Paused'\r\n        }\r\n\r\n        return (\r\n            <div style={{display: 'flex', flexDirection: 'row'}}>\r\n                <InputGroup size=\"lg\" style = {inputStyle}>\r\n                    <FormControl onKeyDown = {this.handleKeyDown}\r\n                        style = {inputStyle}\r\n                        value = {this.state.text}\r\n                        onChange = {this.handleChange}\r\n                        placeholder={placeholder }\r\n                        ref = {this.inputField}\r\n                        autoComplete = {'chrome-off'}\r\n                    />\r\n                </InputGroup>  \r\n                {totalTime !== 0 && gameState.progressState === ProgressState.RUNNING \r\n                && <canvas ref = {this.canvasRef} width = {48} height = {48}/>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    toValidAnswer(text: string): number{\r\n        let parsed: number\r\n        try {\r\n            parsed = parseFloat(text);\r\n        } catch (error) {\r\n            return 1\r\n        }\r\n        if (isNaN(parsed)) {\r\n            return 1\r\n        }\r\n        return parsed\r\n    }\r\n\r\n    handleChange(e: any) {\r\n        if (this.props.gameState.progressState !== ProgressState.RUNNING) {\r\n            return\r\n        }\r\n        let inputText: string = e.target.value;\r\n        let lastChar = inputText.slice(-1);\r\n        if (inputText.length === 0 || (lastChar >= '0' && lastChar <= '9') || lastChar === 'e' || lastChar === '-' || lastChar === '+' || lastChar === '.') {\r\n            this.setState({text: inputText});\r\n        } \r\n    }\r\n\r\n    handleKeyDown = (e: React.KeyboardEvent) => {\r\n        if (e.key === 'Enter' && this.props.gameState.progressState === ProgressState.RUNNING) {\r\n            let parsed : number;\r\n            try {\r\n                parsed = parseFloat(this.state.text);\r\n            } catch (error) {\r\n                return\r\n            }\r\n            if (isNaN(parsed)) {\r\n                return\r\n            }\r\n           this.props.inputHandler({type: InputType.ANSWER, payload: parsed})\r\n           this.setState({text: ''})\r\n\r\n           if (this.props.gameState.currentIndex === this.props.gameState.numQuestions - 1) {\r\n           }\r\n        } else if (e.key === 'Enter' && this.props.gameState.progressState === ProgressState.POSTGAME) {\r\n            this.props.inputHandler({type: InputType.BUTTON, payload: 'replay'})\r\n        }\r\n    }\r\n}\r\n\r\nexport default InputView","import React from 'react';\r\nimport { Theme } from '../App';\r\nimport GameState, { ProgressState } from '../logic/GameState';\r\nimport Question from '../logic/Question';\r\n// @ts-ignore\r\nimport { Textfit } from 'react-textfit';\r\nimport TextView from '../questionViews/TextView';\r\n\r\ntype propType = {\r\n    question: Question | undefined,\r\n    theme: Theme\r\n    gameState: GameState\r\n}\r\n\r\nlet mainFontStyle = {\r\n    fontSize: 45,\r\n    textAlign: \"center\" as const,\r\n    minHeight: 100\r\n}\r\n\r\nlet altFontStyle = {\r\n    fontSize: 30,\r\n    textAlign: \"center\" as const,\r\n    minHeight: 100,\r\n    padding: 15\r\n}\r\n\r\n\r\n\r\nclass QuestionView extends React.Component<propType, any>{\r\n    \r\n\r\n\r\n    render() {\r\n\r\n        let progressState = this.props.gameState.progressState;\r\n\r\n        if (progressState === ProgressState.PAUSED) {\r\n            return (\r\n                <div style = {{...mainFontStyle, fontFamily: this.props.theme.questionFont}}>\r\n                    ---Paused---\r\n                </div>\r\n            )\r\n        } else if (progressState === ProgressState.POSTGAME) {\r\n            return (\r\n                <div style = {{...altFontStyle, fontFamily: this.props.theme.questionFont}}>\r\n                   {`Final Score: ${this.props.gameState.totalScore}`}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        if (this.props.question) {\r\n            return this.props.question?.view\r\n        } \r\n        return <TextView text= '---'/>\r\n    }\r\n}\r\n\r\nexport default QuestionView","  import React, { CSSProperties } from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport GameState, { ProgressState } from \"../logic/GameState\";\r\nvar ls = require('local-storage')\r\n \r\ntype propType = {\r\n    gameState: GameState\r\n}\r\n\r\nclass ScoreView extends React.Component<propType, {}> {\r\n\r\n    render() {\r\n\r\n        let {recentGuess , recentAnswer, totalScore, recentScore} = this.props.gameState\r\n\r\n        let errorString = '';\r\n        let relError = Math.abs(Math.log10(recentAnswer) - Math.log10(recentGuess))\r\n        relError = Math.pow(10, relError);\r\n        \r\n        if (isNaN(relError)) {\r\n            relError = 1\r\n        } \r\n        \r\n\r\n        \r\n        if (relError < 1.5) {\r\n            relError = 100 * (relError - 1);\r\n            errorString = `Error: ${relError.toFixed(2)} %`\r\n        } else {\r\n            relError = Math.log10(relError)\r\n            errorString = `Error (log₁₀): ${relError.toFixed(2)}`\r\n        }\r\n\r\n        let isTinyScreen = window.innerWidth < 576\r\n        let errorStyle: CSSProperties = isTinyScreen ? {} : {float: \"right\"}\r\n\r\n        let textStyle: CSSProperties = {\r\n            fontSize: (isTinyScreen ? '16px' : '19px')\r\n        }\r\n\r\n        \r\n        let highscores = ls('highscores') \r\n        if (highscores === null) {\r\n            ls('highscores', {})\r\n            highscores = {}\r\n        }\r\n\r\n        let highscore = highscores[this.props.gameState.storageKey] || 0\r\n\r\n\r\n\r\n\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <Row>\r\n                        <Col xs = {12} sm = {4}>\r\n                            <div>\r\n                                <span style = {textStyle}>{`Score: ${totalScore} `}</span>\r\n                                <span style = {textStyle}>{`(+${recentScore})`}</span>\r\n                            </div>\r\n                            \r\n                            <div style = {textStyle}>{`Highscore: ${highscore}`}</div>\r\n                            \r\n                            \r\n                        </Col>\r\n                        <Col xs = {12} sm = {8}>\r\n                            <div style = {errorStyle}>\r\n                                <div style = {textStyle}>{`Guess: ${format(recentGuess)}, Answer: ${format(recentAnswer)}`}</div>\r\n                                <div style = {textStyle}>{errorString}</div>\r\n                            </div>\r\n                        </Col>\r\n\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nlet superscripts = \"⁰¹²³⁴⁵⁶⁷⁸⁹⁻\"\r\n\r\n\r\nfunction format(num: number, max:number  = 1e6, min:number = 1e-3): string {\r\n    if (num !== 0 && (num < min || num > max)) {\r\n        let exponent = Math.floor(Math.log10(num))\r\n        let mantissa = num / Math.pow(10, exponent);\r\n        let temp = exponent.toString();\r\n        let exponentStr = ''\r\n        for (let i = 0; i < temp.length; i++) {\r\n            if (temp[i] === '-') {\r\n                exponentStr += superscripts[10]\r\n            } else {\r\n                exponentStr += superscripts[parseInt(temp[i])]\r\n            }\r\n        }\r\n\r\n        return `${mantissa.toFixed(3)}×10${exponentStr}`\r\n        \r\n    }\r\n    let tmp =  num.toString();\r\n\r\n    // Remove floating imprecision\r\n\r\n    let i = tmp.length - 1;\r\n    let decimal = 0;\r\n    while (i >= 0 && tmp[i] != '.') {\r\n        i--;\r\n        decimal++;\r\n    }\r\n    if (i >= 0 && decimal > 6) {\r\n        tmp = num.toFixed(6)\r\n    }\r\n    if (tmp.length > 8) {\r\n        tmp = tmp.substring(0,8);\r\n    }\r\n    return tmp\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default ScoreView;","import React, { CSSProperties } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { Theme } from '../App';\r\nimport { Input, InputType } from '../logic/GameController';\r\nimport GameState, { ProgressState } from '../logic/GameState';\r\n\r\ntype propType = { \r\n    theme: Theme,\r\n    gameState: GameState,\r\n    inputHandler: (arg0: Input) => void,\r\n    width: number\r\n}\r\n\r\n\r\nclass GameInfoView extends React.Component<propType, any>{\r\n    render() {\r\n        let {theme, gameState, inputHandler} = this.props\r\n        let style: CSSProperties = {\r\n            fontFamily:  theme.headerFont,\r\n            fontSize: \"24px\",\r\n            marginTop: \"12px\",\r\n        }\r\n\r\n        let smallui = (this.props.width < 450)\r\n        \r\n        if (smallui) {\r\n            style.fontSize = \"18px\"\r\n        }\r\n\r\n        let progressString = `(${gameState.currentIndex + 1}/${gameState.numQuestions})`\r\n        let startButton = <Button \r\n            size = {smallui? 'sm': undefined}\r\n            variant = \"success\" \r\n            style = {{float: \"right\", fontFamily : theme.bodyFont}}\r\n            onClick = {() => {inputHandler({type: InputType.BUTTON, payload: 'start'})}\r\n        }>Start↵</Button>\r\n        \r\n        let replayButton = <Button \r\n            size = {smallui? 'sm': undefined}\r\n            variant = \"success\" \r\n            style = {{float: \"right\", fontFamily : theme.bodyFont}}\r\n            onClick = {() => {inputHandler({type: InputType.BUTTON, payload: 'replay'})}\r\n        }>Replay↵</Button>\r\n\r\n\r\n\r\n        return (\r\n            <div style = {style}>\r\n\r\n                <span>{gameState.category}</span>\r\n    \r\n                {gameState.progressState === ProgressState.PREGAME ? \r\n                    startButton :\r\n                gameState.progressState === ProgressState.POSTGAME ?\r\n                    replayButton:\r\n                    <span style = {{float: \"right\"}}>{progressString}</span>\r\n                }\r\n                <hr style = {{borderColor: theme.textColor  }}></hr>\r\n            </div>       \r\n        )\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default GameInfoView","import React, { CSSProperties } from \"react\";\r\nimport { Input, InputType } from \"../logic/GameController\";\r\nimport GameState, { ProgressState } from \"../logic/GameState\";\r\nimport { Button } from 'react-bootstrap'\r\n\r\ntype propType = {\r\n    inputHandler: (arg0: Input) => void\r\n    gameState: GameState\r\n}\r\n\r\nlet buttonStyle: CSSProperties = {\r\n    marginRight: 4\r\n}\r\n\r\nclass ButtonRow extends React.Component<propType, {}> {\r\n\r\n\r\n    constructor(props: propType) {\r\n        super(props);\r\n\r\n        this.pauseEvent = this.pauseEvent.bind(this);\r\n        this.resetEvent = this.resetEvent.bind(this);\r\n    }\r\n\r\n    render() {\r\n\r\n        let progressState = this.props.gameState.progressState\r\n        let paused = progressState === ProgressState.PAUSED\r\n\r\n        let runningButtons = \r\n        [\r\n            <Button variant=\"primary\" style={buttonStyle} key ={1} onClick={this.pauseEvent}><u>P</u>{paused? \"lay\" : \"ause\"}</Button>,\r\n            <Button variant=\"warning\" style={buttonStyle} key={2} onClick={this.resetEvent}><u>R</u>eset</Button>\r\n        ]\r\n        \r\n        let postgameButtons: HTMLElement[] = [] \r\n        // [\r\n        //     <Button variant=\"primary\" style={buttonStyle} onClick={this.replayEvent} key={1}>Replay ↵</Button>\r\n        // ]\r\n\r\n        return (\r\n            <div>\r\n                {progressState === ProgressState.POSTGAME ? postgameButtons:runningButtons }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    pauseEvent() {\r\n        this.props.inputHandler({type: InputType.BUTTON, payload: \"playpause\"})\r\n    }\r\n    \r\n    resetEvent() {\r\n        this.props.inputHandler({type: InputType.BUTTON, payload: \"reset\"})\r\n    }\r\n    \r\n}\r\n\r\nexport default ButtonRow","import { Input, InputType } from \"./GameController\";\r\nimport GameState, { ProgressState } from \"./GameState\";\r\n\r\nlet prev = 0;\r\n\r\nexport function decodeInput(e: KeyboardEvent, gameState: GameState) : Input | undefined {\r\n    if (e.timeStamp - prev < 0.1) {\r\n        return undefined\r\n    }\r\n\r\n    prev = e.timeStamp\r\n\r\n    let input: Input = {\r\n        type: InputType.BUTTON,\r\n        payload: ''\r\n    }\r\n\r\n    if (e.code === 'KeyR') {\r\n        input.payload = 'reset';\r\n        return input\r\n    }\r\n    if (e.code === 'KeyP') {\r\n        input.payload = 'playpause';\r\n        return input\r\n    }\r\n    if (e.code === 'Enter') {\r\n        if (gameState.progressState === ProgressState.PREGAME) {\r\n            input.payload = 'start'\r\n            return input\r\n        }  else if (gameState.progressState === ProgressState.RUNNING) {\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    return undefined\r\n}","import React from 'react';\r\nimport Question from '../logic/Question';\r\nimport InputView from './InputView';\r\nimport QuestionView from './QuestionView';\r\nimport ScoreView from './ScoreView';\r\nimport { Theme } from '../App'\r\nimport GameInfoView from './GameInfoView';\r\nimport ButtonRow from './ButtonRow';\r\nimport { Input } from '../logic/GameController';\r\nimport GameState from '../logic/GameState';\r\nimport {nextState } from '../logic/GameController'\r\nimport { decodeInput } from '../logic/KeyDecoder';\r\n\r\ntype propType = {\r\n    theme: Theme,\r\n    width: number\r\n}\r\n\r\ntype stateType = {\r\n    gameState: GameState\r\n}\r\n\r\n\r\n\r\nclass CenterView extends React.Component<propType, stateType>{\r\n    \r\n    \r\n    prevTimestamp: number = 0;\r\n\r\n    constructor(props: propType) {\r\n        super(props);\r\n\r\n\r\n        this.state = {\r\n            gameState: new GameState()\r\n        }\r\n\r\n        \r\n        this.handleInput = this.handleInput.bind(this);   \r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        this.handleInput = this.handleInput.bind(this);   \r\n        this.keyCapture  = this.keyCapture.bind(this);\r\n        \r\n        document.body.addEventListener('keydown', this.keyCapture)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        document.body.removeEventListener('keydown', this.keyCapture);\r\n    }\r\n\r\n    render() {\r\n        let gameState = this.state.gameState;\r\n        \r\n        return (\r\n            <div id='centerview'>\r\n                \r\n                <GameInfoView theme = {this.props.theme} gameState={gameState} inputHandler = {this.handleInput} width = {this.props.width}/> \r\n                <QuestionView question = {gameState.currentQuestion} theme ={this.props.theme} gameState={gameState}/>\r\n                <InputView inputHandler = {this.handleInput} theme = {this.props.theme} gameState={gameState}></InputView>\r\n                <ScoreView gameState = {gameState}/>\r\n                <ButtonRow inputHandler = {this.handleInput} gameState={gameState}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    parentUpdate(gameState: GameState) {\r\n        this.setState({gameState})\r\n    }\r\n\r\n    handleInput(input: Input) {\r\n\r\n        let next = nextState(this.state.gameState, input, this.handleInput);\r\n        this.setState({gameState: next})\r\n    }\r\n\r\n    keyCapture(e: KeyboardEvent) {\r\n        \r\n        let inputEvent: Input | undefined = decodeInput(e, this.state.gameState);\r\n        if (inputEvent !== undefined) {\r\n            this.handleInput(inputEvent);\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n}\r\n\r\nexport default CenterView","import { genAngle, genArea, genCounting, genCountingMoving, genLength, genMul, genPerc } from \"./QGenerators\";\r\n\r\nlet modes: any = [\r\n    {\r\n        category: 'Multiplication',\r\n        numQuestions: 5,\r\n        generator: genMul,\r\n\r\n        levels: [\r\n            {\r\n                name: 'Easy',\r\n                config: {\r\n                    numOperands : {low: 2, high: 2},\r\n                    rangeCenter: 20000,\r\n                    rangeVariance: 2,\r\n                    operandVariance: 2,\r\n                    timeLimit: 0\r\n                }\r\n            },\r\n            {\r\n                name: 'Medium',\r\n                config: {\r\n                    numOperands : {low: 3, high: 3},\r\n                    rangeCenter: 100000,\r\n                    rangeVariance: 2,\r\n                    operandVariance: 2,\r\n                    timeLimit: 0\r\n                }\r\n            },\r\n            {\r\n                name: 'Hard',\r\n                config: {\r\n                    numOperands : {low: 4, high: 4},\r\n                    rangeCenter: 1000000,\r\n                    rangeVariance: 2,\r\n                    operandVariance: 2,\r\n                    timeLimit: 0\r\n                }\r\n            }\r\n        ],\r\n        times: [0, 10000, 30000]\r\n    },\r\n\r\n    {\r\n        category: 'Percentages',\r\n        numQuestions: 5,\r\n        generator: genPerc,\r\n\r\n        levels: [\r\n            {\r\n                name: 'Easy',\r\n                config: {\r\n                    numOperands : {low: 2, high: 3},\r\n                    operandRange: {low: 10, high: 99},\r\n                    timeLimit: 0,\r\n                    round: 5\r\n                }\r\n            },\r\n            {\r\n                name: 'Hard',\r\n                config: {\r\n                    numOperands : {low: 4, high: 4},\r\n                    operandRange: {low: 10, high: 99},\r\n                    timeLimit: 0,\r\n                    round: 1\r\n                }\r\n            }\r\n        ],\r\n        times: [0, 10000, 30000]\r\n    },\r\n\r\n    {\r\n        category: 'Angles',\r\n        numQuestions: 5,\r\n        generator: genAngle,\r\n\r\n        levels: [\r\n            {\r\n                name: 'Acute Only',\r\n                config: {\r\n                    minDeg: 1,\r\n                    maxDeg: 89,\r\n                    timeLimit: 0,\r\n            \r\n                }\r\n            },\r\n            {\r\n                name: 'Any',\r\n                config: {\r\n                    minDeg: 1,\r\n                    maxDeg: 359,\r\n                    timeLimit: 0,\r\n                }\r\n            }\r\n        ],\r\n        times: [0, 7000, 20000]\r\n    },\r\n    {\r\n        category: 'Counting (Static)',\r\n        numQuestions: 5,\r\n        generator: genCounting,\r\n\r\n        levels: [\r\n            {\r\n                name: '20 - 50',\r\n                config: {\r\n                    min: 20,\r\n                    max: 50,\r\n                    timeLimit: 0,\r\n                }\r\n            },\r\n            {\r\n                name: '50 - 100',\r\n                config: {\r\n                    min: 50,\r\n                    max: 100,\r\n                    timeLimit: 0,\r\n                }\r\n            },\r\n            {\r\n                name: '100 - 500',\r\n                config: {\r\n                    min: 100,\r\n                    max: 500,\r\n                    timeLimit: 0,\r\n                }\r\n            }\r\n        ],\r\n        times: [0, 7000, 20000]\r\n    },\r\n    {\r\n        category: 'Counting (Moving)',\r\n        numQuestions: 5,\r\n        generator: genCountingMoving,\r\n\r\n        levels: [\r\n            {\r\n                name: '15-30',\r\n                config: {\r\n                    min: 15,\r\n                    max: 30,\r\n                    timeLimit: 0,\r\n                }\r\n            },\r\n            {\r\n                name: '30 - 80',\r\n                config: {\r\n                    min: 30,\r\n                    max: 80,\r\n                    timeLimit: 0,\r\n                }\r\n            },\r\n            {\r\n                name: '80 - 200',\r\n                config: {\r\n                    min: 81,\r\n                    max: 200,\r\n                    timeLimit: 0,\r\n                }\r\n            }\r\n        ],\r\n        times: [0, 7000, 20000]\r\n    },\r\n    {\r\n        category: 'Length',\r\n        numQuestions: 5,\r\n        generator: genLength,\r\n\r\n        levels: [\r\n\r\n            {\r\n                name: 'Parallel Lines',\r\n                config: {\r\n                    center: 3,\r\n                    variance: 3,\r\n                    shape: 'parallel',\r\n                    timeLimit: 0,\r\n                }\r\n            },\r\n            {\r\n                name: 'Lines',\r\n                config: {\r\n                    center: 3,\r\n                    variance: 3,\r\n                    shape: 'singlelines',\r\n                    timeLimit: 0,\r\n                }\r\n            },\r\n            {\r\n                name: 'Paths',\r\n                config: {\r\n                    center: 16,\r\n                    variance: 1,\r\n                    shape: 'path',\r\n                    timeLimit: 0,\r\n                }\r\n            }\r\n        ],\r\n        times: [0, 7000, 20000]\r\n    },\r\n\r\n    {\r\n        category: 'Area',\r\n        numQuestions: 5,\r\n        generator: genArea,\r\n\r\n        levels: [\r\n\r\n            {\r\n                name: 'Circles',\r\n                config: {\r\n                    center: 3,\r\n                    variance: 5,\r\n                    shape: 'circle',\r\n                    timeLimit: 0,\r\n                }\r\n            },\r\n            {\r\n                name: 'Polygons',\r\n                config: {\r\n                    center: 3,\r\n                    variance: 4,\r\n                    shape: 'polygon',\r\n                    timeLimit: 0,\r\n                }\r\n            },\r\n        ],\r\n        times: [0, 7000, 20000]\r\n    },\r\n    \r\n]\r\n\r\nexport default modes;\r\n\r\n","import React, { CSSProperties } from \"react\";\r\nimport { Button, ButtonGroup, ThemeProvider } from \"react-bootstrap\";\r\nimport { Theme } from \"../App\";\r\n\r\nimport modes from \"../logic/GameModes\"\r\n\r\ntype propType = {\r\n    theme: Theme,\r\n    updateHandler: any,\r\n    visible: boolean\r\n}\r\n\r\ntype stateType = {\r\n    outer: string,\r\n    level: string,\r\n    timeLimit: number\r\n}\r\n\r\nclass GamemodeSidebar extends React.Component<propType,stateType> {\r\n\r\n    constructor(props: propType) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            outer: 'Multiplication',\r\n            level: 'Easy',\r\n            timeLimit: 0\r\n        }\r\n\r\n        this.changeOuter = this.changeOuter.bind(this);\r\n        this.changeTimeLimit = this.changeTimeLimit.bind(this);\r\n        this.changeLevel = this.changeLevel.bind(this);\r\n        this.updateParent = this.updateParent.bind(this);\r\n        this.handleUpdate = this.handleUpdate.bind(this)\r\n    }\r\n    \r\n\r\n    render() {\r\n\r\n        if (!this.props.visible) {\r\n            return <div></div>\r\n        }\r\n\r\n        let sidebarStyle: CSSProperties = {\r\n            height: '100%',\r\n            width: '300px',\r\n            position: 'fixed',\r\n            zIndex: 10000,\r\n            top: 0,\r\n            right: 0,\r\n            overflowX: 'hidden',\r\n            backgroundColor: this.props.theme.primary,\r\n            \r\n            borderLeft: `3px solid ${this.props.theme.textColor}`,\r\n            // borderTop: `3px solid ${this.props.theme.textColor}`,\r\n        }\r\n        sidebarStyle.marginTop = document.getElementById('header')?.clientHeight\r\n\r\n        let headingStyle: CSSProperties = {\r\n            fontFamily: this.props.theme.headerFont,\r\n            fontSize: '20px',\r\n            margin: '3px'\r\n        }\r\n\r\n        let chosenOuter = modes[0];\r\n\r\n        let outerButtons = modes.map((e: any, i: any) => {\r\n            let isSelected = e.category === this.state.outer\r\n            \r\n            if (isSelected) {\r\n                chosenOuter = e\r\n            }\r\n\r\n            return <Button \r\n                key = {i}\r\n                style = {{margin: '2px'}}\r\n                variant={isSelected ? 'warning' : 'primary'}\r\n                onClick={() => this.changeOuter(e.category)}    \r\n            >{e.category}</Button>\r\n        })\r\n\r\n        let timeButtons = chosenOuter.times.map((e: any ,i: any) => {\r\n            let isSelected = e === this.state.timeLimit\r\n            \r\n            let timerText = e > 0? (e/1000).toFixed(0) + ' s' : 'Unlimited'\r\n\r\n            return <Button \r\n            \r\n                key = {i}\r\n                style = {{margin: '2px'}}\r\n                variant={isSelected ? 'warning' : 'primary'}\r\n                onClick={() => this.changeTimeLimit(e)}    \r\n            >{timerText}</Button>\r\n        })\r\n\r\n        let levelButtons = chosenOuter.levels.map((e: any,i: any) => {\r\n            let isSelected = e.name === this.state.level\r\n            \r\n\r\n            return <Button \r\n                key = {i}\r\n                 style = {{margin: '2px'}}\r\n                variant={isSelected ? 'warning' : 'primary'}\r\n                onClick={() => this.changeLevel(e.name)}    \r\n            >{e.name}</Button>\r\n        })\r\n\r\n\r\n        return (\r\n\r\n            <div style= {sidebarStyle}>\r\n                <div style={{...headingStyle, fontSize: '24px'}}>Gamemode Settings</div>\r\n\r\n                <div style={headingStyle}>Time Limit</div> \r\n                {timeButtons}\r\n\r\n                <div style={headingStyle}>Difficulty</div> \r\n                {levelButtons}\r\n\r\n                <div style={headingStyle}>Category</div> \r\n                <ButtonGroup vertical>\r\n                    {outerButtons}\r\n                </ButtonGroup>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    changeOuter(newCategory: string) {\r\n        if (this.state.outer === newCategory) {\r\n            return\r\n        }\r\n\r\n        let outerObj:any = {};\r\n\r\n        for (let i = 0; i < modes.length; i++) {\r\n            if (modes[i].category === newCategory) {\r\n                outerObj = modes[i];\r\n            }\r\n        }\r\n\r\n        let newTime = outerObj.times[0]\r\n        let newLevel = outerObj.levels[0].name;\r\n\r\n\r\n        this.setState({outer: newCategory, timeLimit: newTime, level: newLevel}, this.updateParent)\r\n    }\r\n\r\n    changeTimeLimit(newLimit: number) {\r\n        if (this.state.timeLimit === newLimit) {\r\n            return\r\n        }\r\n        this.setState({timeLimit: newLimit}, this.updateParent)\r\n    }\r\n\r\n    changeLevel(newLevel: string) {\r\n        if (this.state.level === newLevel) {\r\n            return\r\n        }\r\n        this.setState({level: newLevel}, this.updateParent)\r\n    }\r\n\r\n    //category: string, numQ: number, generator: any, config: any\r\n    updateParent() {\r\n\r\n        let outerObj: any = {};\r\n        for (let i = 0; i < modes.length; i++) {\r\n            if (modes[i].category === this.state.outer) {\r\n                outerObj = modes[i];\r\n            }\r\n        }\r\n\r\n        let category = `${this.state.outer} (${this.state.level})`;\r\n        let numQ = outerObj.numQuestions;\r\n        let generator = outerObj.generator;        \r\n        let config: any = {}\r\n        for (let l of outerObj.levels) {\r\n            if (l.name === this.state.level) {\r\n                config = l.config;\r\n            }\r\n        }\r\n\r\n        config.timeLimit = this.state.timeLimit;\r\n\r\n        this.props.updateHandler(category, numQ, generator, config)\r\n    }\r\n\r\n    handleUpdate(outer: string) {\r\n        let outerObj: any = {};\r\n        for (let i = 0; i < modes.length; i++) {\r\n            if (`${modes[i].category} (${modes[i].levels[0].name})` === outer) {\r\n                outerObj = modes[i];\r\n            }\r\n        }\r\n        outer = outerObj.category\r\n        let level = outerObj.levels[0].name;\r\n        let timeLimit = outerObj.times[0]\r\n        this.setState({outer, level, timeLimit}) \r\n    }\r\n    \r\n}\r\n\r\nexport default GamemodeSidebar","import React, { CSSProperties } from \"react\"\r\nimport { Theme } from \"../App\"\r\n\r\n\r\ntype propType = {\r\n    theme: Theme,\r\n    sidebarHandler: (arg0: string) => void,\r\n    width: number\r\n}\r\n\r\n\r\nclass HeaderView extends React.Component<propType,{}> {\r\n    render() {\r\n        \r\n        let headerStyle: CSSProperties = {\r\n            background: this.props.theme.primary,\r\n            width: \"wrap-content\",\r\n            textAlign: 'center',\r\n            fontFamily: this.props.theme.headerFont,\r\n            fontSize: \"30px\",\r\n            color: this.props.theme.textColor,\r\n        }\r\n\r\n        let iconStyle: CSSProperties = {\r\n            height: '100%',\r\n            margin: '6px',\r\n        }\r\n\r\n        if (this.props.width < 400) headerStyle.fontSize = \"24px\"\r\n        return (\r\n            \r\n            <div style = {headerStyle} id = 'header'>\r\n             \r\n                <span style={{ ...headerStyle, display:'inline-block'}}>\r\n                    The Estimation Game\r\n                </span>\r\n                <i \r\n                    className=\"fas fa-cog\" \r\n                    style={{ ...iconStyle ,float: 'left'}}\r\n                    onClick = {() => this.props.sidebarHandler('left')}\r\n                />\r\n                <i \r\n                    className=\"fas fa-dice\" \r\n                    style={{...iconStyle ,float: 'right'}}\r\n                    onClick = {() => this.props.sidebarHandler('right')}\r\n                \r\n                />\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default HeaderView","import React from \"react\";\r\nimport { Theme } from \"../App\";\r\nimport Question from \"../logic/Question\";\r\n\r\n\r\nimport modes from \"../logic/GameModes\"\r\nimport { Button, ButtonGroup } from \"react-bootstrap\";\r\n\r\n\r\ntype propType = {\r\n    theme: Theme,\r\n    updateHandler: any\r\n\r\n}\r\n\r\nclass WelcomePage extends React.Component<propType, {}> {\r\n\r\n    constructor(props: propType) {\r\n        super(props) \r\n            \r\n        this.updateParent = this.updateParent.bind(this)\r\n        \r\n    }\r\n\r\n    render() {\r\n\r\n        let {theme, updateHandler} = this.props\r\n\r\n        let outerButtons = modes.map((e: any, i: any) => {\r\n            \r\n\r\n            return <Button \r\n                key = {i}\r\n                style = {{margin: '2px'}}\r\n                variant='primary'\r\n                onClick={() => this.updateParent(e.category)}    \r\n            >{e.category}</Button>\r\n        })\r\n\r\n        return (<div id='welcomediv'>\r\n            <div style={{fontSize: '24px', fontFamily: theme.bodyFont, textAlign: 'center', padding: '10px'}}>\r\n                Quick Play\r\n            </div>\r\n            \r\n            <ButtonGroup vertical style={{width: '100%'}}>\r\n                {outerButtons}\r\n            </ButtonGroup>\r\n           \r\n        </div>)\r\n    }\r\n\r\n    updateParent(outer: string) {\r\n\r\n        let outerObj: any = {};\r\n        for (let i = 0; i < modes.length; i++) {\r\n            if (modes[i].category === outer) {\r\n                outerObj = modes[i];\r\n            }\r\n        }\r\n        let level = outerObj.levels[0].name\r\n\r\n        let category = `${outer} (${level})`;\r\n        let numQ = outerObj.numQuestions;\r\n        let generator = outerObj.generator;        \r\n        let config: any = {}\r\n        for (let l of outerObj.levels) {\r\n            if (l.name === level) {\r\n                config = l.config;\r\n            }\r\n        }\r\n\r\n        config.timeLimit = outerObj.times[0];\r\n\r\n        this.props.updateHandler(category, numQ, generator, config, true)\r\n    }\r\n}\r\n\r\nexport default WelcomePage","import React, { CSSProperties } from \"react\";\r\nimport { Button, ButtonGroup, ThemeProvider } from \"react-bootstrap\";\r\nimport { Theme } from \"../App\";\r\nimport modes from \"../logic/GameModes\"\r\nvar ls = require('local-storage')\r\n\r\n\r\ntype propType = {\r\n    theme: Theme,\r\n    visible: boolean\r\n}\r\n\r\nclass SettingsSidebar extends React.Component<propType,{}> {\r\n\r\n    constructor(props: propType) {\r\n        super(props);\r\n\r\n    }\r\n    \r\n\r\n    render() {\r\n\r\n        if (!this.props.visible) {\r\n            return <div></div>\r\n        }\r\n\r\n        let sidebarStyle: CSSProperties = {\r\n            height: '100%',\r\n            width: '300px',\r\n            position: 'fixed',\r\n            zIndex: 10000,\r\n            top: 0,\r\n            left: 0,\r\n            overflowX: 'hidden',\r\n            backgroundColor: this.props.theme.primary,\r\n            \r\n            borderRight: `3px solid ${this.props.theme.textColor}`,\r\n            // borderTop: `3px solid ${this.props.theme.textColor}`,\r\n        }\r\n        sidebarStyle.marginTop = document.getElementById('header')?.clientHeight\r\n\r\n        let headingStyle: CSSProperties = {\r\n            fontFamily: this.props.theme.headerFont,\r\n            fontSize: '20px',\r\n            margin: '3px'\r\n        }\r\n\r\n    \r\n\r\n\r\n        return (\r\n\r\n            <div style= {sidebarStyle}>\r\n                <Button \r\n                    style = {{margin: '5px'}}\r\n                    variant = 'danger'\r\n                    onClick = {this.handleDelete} >\r\n                        \r\n                Reset Highscores</Button>\r\n\r\n                {/* <Button \r\n                    style = {{margin: '5px'}}\r\n                    variant = 'danger'\r\n                    onClick = {() => {\r\n                        console.log(ls('highscores'))\r\n                    }} >\r\n                        \r\n                Debug</Button> */}\r\n\r\n                \r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleDelete() {\r\n        let res = window.confirm('do you wanna delete')\r\n        if (!res) {\r\n            return\r\n        }\r\n\r\n        ls.remove('highscores')\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}   \r\n\r\nexport default SettingsSidebar","import React, { CSSProperties } from 'react';\r\nimport { Container, Row, Col} from 'react-bootstrap';\r\nimport './App.css';\r\nimport { genMul } from './logic/QGenerators';\r\nimport Question from './logic/Question';\r\nimport CenterView from './view/CenterView';\r\nimport GamemodeSidebar from './view/GamemodeSidebar';\r\nimport HeaderView from './view/HeaderView';\r\nimport modes from './logic/GameModes'\r\nimport GameState from './logic/GameState';\r\nimport WelcomePage from './view/WelcomePage';\r\nimport TextView from './questionViews/TextView';\r\nimport AngleView from './questionViews/AngleView';\r\nimport CountingStaticView from './questionViews/CountingStaticView';\r\nimport { Recoverable } from 'repl';\r\nimport SettingsSidebar from './view/SettingsSidebar';\r\nvar ls = require('local-storage')\r\n\r\nlet generator: (arg0: any) => Question = genMul;\r\ntype stateType = {\r\n\twidth: number,\r\n\theight: number,\r\n\tleftBar: boolean,\r\n\trightBar: boolean,\r\n\twelcomePage: boolean\r\n}\r\n\r\nexport type Theme = {\r\n\tbackground: string,\r\n\tprimary: string,\r\n\tsecondary: string,\r\n\ttextColor: string,\r\n\tquestionFont: string, \r\n\theaderFont: string,\r\n\tbodyFont: string\r\n}\r\n\r\nlet theme: Theme = {\r\n\tbackground: \"#222831\",\r\n\tprimary: \"#30475e\",\r\n\tsecondary: \"#ffc107\",\r\n\ttextColor: \"#eeeeee\",\r\n\tquestionFont: \"Roboto Mono\",\r\n\theaderFont: \"Concert One\",\r\n\tbodyFont: \"Noto Sans\"\r\n}\r\n\r\nlet appStyle: CSSProperties = {\r\n\tbackground: theme.background,\r\n\tminHeight: \"100vh\",\r\n\tcolor: theme.textColor,\r\n\tfontFamily: theme.bodyFont\r\n}\r\n\r\n\r\nlet previewQuestions: any = [\r\n\t<TextView text = {'12 * 34'}/>,\r\n\t<TextView text = {'60% * 35% * 12%'}/>,\r\n\t<AngleView angle = {Math.PI / 3}/>,\r\n\t<CountingStaticView num = {25} shape = {'circle'}/>\r\n]\r\n\r\nlet categories = ['Multiplication' , 'Percentages', 'Angles' , 'Counting']\r\n\r\n\r\n\r\nclass App extends React.Component<any,stateType> {\r\n\r\n\tcenterRef: React.RefObject<CenterView>\r\n\tsidebarRef: React.RefObject<GamemodeSidebar>\r\n\r\n\tconstructor(props: any) {\r\n\t\tsuper(props)\r\n\t\t\r\n\t\tthis.state = {\r\n\t\t\twidth: window.innerWidth,\r\n\t\t\theight: window.innerHeight,\r\n\t\t\trightBar: false,\r\n\t\t\tleftBar: false,\r\n\t\t\twelcomePage: true\r\n\t\t}\r\n\t\twindow.addEventListener('resize', (ev: any)=> {\r\n\t\t\tthis.setState({\r\n\t\t\t\theight: ev.currentTarget.innerHeight,\r\n\t\t\t\twidth: ev.currentTarget.innerWidth\r\n\t\t\t})\r\n\t\t})\r\n\t\tthis.sidebarHandler = this.sidebarHandler.bind(this)\r\n\t\tthis.centerRef = React.createRef()\r\n\t\tthis.sidebarRef = React.createRef()\r\n\t\tthis.updateGamemode = this.updateGamemode.bind(this)\r\n\r\n\t\tif (ls('highscore') == null) {\r\n\t\t\tls('highscore' , {})\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\t\r\n\trender() {\r\n    \treturn (\r\n\t\t\t<div style = {appStyle}>\r\n\t\t\t\t<HeaderView theme = {theme} sidebarHandler = {this.sidebarHandler} width = {this.state.width} />\r\n\t\t\t\t{this.state.welcomePage && <div style={{right: 5, position: 'fixed'}}> View all modes ↑ </div>}\r\n\t\t\t\t{this.state.welcomePage && <div style={{left: 5, position: 'fixed'}}> ↑ Settings </div>}\r\n\t\t\t\t{this.state.welcomePage && <br/>}\r\n\t\t\t\t<SettingsSidebar theme = {theme} visible = {this.state.leftBar} />\r\n\t\t\t\t<Container>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col lg={2} md={1} xs = {0}>\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col lg={8} md={10} xs = {12}>\r\n\t\t\t\t\t\t\t{this.state.welcomePage? \r\n\t\t\t\t\t\t\t\t<WelcomePage theme = {theme} updateHandler = {this.updateGamemode}/> : \r\n\t\t\t\t\t\t\t\t<CenterView theme = {theme} ref = {this.centerRef} width = {this.state.width}></CenterView>\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col lg ={2} md = {1} xs = {0} >\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t</Row>\r\n\t\t\t\t</Container>\r\n\r\n\t\t\t\t <GamemodeSidebar ref = {this.sidebarRef} theme = {theme} updateHandler = {this.updateGamemode} visible = {this.state.rightBar} />\r\n\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n\t\r\n  \t}\r\n  \r\n\tsidebarHandler(side: string) {\r\n\t\tif (side === 'right') {\r\n\t\t\tthis.setState(({rightBar}) => ({\r\n\t\t\t\trightBar: !rightBar,\r\n\t\t\t\tleftBar: false\r\n\t\t\t}))\r\n\t\t} else if (side === 'left') {\r\n\t\t\tthis.setState(({leftBar}) => ({\r\n\t\t\t\tleftBar: !leftBar,\r\n\t\t\t\trightBar: false\r\n\t\t\t}))\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tupdateGamemode(category: string, numQ: number, generator: any, config: any, fromWelcomePage = false) {\r\n\t\tif (this.state.welcomePage) {\r\n\t\t\tthis.setState({welcomePage: false}, \r\n\t\t\t() => {\r\n\t\t\t\tif (fromWelcomePage) {\r\n\t\t\t\t\tthis.sidebarRef.current?.handleUpdate(category)\r\n\t\t\t\t}\t\r\n\t\t\t\tthis.updateGamemode(category, numQ, generator, config)\r\n\t\t\t})\r\n\t\t} \r\n\t\tlet gameState = new GameState();\r\n\t\tgameState.category = category;\r\n\t\tgameState.numQuestions = numQ;\r\n\t\tgameState.generator = generator;\r\n\t\tgameState.generatorconfig =config;\r\n\t\tgameState.storageKey = `${category}|${config.timeLimit}`\r\n\t\tthis.centerRef.current?.parentUpdate(gameState)\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}